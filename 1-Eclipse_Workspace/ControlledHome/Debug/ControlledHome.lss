
ControlledHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00800060  00005cda  00005d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800386  00800386  00006094  2**0
                  ALLOC
  3 .stab         00004e30  00000000  00000000  00006094  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000112b  00000000  00000000  0000aec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000bfef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c14f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c2de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000103a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000107ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <__vector_10>
      2c:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <main>
      8a:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 2e 	jmp	0x5ca0	; 0x5ca0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 2e 	jmp	0x5ca0	; 0x5ca0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 40 2e 	jmp	0x5c80	; 0x5c80 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 44 2e 	jmp	0x5c88	; 0x5c88 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VoidInit>:

/* Global Pointer To Function */
void (*ADC_PfGlobal)(u16) = NULL;

void ADC_VoidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
#if VREF   == AVCC	
	/* Set Vref = VCC = 5V */
	SET_BIT(ADC_u8_ADMUX_REG,6);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
#elif VREF == Internal_Voltage_Reference
	SET_BIT(ADC_u8_ADMUX_REG,6);
	SET_BIT(ADC_u8_ADMUX_REG,7);
#endif	
	/* Set Right Adjust */
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	/* Disable Auto Trigger */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	/* Set CLK/64 = 8MHZ/64 = 125KHZ  In Range (50KHZ : 200KHZ) */
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
	/* Enable ADC */
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValue>:
u8 ADC_u8GetDigitalValue(u8 Copy_ChannalNum,u16 *Copy_Pu16ReturnDigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	29 97       	sbiw	r28, 0x09	; 9
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_U8ErrorState = STATE_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOut = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_ChannalNum < 32 && Copy_Pu16ReturnDigitalValue!= NULL)
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	d0 f5       	brcc	.+116    	; 0xdbc <ADC_u8GetDigitalValue+0xa0>
     d48:	8f 81       	ldd	r24, Y+7	; 0x07
     d4a:	98 85       	ldd	r25, Y+8	; 0x08
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	b1 f1       	breq	.+108    	; 0xdbc <ADC_u8GetDigitalValue+0xa0>
	{
		/* Clear MUX4 .. 0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d50:	a7 e2       	ldi	r26, 0x27	; 39
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e7 e2       	ldi	r30, 0x27	; 39
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 7e       	andi	r24, 0xE0	; 224
     d5c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_ChannalNum;
     d5e:	a7 e2       	ldi	r26, 0x27	; 39
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e7 e2       	ldi	r30, 0x27	; 39
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	90 81       	ld	r25, Z
     d68:	8e 81       	ldd	r24, Y+6	; 0x06
     d6a:	89 2b       	or	r24, r25
     d6c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 64       	ori	r24, 0x40	; 64
     d7a:	8c 93       	st	X, r24
		/* Wait Flag */
		while(GET_BIT(ADC_u8_ADCSRA_REG,4) == 0  && Local_u32TimeOut < ADC_u32_TIME_OUT)
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
		{
			Local_u32TimeOut++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4) != 0)
     d82:	e6 e2       	ldi	r30, 0x26	; 38
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	82 95       	swap	r24
     d8a:	8f 70       	andi	r24, 0x0F	; 15
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	90 70       	andi	r25, 0x00	; 0
     d94:	88 23       	and	r24, r24
     d96:	81 f0       	breq	.+32     	; 0xdb8 <ADC_u8GetDigitalValue+0x9c>
		{
			/* Clear Flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     d98:	a6 e2       	ldi	r26, 0x26	; 38
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e6 e2       	ldi	r30, 0x26	; 38
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 61       	ori	r24, 0x10	; 16
     da4:	8c 93       	st	X, r24
			*Copy_Pu16ReturnDigitalValue = ADC_u16_REG;
     da6:	e4 e2       	ldi	r30, 0x24	; 36
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	ef 81       	ldd	r30, Y+7	; 0x07
     db0:	f8 85       	ldd	r31, Y+8	; 0x08
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <ADC_u8GetDigitalValue+0xa2>
		}
		else
		{
			Local_U8ErrorState = STATE_NOK;
     db8:	1d 82       	std	Y+5, r1	; 0x05
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <ADC_u8GetDigitalValue+0xa2>
		}
	}
	else
	{
	   	Local_U8ErrorState = STATE_NOK;
     dbc:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_U8ErrorState;
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dc0:	29 96       	adiw	r28, 0x09	; 9
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <ADC_u8GetDigitalValueINT>:
u8 ADC_u8GetDigitalValueINT(u8 Copy_ChannalNum,void(*Copy_Pf)(u16))
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <ADC_u8GetDigitalValueINT+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <ADC_u8GetDigitalValueINT+0x8>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	7c 83       	std	Y+4, r23	; 0x04
     de2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState = STATE_OK;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_ChannalNum < 32 && Copy_Pf != NULL)
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	80 32       	cpi	r24, 0x20	; 32
     dec:	40 f5       	brcc	.+80     	; 0xe3e <ADC_u8GetDigitalValueINT+0x6c>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	21 f1       	breq	.+72     	; 0xe3e <ADC_u8GetDigitalValueINT+0x6c>
	{
		ADC_PfGlobal = Copy_Pf;
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	90 93 87 03 	sts	0x0387, r25
     dfe:	80 93 86 03 	sts	0x0386, r24
		/* Enable Intrrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e02:	a6 e2       	ldi	r26, 0x26	; 38
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e6 e2       	ldi	r30, 0x26	; 38
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 60       	ori	r24, 0x08	; 8
     e0e:	8c 93       	st	X, r24
		/* Clear MUX4 .. 0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e10:	a7 e2       	ldi	r26, 0x27	; 39
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e2       	ldi	r30, 0x27	; 39
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 7e       	andi	r24, 0xE0	; 224
     e1c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_ChannalNum;
     e1e:	a7 e2       	ldi	r26, 0x27	; 39
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e2       	ldi	r30, 0x27	; 39
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	90 81       	ld	r25, Z
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	89 2b       	or	r24, r25
     e2c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 64       	ori	r24, 0x40	; 64
     e3a:	8c 93       	st	X, r24
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <ADC_u8GetDigitalValueINT+0x6e>
	}
	else
	{
	   	Local_U8ErrorState = STATE_NOK;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
     e40:	89 81       	ldd	r24, Y+1	; 0x01
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <ADC_u8GetRegValue>:
u8 ADC_u8GetRegValue(u16 *Copy_u16RegValue)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <ADC_u8GetRegValue+0x6>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9b 83       	std	Y+3, r25	; 0x03
     e5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = STATE_OK;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16RegValue != NULL)
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	49 f0       	breq	.+18     	; 0xe7e <ADC_u8GetRegValue+0x2e>
	{
		*Copy_u16RegValue = ADC_u16_REG;
     e6c:	e4 e2       	ldi	r30, 0x24	; 36
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <ADC_u8GetRegValue+0x30>
	}
	else
	{
	   	Local_U8ErrorState = STATE_NOK;
     e7e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <__vector_16>:

/* Prototype For ISR For ADC */
void __vector_16(void)                 __attribute__((signal));
void __vector_16(void)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	/* Disable INT */
	CLR_BIT(ADC_u8_ADCSRA_REG,3);
     eb8:	a6 e2       	ldi	r26, 0x26	; 38
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	8c 93       	st	X, r24
	/* Update Global Pointer */
	ADC_PfGlobal(ADC_u16_REG);
     ec6:	20 91 86 03 	lds	r18, 0x0386
     eca:	30 91 87 03 	lds	r19, 0x0387
     ece:	e4 e2       	ldi	r30, 0x24	; 36
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	f9 01       	movw	r30, r18
     ed8:	09 95       	icall
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <VoidControlledHomeRoom1>:
#include "StepperMotor_interface.h"
#include "ServoMotor_interface.h"
/*                                      ROOM1                                                                 */
u8 Global_u8RecieveData;
void VoidControlledHomeRoom1(void)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/*                               Check For Receive ASCII Code From Bluetooth                                    */
		UART_VoidRecieveDataByte(&Global_u8RecieveData);
     f08:	80 e9       	ldi	r24, 0x90	; 144
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		/*                                  Check For User Turn On RED LED                                              */
		if( Global_u8RecieveData == 'a')
     f10:	80 91 90 03 	lds	r24, 0x0390
     f14:	81 36       	cpi	r24, 0x61	; 97
     f16:	61 f4       	brne	.+24     	; 0xf30 <VoidControlledHomeRoom1+0x30>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Red Lamp Is On");
     f18:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     f1c:	80 e6       	ldi	r24, 0x60	; 96
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_HIGH);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
     f2e:	4f c0       	rjmp	.+158    	; 0xfce <VoidControlledHomeRoom1+0xce>
		}
		/*                                  Check For User Turn Off RED LED                                             */
		else if(Global_u8RecieveData == 'b')
     f30:	80 91 90 03 	lds	r24, 0x0390
     f34:	82 36       	cpi	r24, 0x62	; 98
     f36:	61 f4       	brne	.+24     	; 0xf50 <VoidControlledHomeRoom1+0x50>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Red Lamp Is Off");
     f38:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     f3c:	8f e6       	ldi	r24, 0x6F	; 111
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_LOW);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
     f4e:	3f c0       	rjmp	.+126    	; 0xfce <VoidControlledHomeRoom1+0xce>
		}
		/*                                  Check For User Turn On Yellow LED                                           */
		else if( Global_u8RecieveData == 'e')
     f50:	80 91 90 03 	lds	r24, 0x0390
     f54:	85 36       	cpi	r24, 0x65	; 101
     f56:	61 f4       	brne	.+24     	; 0xf70 <VoidControlledHomeRoom1+0x70>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Yellow LED Is On");
     f58:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     f5c:	8f e7       	ldi	r24, 0x7F	; 127
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,DIO_U8_HIGH);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
     f6e:	2f c0       	rjmp	.+94     	; 0xfce <VoidControlledHomeRoom1+0xce>
		}
		/*                                  Check For User Turn Off Yellow LED                                          */
		else if(Global_u8RecieveData == 'f')
     f70:	80 91 90 03 	lds	r24, 0x0390
     f74:	86 36       	cpi	r24, 0x66	; 102
     f76:	61 f4       	brne	.+24     	; 0xf90 <VoidControlledHomeRoom1+0x90>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Yellow LED Is OF");
     f78:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     f7c:	80 e9       	ldi	r24, 0x90	; 144
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,DIO_U8_LOW);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
     f8e:	1f c0       	rjmp	.+62     	; 0xfce <VoidControlledHomeRoom1+0xce>
		}
		/*                                  Check For User Turn On Green LED                                            */
		else if( Global_u8RecieveData == 'c')
     f90:	80 91 90 03 	lds	r24, 0x0390
     f94:	83 36       	cpi	r24, 0x63	; 99
     f96:	61 f4       	brne	.+24     	; 0xfb0 <VoidControlledHomeRoom1+0xb0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Green LED Is On");
     f98:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     f9c:	81 ea       	ldi	r24, 0xA1	; 161
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,DIO_U8_HIGH);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	62 e0       	ldi	r22, 0x02	; 2
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
     fae:	0f c0       	rjmp	.+30     	; 0xfce <VoidControlledHomeRoom1+0xce>
		}
		/*                                  Check For User Turn Off Green LED                                           */
		else if(Global_u8RecieveData == 'd')
     fb0:	80 91 90 03 	lds	r24, 0x0390
     fb4:	84 36       	cpi	r24, 0x64	; 100
     fb6:	59 f4       	brne	.+22     	; 0xfce <VoidControlledHomeRoom1+0xce>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("Green LED Is Off");
     fb8:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     fbc:	81 eb       	ldi	r24, 0xB1	; 177
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,DIO_U8_LOW);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
		}
		/*                                  Check For User Turn On All LEDs                                             */
		if( Global_u8RecieveData == 'A')
     fce:	80 91 90 03 	lds	r24, 0x0390
     fd2:	81 34       	cpi	r24, 0x41	; 65
     fd4:	b1 f4       	brne	.+44     	; 0x1002 <VoidControlledHomeRoom1+0x102>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("All LEDs Are On");
     fd6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
     fda:	82 ec       	ldi	r24, 0xC2	; 194
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,DIO_U8_HIGH);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,DIO_U8_HIGH);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_HIGH);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    1000:	19 c0       	rjmp	.+50     	; 0x1034 <VoidControlledHomeRoom1+0x134>
		}
		/*                                  Check For User Turn Off All LEDs                                            */
		else if(Global_u8RecieveData == 'B')
    1002:	80 91 90 03 	lds	r24, 0x0390
    1006:	82 34       	cpi	r24, 0x42	; 66
    1008:	a9 f4       	brne	.+42     	; 0x1034 <VoidControlledHomeRoom1+0x134>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("All LEDs Are Off");
    100a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    100e:	82 ed       	ldi	r24, 0xD2	; 210
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,DIO_U8_LOW);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,DIO_U8_LOW);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_LOW);
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
		}
		/*                                  Check For User Press Button Of Return                                       */
		if(Global_u8RecieveData == '0')
    1034:	80 91 90 03 	lds	r24, 0x0390
    1038:	80 33       	cpi	r24, 0x30	; 48
    103a:	09 f0       	breq	.+2      	; 0x103e <VoidControlledHomeRoom1+0x13e>
    103c:	65 cf       	rjmp	.-310    	; 0xf08 <VoidControlledHomeRoom1+0x8>
		{
			LCD_VoidClear();
    103e:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			break;
		}
	}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <VoidControlledHomeRoom2>:
}
    /*                                         ROOM2                                                                      */
void VoidControlledHomeRoom2(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		UART_VoidRecieveDataByte(&Global_u8RecieveData);
    1050:	80 e9       	ldi	r24, 0x90	; 144
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		if(Global_u8RecieveData == 'G')
    1058:	80 91 90 03 	lds	r24, 0x0390
    105c:	87 34       	cpi	r24, 0x47	; 71
    105e:	89 f4       	brne	.+34     	; 0x1082 <VoidControlledHomeRoom2+0x3a>
		{
			       /* Clock Wise Motor */
			LCD_VoidClear(); LCD_VoidSentSringAndNum("Motor Is CW");
    1060:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1064:	83 ee       	ldi	r24, 0xE3	; 227
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN3,DIO_U8_HIGH);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_LOW);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	64 e0       	ldi	r22, 0x04	; 4
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    1080:	29 c0       	rjmp	.+82     	; 0x10d4 <VoidControlledHomeRoom2+0x8c>
		}
		else if(Global_u8RecieveData == 'H')
    1082:	80 91 90 03 	lds	r24, 0x0390
    1086:	88 34       	cpi	r24, 0x48	; 72
    1088:	89 f4       	brne	.+34     	; 0x10ac <VoidControlledHomeRoom2+0x64>
		{
			     /* Anti Clock Wise Motor */
			LCD_VoidClear(); LCD_VoidSentSringAndNum("Motor Is AntiCW");
    108a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    108e:	8f ee       	ldi	r24, 0xEF	; 239
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_HIGH);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	64 e0       	ldi	r22, 0x04	; 4
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN3,DIO_U8_LOW);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <VoidControlledHomeRoom2+0x8c>
		}
		else if(Global_u8RecieveData == 'J')
    10ac:	80 91 90 03 	lds	r24, 0x0390
    10b0:	8a 34       	cpi	r24, 0x4A	; 74
    10b2:	81 f4       	brne	.+32     	; 0x10d4 <VoidControlledHomeRoom2+0x8c>
		{
			     /* Stop Motor */
			LCD_VoidClear(); LCD_VoidSentSringAndNum("Motor Is Stop");
    10b4:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_LOW);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	64 e0       	ldi	r22, 0x04	; 4
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN3,DIO_U8_LOW);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	63 e0       	ldi	r22, 0x03	; 3
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
		}
		if(Global_u8RecieveData == '0')
    10d4:	80 91 90 03 	lds	r24, 0x0390
    10d8:	80 33       	cpi	r24, 0x30	; 48
    10da:	09 f0       	breq	.+2      	; 0x10de <VoidControlledHomeRoom2+0x96>
    10dc:	b9 cf       	rjmp	.-142    	; 0x1050 <VoidControlledHomeRoom2+0x8>
		{
			LCD_VoidClear();
    10de:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			break;
		}
	}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <VoidControlledHomeRoom3>:

}
     /*                                         ROOM3                                                                      */
void VoidControlledHomeRoom3(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	a2 97       	sbiw	r28, 0x22	; 34
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16DigitalValue ,Local_u16AnalogValue ;
	u16 Local_u16TempValue;
	while(1)
	{
		/*                               Check For Receive ASCII Code From Bluetooth                                    */
		sensor:UART_VoidRecieveDataByte(&Global_u8RecieveData);
    10fc:	80 e9       	ldi	r24, 0x90	; 144
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		/*                               Get Digital Value From Channel 0 ADC                                           */
		ADC_u8GetDigitalValue(ADC_u8_Channel_0,&Local_u16DigitalValue);
    1104:	9e 01       	movw	r18, r28
    1106:	2f 5d       	subi	r18, 0xDF	; 223
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValue>
		/*                               Mathematical Operation For Calculate Analog Value                              */
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL) / 1024);   /*  mV  */
    1112:	89 a1       	ldd	r24, Y+33	; 0x21
    1114:	9a a1       	ldd	r25, Y+34	; 0x22
    1116:	cc 01       	movw	r24, r24
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	28 e8       	ldi	r18, 0x88	; 136
    111e:	33 e1       	ldi	r19, 0x13	; 19
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__mulsi3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	07 2e       	mov	r0, r23
    1132:	7a e0       	ldi	r23, 0x0A	; 10
    1134:	b6 95       	lsr	r27
    1136:	a7 95       	ror	r26
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	7a 95       	dec	r23
    113e:	d1 f7       	brne	.-12     	; 0x1134 <VoidControlledHomeRoom3+0x4c>
    1140:	70 2d       	mov	r23, r0
    1142:	98 a3       	std	Y+32, r25	; 0x20
    1144:	8f 8f       	std	Y+31, r24	; 0x1f
		/*                                   Temperature In Voltage                                                     */
		Local_u16TempValue = Local_u16AnalogValue/10;
    1146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1148:	98 a1       	ldd	r25, Y+32	; 0x20
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__udivmodhi4>
    1154:	cb 01       	movw	r24, r22
    1156:	9e 8f       	std	Y+30, r25	; 0x1e
    1158:	8d 8f       	std	Y+29, r24	; 0x1d
		/*                                  Check For User Turn On LM35 Sensor                                          */
		if(Global_u8RecieveData == 'T')
    115a:	80 91 90 03 	lds	r24, 0x0390
    115e:	84 35       	cpi	r24, 0x54	; 84
    1160:	09 f0       	breq	.+2      	; 0x1164 <VoidControlledHomeRoom3+0x7c>
    1162:	8c c0       	rjmp	.+280    	; 0x127c <VoidControlledHomeRoom3+0x194>
		{
			/*                 Turn on LM35 Sensor               */
			LCD_VoidClear();
    1164:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("LM35 Sensor On");
    1168:	8d e0       	ldi	r24, 0x0D	; 13
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e8       	ldi	r25, 0x80	; 128
    1174:	a2 ea       	ldi	r26, 0xA2	; 162
    1176:	b4 e4       	ldi	r27, 0x44	; 68
    1178:	89 8f       	std	Y+25, r24	; 0x19
    117a:	9a 8f       	std	Y+26, r25	; 0x1a
    117c:	ab 8f       	std	Y+27, r26	; 0x1b
    117e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1180:	69 8d       	ldd	r22, Y+25	; 0x19
    1182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	4a ef       	ldi	r20, 0xFA	; 250
    118e:	54 e4       	ldi	r21, 0x44	; 68
    1190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8d 8b       	std	Y+21, r24	; 0x15
    119a:	9e 8b       	std	Y+22, r25	; 0x16
    119c:	af 8b       	std	Y+23, r26	; 0x17
    119e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a0:	6d 89       	ldd	r22, Y+21	; 0x15
    11a2:	7e 89       	ldd	r23, Y+22	; 0x16
    11a4:	8f 89       	ldd	r24, Y+23	; 0x17
    11a6:	98 8d       	ldd	r25, Y+24	; 0x18
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <VoidControlledHomeRoom3+0xda>
		__ticks = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9c 8b       	std	Y+20, r25	; 0x14
    11be:	8b 8b       	std	Y+19, r24	; 0x13
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <VoidControlledHomeRoom3+0x158>
	else if (__tmp > 65535)
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	57 e4       	ldi	r21, 0x47	; 71
    11d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	4c f5       	brge	.+82     	; 0x122c <VoidControlledHomeRoom3+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	69 8d       	ldd	r22, Y+25	; 0x19
    11dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9c 8b       	std	Y+20, r25	; 0x14
    1200:	8b 8b       	std	Y+19, r24	; 0x13
    1202:	0f c0       	rjmp	.+30     	; 0x1222 <VoidControlledHomeRoom3+0x13a>
    1204:	88 ec       	ldi	r24, 0xC8	; 200
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9a 8b       	std	Y+18, r25	; 0x12
    120a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    120c:	89 89       	ldd	r24, Y+17	; 0x11
    120e:	9a 89       	ldd	r25, Y+18	; 0x12
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <VoidControlledHomeRoom3+0x128>
    1214:	9a 8b       	std	Y+18, r25	; 0x12
    1216:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9c 8b       	std	Y+20, r25	; 0x14
    1220:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	9c 89       	ldd	r25, Y+20	; 0x14
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	69 f7       	brne	.-38     	; 0x1204 <VoidControlledHomeRoom3+0x11c>
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <VoidControlledHomeRoom3+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122c:	6d 89       	ldd	r22, Y+21	; 0x15
    122e:	7e 89       	ldd	r23, Y+22	; 0x16
    1230:	8f 89       	ldd	r24, Y+23	; 0x17
    1232:	98 8d       	ldd	r25, Y+24	; 0x18
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	8b 8b       	std	Y+19, r24	; 0x13
    1240:	8b 89       	ldd	r24, Y+19	; 0x13
    1242:	9c 89       	ldd	r25, Y+20	; 0x14
    1244:	98 8b       	std	Y+16, r25	; 0x10
    1246:	8f 87       	std	Y+15, r24	; 0x0f
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
    124a:	98 89       	ldd	r25, Y+16	; 0x10
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <VoidControlledHomeRoom3+0x164>
    1250:	98 8b       	std	Y+16, r25	; 0x10
    1252:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1300);
			LCD_VoidClear();
    1254:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("Temperature:  C");
    1258:	8c e1       	ldi	r24, 0x1C	; 28
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(1,12);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	6c e0       	ldi	r22, 0x0C	; 12
    1264:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
			/* Print Temperature On LCD */
			LCD_voidSendNumber(Local_u16TempValue);
    1268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    126a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    126c:	cc 01       	movw	r24, r24
    126e:	a0 e0       	ldi	r26, 0x00	; 0
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	0e 94 74 24 	call	0x48e8	; 0x48e8 <LCD_voidSendNumber>
    127a:	40 cf       	rjmp	.-384    	; 0x10fc <VoidControlledHomeRoom3+0x14>
			goto sensor;
		}
		/*                                  Check For User Turn Off LM35 Sensor                                        */
		else if(Global_u8RecieveData == 'Y')
    127c:	80 91 90 03 	lds	r24, 0x0390
    1280:	89 35       	cpi	r24, 0x59	; 89
    1282:	39 f4       	brne	.+14     	; 0x1292 <VoidControlledHomeRoom3+0x1aa>
		{
			/*                 Turn Off LM35 Sensor               */
			LCD_VoidClear();
    1284:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("LM35 Sensor Off");
    1288:	8c e2       	ldi	r24, 0x2C	; 44
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1290:	35 cf       	rjmp	.-406    	; 0x10fc <VoidControlledHomeRoom3+0x14>
			goto sensor;
		}
		/*                                  Check For User Turn On LDR Sensor                                          */
		else if(Global_u8RecieveData == 'U')
    1292:	80 91 90 03 	lds	r24, 0x0390
    1296:	85 35       	cpi	r24, 0x55	; 85
    1298:	09 f0       	breq	.+2      	; 0x129c <VoidControlledHomeRoom3+0x1b4>
    129a:	91 c0       	rjmp	.+290    	; 0x13be <VoidControlledHomeRoom3+0x2d6>
		{
			/*                 Turn on LDR Sensor               */
			LCD_VoidClear();
    129c:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("LDR Sensor Is On");
    12a0:	8c e3       	ldi	r24, 0x3C	; 60
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e8       	ldi	r25, 0x80	; 128
    12ac:	a2 ea       	ldi	r26, 0xA2	; 162
    12ae:	b4 e4       	ldi	r27, 0x44	; 68
    12b0:	8b 87       	std	Y+11, r24	; 0x0b
    12b2:	9c 87       	std	Y+12, r25	; 0x0c
    12b4:	ad 87       	std	Y+13, r26	; 0x0d
    12b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	4a ef       	ldi	r20, 0xFA	; 250
    12c6:	54 e4       	ldi	r21, 0x44	; 68
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	8f 83       	std	Y+7, r24	; 0x07
    12d2:	98 87       	std	Y+8, r25	; 0x08
    12d4:	a9 87       	std	Y+9, r26	; 0x09
    12d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	2c f4       	brge	.+10     	; 0x12fa <VoidControlledHomeRoom3+0x212>
		__ticks = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9e 83       	std	Y+6, r25	; 0x06
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <VoidControlledHomeRoom3+0x290>
	else if (__tmp > 65535)
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    130e:	18 16       	cp	r1, r24
    1310:	4c f5       	brge	.+82     	; 0x1364 <VoidControlledHomeRoom3+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	6b 85       	ldd	r22, Y+11	; 0x0b
    1314:	7c 85       	ldd	r23, Y+12	; 0x0c
    1316:	8d 85       	ldd	r24, Y+13	; 0x0d
    1318:	9e 85       	ldd	r25, Y+14	; 0x0e
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	0f c0       	rjmp	.+30     	; 0x135a <VoidControlledHomeRoom3+0x272>
    133c:	88 ec       	ldi	r24, 0xC8	; 200
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9c 83       	std	Y+4, r25	; 0x04
    1342:	8b 83       	std	Y+3, r24	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <VoidControlledHomeRoom3+0x260>
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	69 f7       	brne	.-38     	; 0x133c <VoidControlledHomeRoom3+0x254>
    1362:	14 c0       	rjmp	.+40     	; 0x138c <VoidControlledHomeRoom3+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <VoidControlledHomeRoom3+0x29c>
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1300);
			LCD_VoidClear();
    138c:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			if(Local_u16AnalogValue <= 2500)
    1390:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1392:	98 a1       	ldd	r25, Y+32	; 0x20
    1394:	29 e0       	ldi	r18, 0x09	; 9
    1396:	85 3c       	cpi	r24, 0xC5	; 197
    1398:	92 07       	cpc	r25, r18
    139a:	28 f4       	brcc	.+10     	; 0x13a6 <VoidControlledHomeRoom3+0x2be>
			{
				LCD_VoidSentSringAndNum("  It SunLight");
    139c:	8d e4       	ldi	r24, 0x4D	; 77
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    13a4:	94 c0       	rjmp	.+296    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
			}
			else if(Local_u16AnalogValue >= 3000)
    13a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a8:	98 a1       	ldd	r25, Y+32	; 0x20
    13aa:	2b e0       	ldi	r18, 0x0B	; 11
    13ac:	88 3b       	cpi	r24, 0xB8	; 184
    13ae:	92 07       	cpc	r25, r18
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <VoidControlledHomeRoom3+0x2cc>
    13b2:	8d c0       	rjmp	.+282    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
			{
				LCD_VoidSentSringAndNum("   It DarkNess");
    13b4:	8b e5       	ldi	r24, 0x5B	; 91
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    13bc:	88 c0       	rjmp	.+272    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
			}
		}
		/*                                  Check For User Turn Off LDR Sensor                                         */
		else if(Global_u8RecieveData == 'I')
    13be:	80 91 90 03 	lds	r24, 0x0390
    13c2:	89 34       	cpi	r24, 0x49	; 73
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <VoidControlledHomeRoom3+0x2ec>
		{
			/*                 Turn Off LDR Sensor               */
			LCD_VoidClear();
    13c6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("LDR Sensor Off");
    13ca:	8a e6       	ldi	r24, 0x6A	; 106
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    13d2:	94 ce       	rjmp	.-728    	; 0x10fc <VoidControlledHomeRoom3+0x14>
			goto sensor;
		}
		/*                                         Servo Motor Angles                                                  */

		/*                                  Check For User Press Button Of Angle 0 Degree                              */
		else if(Global_u8RecieveData == 'W')
    13d4:	80 91 90 03 	lds	r24, 0x0390
    13d8:	87 35       	cpi	r24, 0x57	; 87
    13da:	51 f4       	brne	.+20     	; 0x13f0 <VoidControlledHomeRoom3+0x308>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 0 Deg");
    13dc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    13e0:	89 e7       	ldi	r24, 0x79	; 121
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(0);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    13ee:	6f c0       	rjmp	.+222    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 20 Degree                             */
		else if(Global_u8RecieveData == 'w')
    13f0:	80 91 90 03 	lds	r24, 0x0390
    13f4:	87 37       	cpi	r24, 0x77	; 119
    13f6:	51 f4       	brne	.+20     	; 0x140c <VoidControlledHomeRoom3+0x324>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 20 Deg");
    13f8:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    13fc:	87 e8       	ldi	r24, 0x87	; 135
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(20);
    1404:	84 e1       	ldi	r24, 0x14	; 20
    1406:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    140a:	61 c0       	rjmp	.+194    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 40 Degree                             */
		else if(Global_u8RecieveData == 'R')
    140c:	80 91 90 03 	lds	r24, 0x0390
    1410:	82 35       	cpi	r24, 0x52	; 82
    1412:	51 f4       	brne	.+20     	; 0x1428 <VoidControlledHomeRoom3+0x340>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 40 Deg");
    1414:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1418:	86 e9       	ldi	r24, 0x96	; 150
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(40);
    1420:	88 e2       	ldi	r24, 0x28	; 40
    1422:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    1426:	53 c0       	rjmp	.+166    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 60 Degree                             */
		else if(Global_u8RecieveData == 'r')
    1428:	80 91 90 03 	lds	r24, 0x0390
    142c:	82 37       	cpi	r24, 0x72	; 114
    142e:	51 f4       	brne	.+20     	; 0x1444 <VoidControlledHomeRoom3+0x35c>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 60 Deg");
    1430:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1434:	85 ea       	ldi	r24, 0xA5	; 165
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(60);
    143c:	8c e3       	ldi	r24, 0x3C	; 60
    143e:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    1442:	45 c0       	rjmp	.+138    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 80 Degree                             */
		else if(Global_u8RecieveData == 'E')
    1444:	80 91 90 03 	lds	r24, 0x0390
    1448:	85 34       	cpi	r24, 0x45	; 69
    144a:	51 f4       	brne	.+20     	; 0x1460 <VoidControlledHomeRoom3+0x378>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 80 Deg");
    144c:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1450:	84 eb       	ldi	r24, 0xB4	; 180
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(80);
    1458:	80 e5       	ldi	r24, 0x50	; 80
    145a:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    145e:	37 c0       	rjmp	.+110    	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 90 Degree                             */
		else if(Global_u8RecieveData == 'e')
    1460:	80 91 90 03 	lds	r24, 0x0390
    1464:	85 36       	cpi	r24, 0x65	; 101
    1466:	51 f4       	brne	.+20     	; 0x147c <VoidControlledHomeRoom3+0x394>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 90 Deg");
    1468:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    146c:	83 ec       	ldi	r24, 0xC3	; 195
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(90);
    1474:	8a e5       	ldi	r24, 0x5A	; 90
    1476:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    147a:	29 c0       	rjmp	.+82     	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 120 Degree                            */
		else if(Global_u8RecieveData == 'H')
    147c:	80 91 90 03 	lds	r24, 0x0390
    1480:	88 34       	cpi	r24, 0x48	; 72
    1482:	51 f4       	brne	.+20     	; 0x1498 <VoidControlledHomeRoom3+0x3b0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 120 Deg");
    1484:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1488:	82 ed       	ldi	r24, 0xD2	; 210
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(120);
    1490:	88 e7       	ldi	r24, 0x78	; 120
    1492:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    1496:	1b c0       	rjmp	.+54     	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 150 Degree                            */
		else if(Global_u8RecieveData == 'Z')
    1498:	80 91 90 03 	lds	r24, 0x0390
    149c:	8a 35       	cpi	r24, 0x5A	; 90
    149e:	51 f4       	brne	.+20     	; 0x14b4 <VoidControlledHomeRoom3+0x3cc>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 150 Deg");
    14a0:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    14a4:	82 ee       	ldi	r24, 0xE2	; 226
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(150);
    14ac:	86 e9       	ldi	r24, 0x96	; 150
    14ae:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		}
		/*                                  Check For User Press Button Of Angle 180 Degree                            */
		else if(Global_u8RecieveData == 'z')
    14b4:	80 91 90 03 	lds	r24, 0x0390
    14b8:	8a 37       	cpi	r24, 0x7A	; 122
    14ba:	49 f4       	brne	.+18     	; 0x14ce <VoidControlledHomeRoom3+0x3e6>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("  Servo 180 Deg");
    14bc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    14c0:	82 ef       	ldi	r24, 0xF2	; 242
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidServoSetAngle(180);
    14c8:	84 eb       	ldi	r24, 0xB4	; 180
    14ca:	0e 94 88 25 	call	0x4b10	; 0x4b10 <VoidServoSetAngle>
		}
		/*                                   Check For User Press Button Of Return                                     */
		if(Global_u8RecieveData == '0')
    14ce:	80 91 90 03 	lds	r24, 0x0390
    14d2:	80 33       	cpi	r24, 0x30	; 48
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <VoidControlledHomeRoom3+0x3f0>
    14d6:	12 ce       	rjmp	.-988    	; 0x10fc <VoidControlledHomeRoom3+0x14>
		{
			LCD_VoidClear();
    14d8:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			break;
		}
	}
    14dc:	a2 96       	adiw	r28, 0x22	; 34
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <VoidControlledHomeRoom4>:

}
      /*                                         ROOM4                                                                    */
void VoidControlledHomeRoom4(void)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/*                               Check For Receive ASCII Code From Bluetooth                                    */
		UART_VoidRecieveDataByte(&Global_u8RecieveData);
    14f6:	80 e9       	ldi	r24, 0x90	; 144
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		/*                               Check For User Press Button Of StepperMotor ClockWise 45 Degree                */
		if(Global_u8RecieveData == 'v')
    14fe:	80 91 90 03 	lds	r24, 0x0390
    1502:	86 37       	cpi	r24, 0x76	; 118
    1504:	a1 f4       	brne	.+40     	; 0x152e <VoidControlledHomeRoom4+0x40>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1506:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 45 Deg");
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    151a:	82 e1       	ldi	r24, 0x12	; 18
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,45);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	6d e2       	ldi	r22, 0x2D	; 45
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    152c:	67 c1       	rjmp	.+718    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 90 Degree                */
		else if(Global_u8RecieveData == 'V')
    152e:	80 91 90 03 	lds	r24, 0x0390
    1532:	86 35       	cpi	r24, 0x56	; 86
    1534:	a1 f4       	brne	.+40     	; 0x155e <VoidControlledHomeRoom4+0x70>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1536:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 90 Deg");
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    154a:	82 e2       	ldi	r24, 0x22	; 34
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,90);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	6a e5       	ldi	r22, 0x5A	; 90
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    155c:	4f c1       	rjmp	.+670    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 135 Degree               */
		else if(Global_u8RecieveData == 'b')
    155e:	80 91 90 03 	lds	r24, 0x0390
    1562:	82 36       	cpi	r24, 0x62	; 98
    1564:	a1 f4       	brne	.+40     	; 0x158e <VoidControlledHomeRoom4+0xa0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1566:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 135 Deg");
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    157a:	82 e3       	ldi	r24, 0x32	; 50
    157c:	92 e0       	ldi	r25, 0x02	; 2
    157e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,135);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	67 e8       	ldi	r22, 0x87	; 135
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    158c:	37 c1       	rjmp	.+622    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 180 Degree               */
		else if(Global_u8RecieveData == 'B')
    158e:	80 91 90 03 	lds	r24, 0x0390
    1592:	82 34       	cpi	r24, 0x42	; 66
    1594:	a1 f4       	brne	.+40     	; 0x15be <VoidControlledHomeRoom4+0xd0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1596:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 180 Deg");
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    15aa:	83 e4       	ldi	r24, 0x43	; 67
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,180);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	64 eb       	ldi	r22, 0xB4	; 180
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    15bc:	1f c1       	rjmp	.+574    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 225 Degree               */
		else if(Global_u8RecieveData == 'n')
    15be:	80 91 90 03 	lds	r24, 0x0390
    15c2:	8e 36       	cpi	r24, 0x6E	; 110
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <VoidControlledHomeRoom4+0x100>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    15c6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 225 Deg");
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    15da:	84 e5       	ldi	r24, 0x54	; 84
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,225);
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	61 ee       	ldi	r22, 0xE1	; 225
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    15ec:	07 c1       	rjmp	.+526    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 270 Degree               */
		else if(Global_u8RecieveData == 'N')
    15ee:	80 91 90 03 	lds	r24, 0x0390
    15f2:	8e 34       	cpi	r24, 0x4E	; 78
    15f4:	a1 f4       	brne	.+40     	; 0x161e <VoidControlledHomeRoom4+0x130>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    15f6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 270 Deg");
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    160a:	85 e6       	ldi	r24, 0x65	; 101
    160c:	92 e0       	ldi	r25, 0x02	; 2
    160e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,270);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	6e e0       	ldi	r22, 0x0E	; 14
    1616:	71 e0       	ldi	r23, 0x01	; 1
    1618:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    161c:	ef c0       	rjmp	.+478    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 315 Degree               */
		else if(Global_u8RecieveData == 'k')
    161e:	80 91 90 03 	lds	r24, 0x0390
    1622:	8b 36       	cpi	r24, 0x6B	; 107
    1624:	a1 f4       	brne	.+40     	; 0x164e <VoidControlledHomeRoom4+0x160>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1626:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	92 e0       	ldi	r25, 0x02	; 2
    162e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 315 Deg");
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    163a:	86 e7       	ldi	r24, 0x76	; 118
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,315);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	6b e3       	ldi	r22, 0x3B	; 59
    1646:	71 e0       	ldi	r23, 0x01	; 1
    1648:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    164c:	d7 c0       	rjmp	.+430    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor ClockWise 360 Degree               */
		else if(Global_u8RecieveData == 'K')
    164e:	80 91 90 03 	lds	r24, 0x0390
    1652:	8b 34       	cpi	r24, 0x4B	; 75
    1654:	a1 f4       	brne	.+40     	; 0x167e <VoidControlledHomeRoom4+0x190>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor CW");
    1656:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 360 Deg");
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    166a:	87 e8       	ldi	r24, 0x87	; 135
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_ClockWise,360);
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	68 e6       	ldi	r22, 0x68	; 104
    1676:	71 e0       	ldi	r23, 0x01	; 1
    1678:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    167c:	bf c0       	rjmp	.+382    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 45 Degree         */
		else if(Global_u8RecieveData == 'o')
    167e:	80 91 90 03 	lds	r24, 0x0390
    1682:	8f 36       	cpi	r24, 0x6F	; 111
    1684:	a1 f4       	brne	.+40     	; 0x16ae <VoidControlledHomeRoom4+0x1c0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    1686:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    168a:	88 e9       	ldi	r24, 0x98	; 152
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 45 Deg");
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    169a:	82 e1       	ldi	r24, 0x12	; 18
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,45);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	6d e2       	ldi	r22, 0x2D	; 45
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    16ac:	a7 c0       	rjmp	.+334    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 90 Degree         */
		else if(Global_u8RecieveData == 'O')
    16ae:	80 91 90 03 	lds	r24, 0x0390
    16b2:	8f 34       	cpi	r24, 0x4F	; 79
    16b4:	a1 f4       	brne	.+40     	; 0x16de <VoidControlledHomeRoom4+0x1f0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    16b6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    16ba:	88 e9       	ldi	r24, 0x98	; 152
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 90 Deg");
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    16ca:	82 e2       	ldi	r24, 0x22	; 34
    16cc:	92 e0       	ldi	r25, 0x02	; 2
    16ce:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,90);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	6a e5       	ldi	r22, 0x5A	; 90
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    16dc:	8f c0       	rjmp	.+286    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 135 Degree        */
		else if(Global_u8RecieveData == 'p')
    16de:	80 91 90 03 	lds	r24, 0x0390
    16e2:	80 37       	cpi	r24, 0x70	; 112
    16e4:	a1 f4       	brne	.+40     	; 0x170e <VoidControlledHomeRoom4+0x220>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    16e6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    16ea:	88 e9       	ldi	r24, 0x98	; 152
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 135 Deg");
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    16fa:	82 e3       	ldi	r24, 0x32	; 50
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,135);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	67 e8       	ldi	r22, 0x87	; 135
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    170c:	77 c0       	rjmp	.+238    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 180 Degree        */
		else if(Global_u8RecieveData == 'P')
    170e:	80 91 90 03 	lds	r24, 0x0390
    1712:	80 35       	cpi	r24, 0x50	; 80
    1714:	a1 f4       	brne	.+40     	; 0x173e <VoidControlledHomeRoom4+0x250>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    1716:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    171a:	88 e9       	ldi	r24, 0x98	; 152
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 180 Deg");
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    172a:	83 e4       	ldi	r24, 0x43	; 67
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,180);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	64 eb       	ldi	r22, 0xB4	; 180
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    173c:	5f c0       	rjmp	.+190    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 225 Degree        */
		else if(Global_u8RecieveData == 'f')
    173e:	80 91 90 03 	lds	r24, 0x0390
    1742:	86 36       	cpi	r24, 0x66	; 102
    1744:	a1 f4       	brne	.+40     	; 0x176e <VoidControlledHomeRoom4+0x280>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    1746:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    174a:	88 e9       	ldi	r24, 0x98	; 152
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 225 Deg");
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    175a:	84 e5       	ldi	r24, 0x54	; 84
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,225);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	61 ee       	ldi	r22, 0xE1	; 225
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    176c:	47 c0       	rjmp	.+142    	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 270 Degree        */
		else if(Global_u8RecieveData == 'F')
    176e:	80 91 90 03 	lds	r24, 0x0390
    1772:	86 34       	cpi	r24, 0x46	; 70
    1774:	a1 f4       	brne	.+40     	; 0x179e <VoidControlledHomeRoom4+0x2b0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    1776:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    177a:	88 e9       	ldi	r24, 0x98	; 152
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 270 Deg");
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    178a:	85 e6       	ldi	r24, 0x65	; 101
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,270);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	6e e0       	ldi	r22, 0x0E	; 14
    1796:	71 e0       	ldi	r23, 0x01	; 1
    1798:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    179c:	2f c0       	rjmp	.+94     	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 315 Degree        */
		else if(Global_u8RecieveData == 'w')
    179e:	80 91 90 03 	lds	r24, 0x0390
    17a2:	87 37       	cpi	r24, 0x77	; 119
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <VoidControlledHomeRoom4+0x2e0>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    17a6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    17aa:	88 e9       	ldi	r24, 0x98	; 152
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 315 Deg");
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    17ba:	86 e7       	ldi	r24, 0x76	; 118
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,315);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	6b e3       	ldi	r22, 0x3B	; 59
    17c6:	71 e0       	ldi	r23, 0x01	; 1
    17c8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
    17cc:	17 c0       	rjmp	.+46     	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		}
		/*                               Check For User Press Button Of StepperMotor Anti - ClockWise 360 Degree        */
		else if(Global_u8RecieveData == 'W')
    17ce:	80 91 90 03 	lds	r24, 0x0390
    17d2:	87 35       	cpi	r24, 0x57	; 87
    17d4:	99 f4       	brne	.+38     	; 0x17fc <VoidControlledHomeRoom4+0x30e>
		{
			LCD_VoidClear();LCD_VoidSentSringAndNum("StepperMotor ACW");
    17d6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    17da:	88 e9       	ldi	r24, 0x98	; 152
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("Rolling: 360 Deg");
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    17ea:	87 e8       	ldi	r24, 0x87	; 135
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			Step_VoidSetAngle(StepperMotor_u8_AntiClockWise,360);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	68 e6       	ldi	r22, 0x68	; 104
    17f6:	71 e0       	ldi	r23, 0x01	; 1
    17f8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <Step_VoidSetAngle>
		}
		/*                               Check For User Press Button Of Return                                          */
		if(Global_u8RecieveData == '0')
    17fc:	80 91 90 03 	lds	r24, 0x0390
    1800:	80 33       	cpi	r24, 0x30	; 48
    1802:	09 f0       	breq	.+2      	; 0x1806 <VoidControlledHomeRoom4+0x318>
    1804:	78 ce       	rjmp	.-784    	; 0x14f6 <VoidControlledHomeRoom4+0x8>
		{
			LCD_VoidClear();
    1806:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			break;
		}
	}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <VoidControlledHomeLoginSystem>:
}
   /*                                                  Login System                                                     */
void VoidControlledHomeLoginSystem(void)
{
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ce 59       	subi	r28, 0x9E	; 158
    181e:	d0 40       	sbci	r29, 0x00	; 0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iteration = 1 ;
    182a:	fe 01       	movw	r30, r28
    182c:	e4 56       	subi	r30, 0x64	; 100
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24
	u8 Local_u8Counter;
	while(1)
	{
		/*                               Check For Receive ASCII Code From Bluetooth                                    */
		LOOP: UART_VoidRecieveDataByte(&Global_u8RecieveData);
    1834:	80 e9       	ldi	r24, 0x90	; 144
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		/*                               Check For User Is Enter Correct Username And Correct Password                  */
		if(Global_u8RecieveData == 'C')
    183c:	80 91 90 03 	lds	r24, 0x0390
    1840:	83 34       	cpi	r24, 0x43	; 67
    1842:	09 f0       	breq	.+2      	; 0x1846 <VoidControlledHomeLoginSystem+0x36>
    1844:	d7 c0       	rjmp	.+430    	; 0x19f4 <VoidControlledHomeLoginSystem+0x1e4>
		{
			/* Turn Of Red Led */
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_LOW);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	66 e0       	ldi	r22, 0x06	; 6
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			/* Turn On Green Led */
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN7,DIO_U8_HIGH);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	67 e0       	ldi	r22, 0x07	; 7
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			LCD_VoidClear();LCD_VoidSentSringAndNum("Correct Password");
    185a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    185e:	89 ea       	ldi	r24, 0xA9	; 169
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1866:	fe 01       	movw	r30, r28
    1868:	e9 56       	subi	r30, 0x69	; 105
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e8       	ldi	r25, 0x80	; 128
    1870:	ab eb       	ldi	r26, 0xBB	; 187
    1872:	b4 e4       	ldi	r27, 0x44	; 68
    1874:	80 83       	st	Z, r24
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	a2 83       	std	Z+2, r26	; 0x02
    187a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	8e 01       	movw	r16, r28
    187e:	0d 56       	subi	r16, 0x6D	; 109
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e9 56       	subi	r30, 0x69	; 105
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a ef       	ldi	r20, 0xFA	; 250
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	f8 01       	movw	r30, r16
    18a2:	80 83       	st	Z, r24
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	a2 83       	std	Z+2, r26	; 0x02
    18a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 56       	subi	r30, 0x6D	; 109
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	44 f4       	brge	.+16     	; 0x18d8 <VoidControlledHomeLoginSystem+0xc8>
		__ticks = 1;
    18c8:	fe 01       	movw	r30, r28
    18ca:	ef 56       	subi	r30, 0x6F	; 111
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	64 c0       	rjmp	.+200    	; 0x19a0 <VoidControlledHomeLoginSystem+0x190>
	else if (__tmp > 65535)
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 56       	subi	r30, 0x6D	; 109
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <VoidControlledHomeLoginSystem+0xe8>
    18f6:	43 c0       	rjmp	.+134    	; 0x197e <VoidControlledHomeLoginSystem+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	fe 01       	movw	r30, r28
    18fa:	e9 56       	subi	r30, 0x69	; 105
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8e 01       	movw	r16, r28
    1918:	0f 56       	subi	r16, 0x6F	; 111
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	f8 01       	movw	r30, r16
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	1f c0       	rjmp	.+62     	; 0x196e <VoidControlledHomeLoginSystem+0x15e>
    1930:	fe 01       	movw	r30, r28
    1932:	e1 57       	subi	r30, 0x71	; 113
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
    193e:	fe 01       	movw	r30, r28
    1940:	e1 57       	subi	r30, 0x71	; 113
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <VoidControlledHomeLoginSystem+0x138>
    194c:	fe 01       	movw	r30, r28
    194e:	e1 57       	subi	r30, 0x71	; 113
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	de 01       	movw	r26, r28
    1958:	af 56       	subi	r26, 0x6F	; 111
    195a:	bf 4f       	sbci	r27, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	ef 56       	subi	r30, 0x6F	; 111
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	fe 01       	movw	r30, r28
    1970:	ef 56       	subi	r30, 0x6F	; 111
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	d1 f6       	brne	.-76     	; 0x1930 <VoidControlledHomeLoginSystem+0x120>
    197c:	27 c0       	rjmp	.+78     	; 0x19cc <VoidControlledHomeLoginSystem+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	8e 01       	movw	r16, r28
    1980:	0f 56       	subi	r16, 0x6F	; 111
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	ed 56       	subi	r30, 0x6D	; 109
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
    19a0:	de 01       	movw	r26, r28
    19a2:	a3 57       	subi	r26, 0x73	; 115
    19a4:	bf 4f       	sbci	r27, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	ef 56       	subi	r30, 0x6F	; 111
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	8d 93       	st	X+, r24
    19b2:	9c 93       	st	X, r25
    19b4:	fe 01       	movw	r30, r28
    19b6:	e3 57       	subi	r30, 0x73	; 115
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <VoidControlledHomeLoginSystem+0x1ae>
    19c2:	fe 01       	movw	r30, r28
    19c4:	e3 57       	subi	r30, 0x73	; 115
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
			_delay_ms(1500);LCD_VoidClear();
    19cc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("    Welcome ");LCD_u8GoToLine(2,0);LCD_VoidSentSringAndNum("   Smart Home");
    19d0:	8a eb       	ldi	r24, 0xBA	; 186
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
    19e0:	87 ec       	ldi	r24, 0xC7	; 199
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			/* Turn Off Green Led */
			DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN7,DIO_U8_LOW);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	67 e0       	ldi	r22, 0x07	; 7
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    19f2:	35 c7       	rjmp	.+3690   	; 0x285e <VoidControlledHomeLoginSystem+0x104e>
			break;
		}
		/*                               Check For User Is Enter Wrong Username Or Wrong Password                      */
		else if(Global_u8RecieveData == 'R')
    19f4:	80 91 90 03 	lds	r24, 0x0390
    19f8:	82 35       	cpi	r24, 0x52	; 82
    19fa:	09 f0       	breq	.+2      	; 0x19fe <VoidControlledHomeLoginSystem+0x1ee>
    19fc:	1b cf       	rjmp	.-458    	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
		{
			switch(Local_u8Iteration)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e4 56       	subi	r30, 0x64	; 100
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	c3 56       	subi	r28, 0x63	; 99
    1a0c:	df 4f       	sbci	r29, 0xFF	; 255
    1a0e:	39 83       	std	Y+1, r19	; 0x01
    1a10:	28 83       	st	Y, r18
    1a12:	cd 59       	subi	r28, 0x9D	; 157
    1a14:	d0 40       	sbci	r29, 0x00	; 0
    1a16:	c3 56       	subi	r28, 0x63	; 99
    1a18:	df 4f       	sbci	r29, 0xFF	; 255
    1a1a:	88 81       	ld	r24, Y
    1a1c:	99 81       	ldd	r25, Y+1	; 0x01
    1a1e:	cd 59       	subi	r28, 0x9D	; 157
    1a20:	d0 40       	sbci	r29, 0x00	; 0
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	91 05       	cpc	r25, r1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <VoidControlledHomeLoginSystem+0x21a>
    1a28:	e1 c1       	rjmp	.+962    	; 0x1dec <VoidControlledHomeLoginSystem+0x5dc>
    1a2a:	c3 56       	subi	r28, 0x63	; 99
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	e8 81       	ld	r30, Y
    1a30:	f9 81       	ldd	r31, Y+1	; 0x01
    1a32:	cd 59       	subi	r28, 0x9D	; 157
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	e4 30       	cpi	r30, 0x04	; 4
    1a38:	f1 05       	cpc	r31, r1
    1a3a:	a4 f4       	brge	.+40     	; 0x1a64 <VoidControlledHomeLoginSystem+0x254>
    1a3c:	c3 56       	subi	r28, 0x63	; 99
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
    1a40:	28 81       	ld	r18, Y
    1a42:	39 81       	ldd	r19, Y+1	; 0x01
    1a44:	cd 59       	subi	r28, 0x9D	; 157
    1a46:	d0 40       	sbci	r29, 0x00	; 0
    1a48:	21 30       	cpi	r18, 0x01	; 1
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	51 f1       	breq	.+84     	; 0x1aa2 <VoidControlledHomeLoginSystem+0x292>
    1a4e:	c3 56       	subi	r28, 0x63	; 99
    1a50:	df 4f       	sbci	r29, 0xFF	; 255
    1a52:	88 81       	ld	r24, Y
    1a54:	99 81       	ldd	r25, Y+1	; 0x01
    1a56:	cd 59       	subi	r28, 0x9D	; 157
    1a58:	d0 40       	sbci	r29, 0x00	; 0
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <VoidControlledHomeLoginSystem+0x252>
    1a60:	f4 c0       	rjmp	.+488    	; 0x1c4a <VoidControlledHomeLoginSystem+0x43a>
    1a62:	fd c6       	rjmp	.+3578   	; 0x285e <VoidControlledHomeLoginSystem+0x104e>
    1a64:	c3 56       	subi	r28, 0x63	; 99
    1a66:	df 4f       	sbci	r29, 0xFF	; 255
    1a68:	e8 81       	ld	r30, Y
    1a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a6c:	cd 59       	subi	r28, 0x9D	; 157
    1a6e:	d0 40       	sbci	r29, 0x00	; 0
    1a70:	e5 30       	cpi	r30, 0x05	; 5
    1a72:	f1 05       	cpc	r31, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <VoidControlledHomeLoginSystem+0x268>
    1a76:	ca c4       	rjmp	.+2452   	; 0x240c <VoidControlledHomeLoginSystem+0xbfc>
    1a78:	c3 56       	subi	r28, 0x63	; 99
    1a7a:	df 4f       	sbci	r29, 0xFF	; 255
    1a7c:	28 81       	ld	r18, Y
    1a7e:	39 81       	ldd	r19, Y+1	; 0x01
    1a80:	cd 59       	subi	r28, 0x9D	; 157
    1a82:	d0 40       	sbci	r29, 0x00	; 0
    1a84:	25 30       	cpi	r18, 0x05	; 5
    1a86:	31 05       	cpc	r19, r1
    1a88:	0c f4       	brge	.+2      	; 0x1a8c <VoidControlledHomeLoginSystem+0x27c>
    1a8a:	81 c2       	rjmp	.+1282   	; 0x1f8e <VoidControlledHomeLoginSystem+0x77e>
    1a8c:	c3 56       	subi	r28, 0x63	; 99
    1a8e:	df 4f       	sbci	r29, 0xFF	; 255
    1a90:	88 81       	ld	r24, Y
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	cd 59       	subi	r28, 0x9D	; 157
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	86 30       	cpi	r24, 0x06	; 6
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <VoidControlledHomeLoginSystem+0x290>
    1a9e:	60 c6       	rjmp	.+3264   	; 0x2760 <VoidControlledHomeLoginSystem+0xf50>
    1aa0:	de c6       	rjmp	.+3516   	; 0x285e <VoidControlledHomeLoginSystem+0x104e>
			{
			/*                               User Enter Wrong Username Or Password For First Enter                     */
				case 1 :LCD_VoidSentSringAndNum("Wrong  PassWord");
    1aa2:	85 ed       	ldi	r24, 0xD5	; 213
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
						LCD_u8GoToLine(2,0);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
						LCD_VoidSentSringAndNum("Or     User");
    1ab2:	85 ee       	ldi	r24, 0xE5	; 229
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1aba:	fe 01       	movw	r30, r28
    1abc:	e7 57       	subi	r30, 0x77	; 119
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e8       	ldi	r25, 0x80	; 128
    1ac4:	ab eb       	ldi	r26, 0xBB	; 187
    1ac6:	b4 e4       	ldi	r27, 0x44	; 68
    1ac8:	80 83       	st	Z, r24
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	a2 83       	std	Z+2, r26	; 0x02
    1ace:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	8e 01       	movw	r16, r28
    1ad2:	0b 57       	subi	r16, 0x7B	; 123
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e7 57       	subi	r30, 0x77	; 119
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	80 83       	st	Z, r24
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	a2 83       	std	Z+2, r26	; 0x02
    1afc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1afe:	fe 01       	movw	r30, r28
    1b00:	eb 57       	subi	r30, 0x7B	; 123
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	44 f4       	brge	.+16     	; 0x1b2c <VoidControlledHomeLoginSystem+0x31c>
		__ticks = 1;
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ed 57       	subi	r30, 0x7D	; 125
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	64 c0       	rjmp	.+200    	; 0x1bf4 <VoidControlledHomeLoginSystem+0x3e4>
	else if (__tmp > 65535)
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	eb 57       	subi	r30, 0x7B	; 123
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	0c f0       	brlt	.+2      	; 0x1b4c <VoidControlledHomeLoginSystem+0x33c>
    1b4a:	43 c0       	rjmp	.+134    	; 0x1bd2 <VoidControlledHomeLoginSystem+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e7 57       	subi	r30, 0x77	; 119
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	0d 57       	subi	r16, 0x7D	; 125
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	1f c0       	rjmp	.+62     	; 0x1bc2 <VoidControlledHomeLoginSystem+0x3b2>
    1b84:	fe 01       	movw	r30, r28
    1b86:	ef 57       	subi	r30, 0x7F	; 127
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
    1b92:	fe 01       	movw	r30, r28
    1b94:	ef 57       	subi	r30, 0x7F	; 127
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <VoidControlledHomeLoginSystem+0x38c>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ef 57       	subi	r30, 0x7F	; 127
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	de 01       	movw	r26, r28
    1bac:	ad 57       	subi	r26, 0x7D	; 125
    1bae:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	ed 57       	subi	r30, 0x7D	; 125
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	11 96       	adiw	r26, 0x01	; 1
    1bbe:	9c 93       	st	X, r25
    1bc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ed 57       	subi	r30, 0x7D	; 125
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	d1 f6       	brne	.-76     	; 0x1b84 <VoidControlledHomeLoginSystem+0x374>
    1bd0:	27 c0       	rjmp	.+78     	; 0x1c20 <VoidControlledHomeLoginSystem+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0d 57       	subi	r16, 0x7D	; 125
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	eb 57       	subi	r30, 0x7B	; 123
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	f8 01       	movw	r30, r16
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	de 01       	movw	r26, r28
    1bf6:	a1 58       	subi	r26, 0x81	; 129
    1bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ed 57       	subi	r30, 0x7D	; 125
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	8d 93       	st	X+, r24
    1c06:	9c 93       	st	X, r25
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e1 58       	subi	r30, 0x81	; 129
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <VoidControlledHomeLoginSystem+0x402>
    1c16:	fe 01       	movw	r30, r28
    1c18:	e1 58       	subi	r30, 0x81	; 129
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
						_delay_ms(1500);
						LCD_VoidClear();
    1c20:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						LCD_VoidSentSringAndNum("Pls Login Again");
    1c24:	81 ef       	ldi	r24, 0xF1	; 241
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	66 e0       	ldi	r22, 0x06	; 6
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						Local_u8Iteration++;
    1c36:	de 01       	movw	r26, r28
    1c38:	a4 56       	subi	r26, 0x64	; 100
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e4 56       	subi	r30, 0x64	; 100
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	8c 93       	st	X, r24
    1c48:	f5 cd       	rjmp	.-1046   	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
						goto LOOP;
			/*                               User Enter Wrong Username Or Password For Second Enter                    */
				case 2 :LCD_VoidClear();LCD_VoidSentSringAndNum("Wrong  PassWord");
    1c4a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1c4e:	85 ed       	ldi	r24, 0xD5	; 213
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
						LCD_u8GoToLine(2,0);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
						LCD_VoidSentSringAndNum("Or     User");
    1c5e:	85 ee       	ldi	r24, 0xE5	; 229
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e5 58       	subi	r30, 0x85	; 133
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e8       	ldi	r25, 0x80	; 128
    1c70:	ab eb       	ldi	r26, 0xBB	; 187
    1c72:	b4 e4       	ldi	r27, 0x44	; 68
    1c74:	80 83       	st	Z, r24
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	a2 83       	std	Z+2, r26	; 0x02
    1c7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	09 58       	subi	r16, 0x89	; 137
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	fe 01       	movw	r30, r28
    1c84:	e5 58       	subi	r30, 0x85	; 133
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	80 83       	st	Z, r24
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	a2 83       	std	Z+2, r26	; 0x02
    1ca8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1caa:	fe 01       	movw	r30, r28
    1cac:	e9 58       	subi	r30, 0x89	; 137
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	44 f4       	brge	.+16     	; 0x1cd8 <VoidControlledHomeLoginSystem+0x4c8>
		__ticks = 1;
    1cc8:	fe 01       	movw	r30, r28
    1cca:	eb 58       	subi	r30, 0x8B	; 139
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	64 c0       	rjmp	.+200    	; 0x1da0 <VoidControlledHomeLoginSystem+0x590>
	else if (__tmp > 65535)
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e9 58       	subi	r30, 0x89	; 137
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	0c f0       	brlt	.+2      	; 0x1cf8 <VoidControlledHomeLoginSystem+0x4e8>
    1cf6:	43 c0       	rjmp	.+134    	; 0x1d7e <VoidControlledHomeLoginSystem+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e5 58       	subi	r30, 0x85	; 133
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8e 01       	movw	r16, r28
    1d18:	0b 58       	subi	r16, 0x8B	; 139
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	f8 01       	movw	r30, r16
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	1f c0       	rjmp	.+62     	; 0x1d6e <VoidControlledHomeLoginSystem+0x55e>
    1d30:	fe 01       	movw	r30, r28
    1d32:	ed 58       	subi	r30, 0x8D	; 141
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 58       	subi	r30, 0x8D	; 141
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <VoidControlledHomeLoginSystem+0x538>
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ed 58       	subi	r30, 0x8D	; 141
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	de 01       	movw	r26, r28
    1d58:	ab 58       	subi	r26, 0x8B	; 139
    1d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	eb 58       	subi	r30, 0x8B	; 139
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	11 96       	adiw	r26, 0x01	; 1
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	fe 01       	movw	r30, r28
    1d70:	eb 58       	subi	r30, 0x8B	; 139
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	d1 f6       	brne	.-76     	; 0x1d30 <VoidControlledHomeLoginSystem+0x520>
    1d7c:	27 c0       	rjmp	.+78     	; 0x1dcc <VoidControlledHomeLoginSystem+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	8e 01       	movw	r16, r28
    1d80:	0b 58       	subi	r16, 0x8B	; 139
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	fe 01       	movw	r30, r28
    1d86:	e9 58       	subi	r30, 0x89	; 137
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	de 01       	movw	r26, r28
    1da2:	af 58       	subi	r26, 0x8F	; 143
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	eb 58       	subi	r30, 0x8B	; 139
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	8d 93       	st	X+, r24
    1db2:	9c 93       	st	X, r25
    1db4:	fe 01       	movw	r30, r28
    1db6:	ef 58       	subi	r30, 0x8F	; 143
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <VoidControlledHomeLoginSystem+0x5ae>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ef 58       	subi	r30, 0x8F	; 143
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
						_delay_ms(1500);
						LCD_VoidClear();
    1dcc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						LCD_VoidSentSringAndNum("Pls Login Again");
    1dd0:	81 ef       	ldi	r24, 0xF1	; 241
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
						Local_u8Iteration++;
    1dd8:	de 01       	movw	r26, r28
    1dda:	a4 56       	subi	r26, 0x64	; 100
    1ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e4 56       	subi	r30, 0x64	; 100
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	8c 93       	st	X, r24
    1dea:	24 cd       	rjmp	.-1464   	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
						goto LOOP;
			/*                               User Enter Wrong Username Or Password For Third Enter                    */
				case 3 :LCD_VoidClear();LCD_VoidSentSringAndNum("Wrong  PassWord");
    1dec:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1df0:	85 ed       	ldi	r24, 0xD5	; 213
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
						LCD_u8GoToLine(2,0);
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
						LCD_VoidSentSringAndNum("Or     User");
    1e00:	85 ee       	ldi	r24, 0xE5	; 229
    1e02:	92 e0       	ldi	r25, 0x02	; 2
    1e04:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e3 59       	subi	r30, 0x93	; 147
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e8       	ldi	r25, 0x80	; 128
    1e12:	ab eb       	ldi	r26, 0xBB	; 187
    1e14:	b4 e4       	ldi	r27, 0x44	; 68
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	8e 01       	movw	r16, r28
    1e20:	07 59       	subi	r16, 0x97	; 151
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	fe 01       	movw	r30, r28
    1e26:	e3 59       	subi	r30, 0x93	; 147
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	a2 83       	std	Z+2, r26	; 0x02
    1e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e7 59       	subi	r30, 0x97	; 151
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	44 f4       	brge	.+16     	; 0x1e7a <VoidControlledHomeLoginSystem+0x66a>
		__ticks = 1;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e9 59       	subi	r30, 0x99	; 153
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	64 c0       	rjmp	.+200    	; 0x1f42 <VoidControlledHomeLoginSystem+0x732>
	else if (__tmp > 65535)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 59       	subi	r30, 0x97	; 151
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <VoidControlledHomeLoginSystem+0x68a>
    1e98:	43 c0       	rjmp	.+134    	; 0x1f20 <VoidControlledHomeLoginSystem+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e3 59       	subi	r30, 0x93	; 147
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8e 01       	movw	r16, r28
    1eba:	09 59       	subi	r16, 0x99	; 153
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	1f c0       	rjmp	.+62     	; 0x1f10 <VoidControlledHomeLoginSystem+0x700>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	eb 59       	subi	r30, 0x9B	; 155
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	eb 59       	subi	r30, 0x9B	; 155
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <VoidControlledHomeLoginSystem+0x6da>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	eb 59       	subi	r30, 0x9B	; 155
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	de 01       	movw	r26, r28
    1efa:	a9 59       	subi	r26, 0x99	; 153
    1efc:	bf 4f       	sbci	r27, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e9 59       	subi	r30, 0x99	; 153
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e9 59       	subi	r30, 0x99	; 153
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	d1 f6       	brne	.-76     	; 0x1ed2 <VoidControlledHomeLoginSystem+0x6c2>
    1f1e:	27 c0       	rjmp	.+78     	; 0x1f6e <VoidControlledHomeLoginSystem+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	8e 01       	movw	r16, r28
    1f22:	09 59       	subi	r16, 0x99	; 153
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e7 59       	subi	r30, 0x97	; 151
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	de 01       	movw	r26, r28
    1f44:	ad 59       	subi	r26, 0x9D	; 157
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e9 59       	subi	r30, 0x99	; 153
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	8d 93       	st	X+, r24
    1f54:	9c 93       	st	X, r25
    1f56:	fe 01       	movw	r30, r28
    1f58:	ed 59       	subi	r30, 0x9D	; 157
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <VoidControlledHomeLoginSystem+0x750>
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 59       	subi	r30, 0x9D	; 157
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
						_delay_ms(1500);
						LCD_VoidClear();
    1f6e:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						Local_u8Iteration++;
    1f72:	de 01       	movw	r26, r28
    1f74:	a4 56       	subi	r26, 0x64	; 100
    1f76:	bf 4f       	sbci	r27, 0xFF	; 255
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e4 56       	subi	r30, 0x64	; 100
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	8c 93       	st	X, r24
						LCD_VoidSentSringAndNum("Pls Login Again");
    1f84:	81 ef       	ldi	r24, 0xF1	; 241
    1f86:	92 e0       	ldi	r25, 0x02	; 2
    1f88:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1f8c:	53 cc       	rjmp	.-1882   	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
						goto LOOP;
			/*                               User Enter Wrong Username Or Password For Fourth Enter                   */

			/*                                                  Enter Block Mode                                      */
				case 4 :LCD_VoidClear();LCD_VoidSentSringAndNum("Block Mode");
    1f8e:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e1 5a       	subi	r30, 0xA1	; 161
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e8       	ldi	r25, 0x80	; 128
    1fa4:	ab eb       	ldi	r26, 0xBB	; 187
    1fa6:	b4 e4       	ldi	r27, 0x44	; 68
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	a2 83       	std	Z+2, r26	; 0x02
    1fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	05 5a       	subi	r16, 0xA5	; 165
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e1 5a       	subi	r30, 0xA1	; 161
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	a2 83       	std	Z+2, r26	; 0x02
    1fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e5 5a       	subi	r30, 0xA5	; 165
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	60 81       	ld	r22, Z
    1fe6:	71 81       	ldd	r23, Z+1	; 0x01
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	44 f4       	brge	.+16     	; 0x200c <VoidControlledHomeLoginSystem+0x7fc>
		__ticks = 1;
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e7 5a       	subi	r30, 0xA7	; 167
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	64 c0       	rjmp	.+200    	; 0x20d4 <VoidControlledHomeLoginSystem+0x8c4>
	else if (__tmp > 65535)
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5a       	subi	r30, 0xA5	; 165
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	0c f0       	brlt	.+2      	; 0x202c <VoidControlledHomeLoginSystem+0x81c>
    202a:	43 c0       	rjmp	.+134    	; 0x20b2 <VoidControlledHomeLoginSystem+0x8a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	fe 01       	movw	r30, r28
    202e:	e1 5a       	subi	r30, 0xA1	; 161
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8e 01       	movw	r16, r28
    204c:	07 5a       	subi	r16, 0xA7	; 167
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	f8 01       	movw	r30, r16
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	1f c0       	rjmp	.+62     	; 0x20a2 <VoidControlledHomeLoginSystem+0x892>
    2064:	fe 01       	movw	r30, r28
    2066:	e9 5a       	subi	r30, 0xA9	; 169
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	88 ec       	ldi	r24, 0xC8	; 200
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    2072:	fe 01       	movw	r30, r28
    2074:	e9 5a       	subi	r30, 0xA9	; 169
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <VoidControlledHomeLoginSystem+0x86c>
    2080:	fe 01       	movw	r30, r28
    2082:	e9 5a       	subi	r30, 0xA9	; 169
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	de 01       	movw	r26, r28
    208c:	a7 5a       	subi	r26, 0xA7	; 167
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5a       	subi	r30, 0xA7	; 167
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	9c 93       	st	X, r25
    20a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	fe 01       	movw	r30, r28
    20a4:	e7 5a       	subi	r30, 0xA7	; 167
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	d1 f6       	brne	.-76     	; 0x2064 <VoidControlledHomeLoginSystem+0x854>
    20b0:	27 c0       	rjmp	.+78     	; 0x2100 <VoidControlledHomeLoginSystem+0x8f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	8e 01       	movw	r16, r28
    20b4:	07 5a       	subi	r16, 0xA7	; 167
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	fe 01       	movw	r30, r28
    20ba:	e5 5a       	subi	r30, 0xA5	; 165
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	f8 01       	movw	r30, r16
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    20d4:	de 01       	movw	r26, r28
    20d6:	ab 5a       	subi	r26, 0xAB	; 171
    20d8:	bf 4f       	sbci	r27, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 5a       	subi	r30, 0xA7	; 167
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	8d 93       	st	X+, r24
    20e6:	9c 93       	st	X, r25
    20e8:	fe 01       	movw	r30, r28
    20ea:	eb 5a       	subi	r30, 0xAB	; 171
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <VoidControlledHomeLoginSystem+0x8e2>
    20f6:	fe 01       	movw	r30, r28
    20f8:	eb 5a       	subi	r30, 0xAB	; 171
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
						_delay_ms(1500);
						LCD_VoidClear();
    2100:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						Local_u8Iteration++;
    2104:	de 01       	movw	r26, r28
    2106:	a4 56       	subi	r26, 0x64	; 100
    2108:	bf 4f       	sbci	r27, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	e4 56       	subi	r30, 0x64	; 100
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	8c 93       	st	X, r24
						LCD_VoidSentSringAndNum("Pls Wait For 10 Sec");
    2116:	8c e0       	ldi	r24, 0x0C	; 12
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    211e:	fe 01       	movw	r30, r28
    2120:	ef 5a       	subi	r30, 0xAF	; 175
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	aa e7       	ldi	r26, 0x7A	; 122
    212a:	b4 e4       	ldi	r27, 0x44	; 68
    212c:	80 83       	st	Z, r24
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	a2 83       	std	Z+2, r26	; 0x02
    2132:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	8e 01       	movw	r16, r28
    2136:	03 5b       	subi	r16, 0xB3	; 179
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	ef 5a       	subi	r30, 0xAF	; 175
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a ef       	ldi	r20, 0xFA	; 250
    214e:	54 e4       	ldi	r21, 0x44	; 68
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	f8 01       	movw	r30, r16
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	a2 83       	std	Z+2, r26	; 0x02
    2160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2162:	fe 01       	movw	r30, r28
    2164:	e3 5b       	subi	r30, 0xB3	; 179
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	44 f4       	brge	.+16     	; 0x2190 <VoidControlledHomeLoginSystem+0x980>
		__ticks = 1;
    2180:	fe 01       	movw	r30, r28
    2182:	e5 5b       	subi	r30, 0xB5	; 181
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	64 c0       	rjmp	.+200    	; 0x2258 <VoidControlledHomeLoginSystem+0xa48>
	else if (__tmp > 65535)
    2190:	fe 01       	movw	r30, r28
    2192:	e3 5b       	subi	r30, 0xB3	; 179
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	0c f0       	brlt	.+2      	; 0x21b0 <VoidControlledHomeLoginSystem+0x9a0>
    21ae:	43 c0       	rjmp	.+134    	; 0x2236 <VoidControlledHomeLoginSystem+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	fe 01       	movw	r30, r28
    21b2:	ef 5a       	subi	r30, 0xAF	; 175
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8e 01       	movw	r16, r28
    21d0:	05 5b       	subi	r16, 0xB5	; 181
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	f8 01       	movw	r30, r16
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
    21e6:	1f c0       	rjmp	.+62     	; 0x2226 <VoidControlledHomeLoginSystem+0xa16>
    21e8:	fe 01       	movw	r30, r28
    21ea:	e7 5b       	subi	r30, 0xB7	; 183
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	fe 01       	movw	r30, r28
    21f8:	e7 5b       	subi	r30, 0xB7	; 183
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <VoidControlledHomeLoginSystem+0x9f0>
    2204:	fe 01       	movw	r30, r28
    2206:	e7 5b       	subi	r30, 0xB7	; 183
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	de 01       	movw	r26, r28
    2210:	a5 5b       	subi	r26, 0xB5	; 181
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e5 5b       	subi	r30, 0xB5	; 181
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 93       	st	X, r25
    2224:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	fe 01       	movw	r30, r28
    2228:	e5 5b       	subi	r30, 0xB5	; 181
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	d1 f6       	brne	.-76     	; 0x21e8 <VoidControlledHomeLoginSystem+0x9d8>
    2234:	27 c0       	rjmp	.+78     	; 0x2284 <VoidControlledHomeLoginSystem+0xa74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	8e 01       	movw	r16, r28
    2238:	05 5b       	subi	r16, 0xB5	; 181
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e3 5b       	subi	r30, 0xB3	; 179
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	de 01       	movw	r26, r28
    225a:	a9 5b       	subi	r26, 0xB9	; 185
    225c:	bf 4f       	sbci	r27, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	e5 5b       	subi	r30, 0xB5	; 181
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	8d 93       	st	X+, r24
    226a:	9c 93       	st	X, r25
    226c:	fe 01       	movw	r30, r28
    226e:	e9 5b       	subi	r30, 0xB9	; 185
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <VoidControlledHomeLoginSystem+0xa66>
    227a:	fe 01       	movw	r30, r28
    227c:	e9 5b       	subi	r30, 0xB9	; 185
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_VoidClear();
    2284:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						/* Turn On Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	66 e0       	ldi	r22, 0x06	; 6
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						for(Local_u8Counter = 1;Local_u8Counter <= 10; Local_u8Counter++)
    2292:	fe 01       	movw	r30, r28
    2294:	e5 56       	subi	r30, 0x65	; 101
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 83       	st	Z, r24
    229c:	a6 c0       	rjmp	.+332    	; 0x23ea <VoidControlledHomeLoginSystem+0xbda>
						{
							/* Print Counter On LCD */
							LCD_voidSendNumber(Local_u8Counter);
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 56       	subi	r30, 0x65	; 101
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e0       	ldi	r26, 0x00	; 0
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 74 24 	call	0x48e8	; 0x48e8 <LCD_voidSendNumber>
							/* Turn On Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_HIGH);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    22c0:	fe 01       	movw	r30, r28
    22c2:	ed 5b       	subi	r30, 0xBD	; 189
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	aa e7       	ldi	r26, 0x7A	; 122
    22cc:	b4 e4       	ldi	r27, 0x44	; 68
    22ce:	80 83       	st	Z, r24
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	a2 83       	std	Z+2, r26	; 0x02
    22d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	8e 01       	movw	r16, r28
    22d8:	01 5c       	subi	r16, 0xC1	; 193
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	ed 5b       	subi	r30, 0xBD	; 189
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a ef       	ldi	r20, 0xFA	; 250
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	f8 01       	movw	r30, r16
    22fc:	80 83       	st	Z, r24
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	a2 83       	std	Z+2, r26	; 0x02
    2302:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2304:	fe 01       	movw	r30, r28
    2306:	ff 96       	adiw	r30, 0x3f	; 63
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <VoidControlledHomeLoginSystem+0xb1a>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e af       	std	Y+62, r25	; 0x3e
    2326:	8d af       	std	Y+61, r24	; 0x3d
    2328:	46 c0       	rjmp	.+140    	; 0x23b6 <VoidControlledHomeLoginSystem+0xba6>
	else if (__tmp > 65535)
    232a:	fe 01       	movw	r30, r28
    232c:	ff 96       	adiw	r30, 0x3f	; 63
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	64 f5       	brge	.+88     	; 0x239e <VoidControlledHomeLoginSystem+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	fe 01       	movw	r30, r28
    2348:	ed 5b       	subi	r30, 0xBD	; 189
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e af       	std	Y+62, r25	; 0x3e
    2372:	8d af       	std	Y+61, r24	; 0x3d
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <VoidControlledHomeLoginSystem+0xb84>
    2376:	88 ec       	ldi	r24, 0xC8	; 200
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c af       	std	Y+60, r25	; 0x3c
    237c:	8b af       	std	Y+59, r24	; 0x3b
    237e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2380:	9c ad       	ldd	r25, Y+60	; 0x3c
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <VoidControlledHomeLoginSystem+0xb72>
    2386:	9c af       	std	Y+60, r25	; 0x3c
    2388:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8d ad       	ldd	r24, Y+61	; 0x3d
    238c:	9e ad       	ldd	r25, Y+62	; 0x3e
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	9e af       	std	Y+62, r25	; 0x3e
    2392:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8d ad       	ldd	r24, Y+61	; 0x3d
    2396:	9e ad       	ldd	r25, Y+62	; 0x3e
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <VoidControlledHomeLoginSystem+0xb66>
    239c:	16 c0       	rjmp	.+44     	; 0x23ca <VoidControlledHomeLoginSystem+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	fe 01       	movw	r30, r28
    23a0:	ff 96       	adiw	r30, 0x3f	; 63
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e af       	std	Y+62, r25	; 0x3e
    23b4:	8d af       	std	Y+61, r24	; 0x3d
    23b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ba:	9a af       	std	Y+58, r25	; 0x3a
    23bc:	89 af       	std	Y+57, r24	; 0x39
    23be:	89 ad       	ldd	r24, Y+57	; 0x39
    23c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <VoidControlledHomeLoginSystem+0xbb2>
    23c6:	9a af       	std	Y+58, r25	; 0x3a
    23c8:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(1000);
							/* Turn Off Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_LOW);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	65 e0       	ldi	r22, 0x05	; 5
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
							LCD_VoidClear();
    23d4:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						LCD_VoidSentSringAndNum("Pls Wait For 10 Sec");
						_delay_ms(1000);
						LCD_VoidClear();
						/* Turn On Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
						for(Local_u8Counter = 1;Local_u8Counter <= 10; Local_u8Counter++)
    23d8:	de 01       	movw	r26, r28
    23da:	a5 56       	subi	r26, 0x65	; 101
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	e5 56       	subi	r30, 0x65	; 101
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	8c 93       	st	X, r24
    23ea:	fe 01       	movw	r30, r28
    23ec:	e5 56       	subi	r30, 0x65	; 101
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	8b 30       	cpi	r24, 0x0B	; 11
    23f4:	08 f4       	brcc	.+2      	; 0x23f8 <VoidControlledHomeLoginSystem+0xbe8>
    23f6:	53 cf       	rjmp	.-346    	; 0x229e <VoidControlledHomeLoginSystem+0xa8e>
							/* Turn Off Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_LOW);
							LCD_VoidClear();
						}
						/* Turn Off Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_LOW);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	66 e0       	ldi	r22, 0x06	; 6
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						LCD_VoidSentSringAndNum("Pls Login Again");
    2402:	81 ef       	ldi	r24, 0xF1	; 241
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    240a:	14 ca       	rjmp	.-3032   	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
						goto LOOP;
						break;
			/*                               User Enter Wrong Username Or Password For Fifth Enter                   */
				case 5 : LCD_VoidClear();LCD_VoidSentSringAndNum("Block Mode");
    240c:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	93 e0       	ldi	r25, 0x03	; 3
    2414:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e8       	ldi	r25, 0x80	; 128
    241c:	ab eb       	ldi	r26, 0xBB	; 187
    241e:	b4 e4       	ldi	r27, 0x44	; 68
    2420:	8d ab       	std	Y+53, r24	; 0x35
    2422:	9e ab       	std	Y+54, r25	; 0x36
    2424:	af ab       	std	Y+55, r26	; 0x37
    2426:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6d a9       	ldd	r22, Y+53	; 0x35
    242a:	7e a9       	ldd	r23, Y+54	; 0x36
    242c:	8f a9       	ldd	r24, Y+55	; 0x37
    242e:	98 ad       	ldd	r25, Y+56	; 0x38
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a ef       	ldi	r20, 0xFA	; 250
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	89 ab       	std	Y+49, r24	; 0x31
    2442:	9a ab       	std	Y+50, r25	; 0x32
    2444:	ab ab       	std	Y+51, r26	; 0x33
    2446:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <VoidControlledHomeLoginSystem+0xc5a>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	98 ab       	std	Y+48, r25	; 0x30
    2466:	8f a7       	std	Y+47, r24	; 0x2f
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <VoidControlledHomeLoginSystem+0xcd8>
	else if (__tmp > 65535)
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	7a a9       	ldd	r23, Y+50	; 0x32
    246e:	8b a9       	ldd	r24, Y+51	; 0x33
    2470:	9c a9       	ldd	r25, Y+52	; 0x34
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <VoidControlledHomeLoginSystem+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6d a9       	ldd	r22, Y+53	; 0x35
    2484:	7e a9       	ldd	r23, Y+54	; 0x36
    2486:	8f a9       	ldd	r24, Y+55	; 0x37
    2488:	98 ad       	ldd	r25, Y+56	; 0x38
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <VoidControlledHomeLoginSystem+0xcba>
    24ac:	88 ec       	ldi	r24, 0xC8	; 200
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9e a7       	std	Y+46, r25	; 0x2e
    24b2:	8d a7       	std	Y+45, r24	; 0x2d
    24b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <VoidControlledHomeLoginSystem+0xca8>
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <VoidControlledHomeLoginSystem+0xc9c>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <VoidControlledHomeLoginSystem+0xcec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
    24ee:	8b a7       	std	Y+43, r24	; 0x2b
    24f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <VoidControlledHomeLoginSystem+0xce4>
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(1500);
						LCD_VoidClear();
    24fc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						Local_u8Iteration++;
    2500:	de 01       	movw	r26, r28
    2502:	a4 56       	subi	r26, 0x64	; 100
    2504:	bf 4f       	sbci	r27, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	e4 56       	subi	r30, 0x64	; 100
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	8c 93       	st	X, r24
						LCD_VoidSentSringAndNum("Pls Wait For 30 Sec");
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	aa e7       	ldi	r26, 0x7A	; 122
    2520:	b4 e4       	ldi	r27, 0x44	; 68
    2522:	8f a3       	std	Y+39, r24	; 0x27
    2524:	98 a7       	std	Y+40, r25	; 0x28
    2526:	a9 a7       	std	Y+41, r26	; 0x29
    2528:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6f a1       	ldd	r22, Y+39	; 0x27
    252c:	78 a5       	ldd	r23, Y+40	; 0x28
    252e:	89 a5       	ldd	r24, Y+41	; 0x29
    2530:	9a a5       	ldd	r25, Y+42	; 0x2a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a ef       	ldi	r20, 0xFA	; 250
    2538:	54 e4       	ldi	r21, 0x44	; 68
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8b a3       	std	Y+35, r24	; 0x23
    2544:	9c a3       	std	Y+36, r25	; 0x24
    2546:	ad a3       	std	Y+37, r26	; 0x25
    2548:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <VoidControlledHomeLoginSystem+0xd5c>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a a3       	std	Y+34, r25	; 0x22
    2568:	89 a3       	std	Y+33, r24	; 0x21
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <VoidControlledHomeLoginSystem+0xdda>
	else if (__tmp > 65535)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <VoidControlledHomeLoginSystem+0xdc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6f a1       	ldd	r22, Y+39	; 0x27
    2586:	78 a5       	ldd	r23, Y+40	; 0x28
    2588:	89 a5       	ldd	r24, Y+41	; 0x29
    258a:	9a a5       	ldd	r25, Y+42	; 0x2a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <VoidControlledHomeLoginSystem+0xdbc>
    25ae:	88 ec       	ldi	r24, 0xC8	; 200
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <VoidControlledHomeLoginSystem+0xdaa>
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <VoidControlledHomeLoginSystem+0xd9e>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <VoidControlledHomeLoginSystem+0xdee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6b a1       	ldd	r22, Y+35	; 0x23
    25d8:	7c a1       	ldd	r23, Y+36	; 0x24
    25da:	8d a1       	ldd	r24, Y+37	; 0x25
    25dc:	9e a1       	ldd	r25, Y+38	; 0x26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
    25f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <VoidControlledHomeLoginSystem+0xde6>
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_VoidClear();
    25fe:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						/* Turn On Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	66 e0       	ldi	r22, 0x06	; 6
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						for(Local_u8Counter = 1;Local_u8Counter <= 30; Local_u8Counter++)
    260c:	fe 01       	movw	r30, r28
    260e:	e5 56       	subi	r30, 0x65	; 101
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	80 83       	st	Z, r24
    2616:	93 c0       	rjmp	.+294    	; 0x273e <VoidControlledHomeLoginSystem+0xf2e>
						{
							/* Turn On Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_HIGH);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	65 e0       	ldi	r22, 0x05	; 5
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
							/* Print Counter On LCD */
							LCD_voidSendNumber(Local_u8Counter);
    2622:	fe 01       	movw	r30, r28
    2624:	e5 56       	subi	r30, 0x65	; 101
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 e0       	ldi	r26, 0x00	; 0
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 74 24 	call	0x48e8	; 0x48e8 <LCD_voidSendNumber>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	aa e7       	ldi	r26, 0x7A	; 122
    2640:	b4 e4       	ldi	r27, 0x44	; 68
    2642:	89 8f       	std	Y+25, r24	; 0x19
    2644:	9a 8f       	std	Y+26, r25	; 0x1a
    2646:	ab 8f       	std	Y+27, r26	; 0x1b
    2648:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	69 8d       	ldd	r22, Y+25	; 0x19
    264c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8d 8b       	std	Y+21, r24	; 0x15
    2664:	9e 8b       	std	Y+22, r25	; 0x16
    2666:	af 8b       	std	Y+23, r26	; 0x17
    2668:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266a:	6d 89       	ldd	r22, Y+21	; 0x15
    266c:	7e 89       	ldd	r23, Y+22	; 0x16
    266e:	8f 89       	ldd	r24, Y+23	; 0x17
    2670:	98 8d       	ldd	r25, Y+24	; 0x18
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <VoidControlledHomeLoginSystem+0xe7c>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	3f c0       	rjmp	.+126    	; 0x270a <VoidControlledHomeLoginSystem+0xefa>
	else if (__tmp > 65535)
    268c:	6d 89       	ldd	r22, Y+21	; 0x15
    268e:	7e 89       	ldd	r23, Y+22	; 0x16
    2690:	8f 89       	ldd	r24, Y+23	; 0x17
    2692:	98 8d       	ldd	r25, Y+24	; 0x18
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <VoidControlledHomeLoginSystem+0xee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	69 8d       	ldd	r22, Y+25	; 0x19
    26a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9c 8b       	std	Y+20, r25	; 0x14
    26ca:	8b 8b       	std	Y+19, r24	; 0x13
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <VoidControlledHomeLoginSystem+0xedc>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
    26d6:	89 89       	ldd	r24, Y+17	; 0x11
    26d8:	9a 89       	ldd	r25, Y+18	; 0x12
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <VoidControlledHomeLoginSystem+0xeca>
    26de:	9a 8b       	std	Y+18, r25	; 0x12
    26e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <VoidControlledHomeLoginSystem+0xebe>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <VoidControlledHomeLoginSystem+0xf0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9c 8b       	std	Y+20, r25	; 0x14
    2708:	8b 8b       	std	Y+19, r24	; 0x13
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	98 8b       	std	Y+16, r25	; 0x10
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	8f 85       	ldd	r24, Y+15	; 0x0f
    2714:	98 89       	ldd	r25, Y+16	; 0x10
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <VoidControlledHomeLoginSystem+0xf06>
    271a:	98 8b       	std	Y+16, r25	; 0x10
    271c:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(1000);
							/* Turn Off Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_LOW);
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	65 e0       	ldi	r22, 0x05	; 5
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
							LCD_VoidClear();
    2728:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						LCD_VoidSentSringAndNum("Pls Wait For 30 Sec");
						_delay_ms(1000);
						LCD_VoidClear();
						/* Turn On Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
						for(Local_u8Counter = 1;Local_u8Counter <= 30; Local_u8Counter++)
    272c:	de 01       	movw	r26, r28
    272e:	a5 56       	subi	r26, 0x65	; 101
    2730:	bf 4f       	sbci	r27, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	e5 56       	subi	r30, 0x65	; 101
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	8c 93       	st	X, r24
    273e:	fe 01       	movw	r30, r28
    2740:	e5 56       	subi	r30, 0x65	; 101
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	8f 31       	cpi	r24, 0x1F	; 31
    2748:	08 f4       	brcc	.+2      	; 0x274c <VoidControlledHomeLoginSystem+0xf3c>
    274a:	66 cf       	rjmp	.-308    	; 0x2618 <VoidControlledHomeLoginSystem+0xe08>
							/* Turn Off Buzzer */
							DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_LOW);
							LCD_VoidClear();
						}
						/* Turn Of Red Led */
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_LOW);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	66 e0       	ldi	r22, 0x06	; 6
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						LCD_VoidSentSringAndNum("Pls Login Again");
    2756:	81 ef       	ldi	r24, 0xF1	; 241
    2758:	92 e0       	ldi	r25, 0x02	; 2
    275a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    275e:	6a c8       	rjmp	.-3884   	; 0x1834 <VoidControlledHomeLoginSystem+0x24>
						goto LOOP;
						break;
			/*                               User Enter Wrong Username Or Password For Sixth Enter                    */
				case 6 :LCD_VoidClear();LCD_VoidSentSringAndNum("Ps Wait For Hour");_delay_ms(2000);LCD_VoidClear();
    2760:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
    2764:	84 e3       	ldi	r24, 0x34	; 52
    2766:	93 e0       	ldi	r25, 0x03	; 3
    2768:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	aa ef       	ldi	r26, 0xFA	; 250
    2772:	b4 e4       	ldi	r27, 0x44	; 68
    2774:	8b 87       	std	Y+11, r24	; 0x0b
    2776:	9c 87       	std	Y+12, r25	; 0x0c
    2778:	ad 87       	std	Y+13, r26	; 0x0d
    277a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8f 83       	std	Y+7, r24	; 0x07
    2796:	98 87       	std	Y+8, r25	; 0x08
    2798:	a9 87       	std	Y+9, r26	; 0x09
    279a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279c:	6f 81       	ldd	r22, Y+7	; 0x07
    279e:	78 85       	ldd	r23, Y+8	; 0x08
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <VoidControlledHomeLoginSystem+0xfae>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <VoidControlledHomeLoginSystem+0x102c>
	else if (__tmp > 65535)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <VoidControlledHomeLoginSystem+0x1018>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <VoidControlledHomeLoginSystem+0x100e>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <VoidControlledHomeLoginSystem+0xffc>
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <VoidControlledHomeLoginSystem+0xff0>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <VoidControlledHomeLoginSystem+0x1040>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <VoidControlledHomeLoginSystem+0x1038>
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
						DIO_U8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_HIGH);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	66 e0       	ldi	r22, 0x06	; 6
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
						break;
		}
			break;
		}
	}
}
    285e:	c2 56       	subi	r28, 0x62	; 98
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	08 95       	ret

00002876 <DIO_VoidInit>:
#include "DIO_Private.h"
#include "DIO_Interface.h"
#include "DIO_Config.h"

void DIO_VoidInit(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	/* DDR */

	DDRA_REG = Init_Problem(DIO_U8_PA7_INTIAL_DIRECTION,DIO_U8_PA6_INTIAL_DIRECTION,DIO_U8_PA5_INTIAL_DIRECTION,
    287e:	ea e3       	ldi	r30, 0x3A	; 58
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	8c ef       	ldi	r24, 0xFC	; 252
    2884:	80 83       	st	Z, r24
			   DIO_U8_PA4_INTIAL_DIRECTION,DIO_U8_PA3_INTIAL_DIRECTION,DIO_U8_PA2_INTIAL_DIRECTION,
			   DIO_U8_PA1_INTIAL_DIRECTION,DIO_U8_PA0_INTIAL_DIRECTION);

	DDRB_REG = Init_Problem(DIO_U8_PB7_INTIAL_DIRECTION,DIO_U8_PB6_INTIAL_DIRECTION,DIO_U8_PB5_INTIAL_DIRECTION,
    2886:	e7 e3       	ldi	r30, 0x37	; 55
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	8f ef       	ldi	r24, 0xFF	; 255
    288c:	80 83       	st	Z, r24
			   DIO_U8_PB4_INTIAL_DIRECTION,DIO_U8_PB3_INTIAL_DIRECTION,DIO_U8_PB2_INTIAL_DIRECTION,
			   DIO_U8_PB1_INTIAL_DIRECTION,DIO_U8_PB0_INTIAL_DIRECTION);

	DDRC_REG = Init_Problem(DIO_U8_PC7_INTIAL_DIRECTION,DIO_U8_PC6_INTIAL_DIRECTION,DIO_U8_PC5_INTIAL_DIRECTION,
    288e:	e4 e3       	ldi	r30, 0x34	; 52
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	8f ef       	ldi	r24, 0xFF	; 255
    2894:	80 83       	st	Z, r24
			   DIO_U8_PC4_INTIAL_DIRECTION,DIO_U8_PC3_INTIAL_DIRECTION,DIO_U8_PC2_INTIAL_DIRECTION,
			   DIO_U8_PC1_INTIAL_DIRECTION,DIO_U8_PC0_INTIAL_DIRECTION);

	DDRD_REG = Init_Problem(DIO_U8_PD7_INTIAL_DIRECTION,DIO_U8_PD6_INTIAL_DIRECTION,DIO_U8_PD5_INTIAL_DIRECTION,
    2896:	e1 e3       	ldi	r30, 0x31	; 49
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	80 83       	st	Z, r24
			   DIO_U8_PD4_INTIAL_DIRECTION,DIO_U8_PD3_INTIAL_DIRECTION,DIO_U8_PD2_INTIAL_DIRECTION,
			   DIO_U8_PD1_INTIAL_DIRECTION,DIO_U8_PD0_INTIAL_DIRECTION);

	/* PORTS */

	PORTA_REG = Init_Problem(DIO_U8_PA7_INTIAL_VALUE,DIO_U8_PA6_INTIAL_VALUE,DIO_U8_PA5_INTIAL_VALUE,
    289e:	eb e3       	ldi	r30, 0x3B	; 59
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	10 82       	st	Z, r1
			    DIO_U8_PA4_INTIAL_VALUE,DIO_U8_PA3_INTIAL_VALUE,DIO_U8_PA2_INTIAL_VALUE,
			    DIO_U8_PA1_INTIAL_VALUE,DIO_U8_PA0_INTIAL_VALUE);

	PORTB_REG = Init_Problem(DIO_U8_PB7_INTIAL_VALUE,DIO_U8_PB6_INTIAL_VALUE,DIO_U8_PB5_INTIAL_VALUE,
    28a4:	e8 e3       	ldi	r30, 0x38	; 56
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	10 82       	st	Z, r1
			    DIO_U8_PB4_INTIAL_VALUE,DIO_U8_PB3_INTIAL_VALUE,DIO_U8_PB5_INTIAL_VALUE,
			    DIO_U8_PB1_INTIAL_VALUE,DIO_U8_PB0_INTIAL_VALUE);

	PORTC_REG = Init_Problem(DIO_U8_PC7_INTIAL_VALUE,DIO_U8_PC6_INTIAL_VALUE,DIO_U8_PC5_INTIAL_VALUE,
    28aa:	e5 e3       	ldi	r30, 0x35	; 53
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	10 82       	st	Z, r1
			    DIO_U8_PC4_INTIAL_VALUE,DIO_U8_PC3_INTIAL_VALUE,DIO_U8_PC2_INTIAL_VALUE,
			    DIO_U8_PC1_INTIAL_VALUE,DIO_U8_PC0_INTIAL_VALUE);

	PORTD_REG = Init_Problem(DIO_U8_PD7_INTIAL_VALUE,DIO_U8_PD6_INTIAL_VALUE,DIO_U8_PD5_INTIAL_VALUE,
    28b0:	e2 e3       	ldi	r30, 0x32	; 50
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	10 82       	st	Z, r1
			    DIO_U8_PD4_INTIAL_VALUE,DIO_U8_PD3_INTIAL_VALUE,DIO_U8_PD2_INTIAL_VALUE,
			    DIO_U8_PD1_INTIAL_VALUE,DIO_U8_PD0_INTIAL_VALUE);


}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <DIO_U8SetPinDirection>:

u8 DIO_U8SetPinDirection(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Direction)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <DIO_U8SetPinDirection+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <DIO_U8SetPinDirection+0x8>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <DIO_U8SetPinDirection+0xa>
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	8a 83       	std	Y+2, r24	; 0x02
    28cc:	6b 83       	std	Y+3, r22	; 0x03
    28ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState = STATE_OK;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Port<=DIO_U8_PORTD && Copy_U8Pin<=DIO_U8_PIN7)
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <DIO_U8SetPinDirection+0x20>
    28da:	e5 c0       	rjmp	.+458    	; 0x2aa6 <DIO_U8SetPinDirection+0x1ea>
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	88 30       	cpi	r24, 0x08	; 8
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <DIO_U8SetPinDirection+0x28>
    28e2:	e1 c0       	rjmp	.+450    	; 0x2aa6 <DIO_U8SetPinDirection+0x1ea>
	{
		switch	(Copy_U8Port)
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	3e 83       	std	Y+6, r19	; 0x06
    28ec:	2d 83       	std	Y+5, r18	; 0x05
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	91 05       	cpc	r25, r1
    28f6:	09 f4       	brne	.+2      	; 0x28fa <DIO_U8SetPinDirection+0x3e>
    28f8:	47 c0       	rjmp	.+142    	; 0x2988 <DIO_U8SetPinDirection+0xcc>
    28fa:	2d 81       	ldd	r18, Y+5	; 0x05
    28fc:	3e 81       	ldd	r19, Y+6	; 0x06
    28fe:	22 30       	cpi	r18, 0x02	; 2
    2900:	31 05       	cpc	r19, r1
    2902:	2c f4       	brge	.+10     	; 0x290e <DIO_U8SetPinDirection+0x52>
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	71 f0       	breq	.+28     	; 0x2928 <DIO_U8SetPinDirection+0x6c>
    290c:	cd c0       	rjmp	.+410    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
    290e:	2d 81       	ldd	r18, Y+5	; 0x05
    2910:	3e 81       	ldd	r19, Y+6	; 0x06
    2912:	22 30       	cpi	r18, 0x02	; 2
    2914:	31 05       	cpc	r19, r1
    2916:	09 f4       	brne	.+2      	; 0x291a <DIO_U8SetPinDirection+0x5e>
    2918:	67 c0       	rjmp	.+206    	; 0x29e8 <DIO_U8SetPinDirection+0x12c>
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	09 f4       	brne	.+2      	; 0x2926 <DIO_U8SetPinDirection+0x6a>
    2924:	91 c0       	rjmp	.+290    	; 0x2a48 <DIO_U8SetPinDirection+0x18c>
    2926:	c0 c0       	rjmp	.+384    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		{

		    case DIO_U8_PORTA :
		    {
		    	if(Copy_U8Direction == DIO_U8_LOW)
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	88 23       	and	r24, r24
    292c:	a9 f4       	brne	.+42     	; 0x2958 <DIO_U8SetPinDirection+0x9c>
		    		CLR_BIT(DDRA_REG,Copy_U8Pin);
    292e:	aa e3       	ldi	r26, 0x3A	; 58
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ea e3       	ldi	r30, 0x3A	; 58
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	48 2f       	mov	r20, r24
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	02 2e       	mov	r0, r18
    2946:	02 c0       	rjmp	.+4      	; 0x294c <DIO_U8SetPinDirection+0x90>
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	0a 94       	dec	r0
    294e:	e2 f7       	brpl	.-8      	; 0x2948 <DIO_U8SetPinDirection+0x8c>
    2950:	80 95       	com	r24
    2952:	84 23       	and	r24, r20
    2954:	8c 93       	st	X, r24
    2956:	a8 c0       	rjmp	.+336    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    	else if(Copy_U8Direction ==DIO_U8_HIGH)
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	09 f0       	breq	.+2      	; 0x2960 <DIO_U8SetPinDirection+0xa4>
    295e:	a4 c0       	rjmp	.+328    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    		SET_BIT(DDRA_REG,Copy_U8Pin);
    2960:	aa e3       	ldi	r26, 0x3A	; 58
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ea e3       	ldi	r30, 0x3A	; 58
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	48 2f       	mov	r20, r24
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	02 2e       	mov	r0, r18
    2978:	02 c0       	rjmp	.+4      	; 0x297e <DIO_U8SetPinDirection+0xc2>
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	0a 94       	dec	r0
    2980:	e2 f7       	brpl	.-8      	; 0x297a <DIO_U8SetPinDirection+0xbe>
    2982:	84 2b       	or	r24, r20
    2984:	8c 93       	st	X, r24
    2986:	90 c0       	rjmp	.+288    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
				}	
		    		break;
		    }		
		    case DIO_U8_PORTB :
			{
		    	if(Copy_U8Direction == DIO_U8_LOW)
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	88 23       	and	r24, r24
    298c:	a9 f4       	brne	.+42     	; 0x29b8 <DIO_U8SetPinDirection+0xfc>
		    		CLR_BIT(DDRB_REG,Copy_U8Pin);
    298e:	a7 e3       	ldi	r26, 0x37	; 55
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e7 e3       	ldi	r30, 0x37	; 55
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	48 2f       	mov	r20, r24
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	02 2e       	mov	r0, r18
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <DIO_U8SetPinDirection+0xf0>
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	0a 94       	dec	r0
    29ae:	e2 f7       	brpl	.-8      	; 0x29a8 <DIO_U8SetPinDirection+0xec>
    29b0:	80 95       	com	r24
    29b2:	84 23       	and	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	78 c0       	rjmp	.+240    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    	else if (Copy_U8Direction == DIO_U8_HIGH)
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <DIO_U8SetPinDirection+0x104>
    29be:	74 c0       	rjmp	.+232    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    		SET_BIT(DDRB_REG,Copy_U8Pin);
    29c0:	a7 e3       	ldi	r26, 0x37	; 55
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e7 e3       	ldi	r30, 0x37	; 55
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	48 2f       	mov	r20, r24
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	02 2e       	mov	r0, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <DIO_U8SetPinDirection+0x122>
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	0a 94       	dec	r0
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <DIO_U8SetPinDirection+0x11e>
    29e2:	84 2b       	or	r24, r20
    29e4:	8c 93       	st	X, r24
    29e6:	60 c0       	rjmp	.+192    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
				}	
		    		break;
			}
		    case DIO_U8_PORTC :
			{
		    	if(Copy_U8Direction == DIO_U8_LOW)
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	88 23       	and	r24, r24
    29ec:	a9 f4       	brne	.+42     	; 0x2a18 <DIO_U8SetPinDirection+0x15c>
		    		CLR_BIT(DDRC_REG,Copy_U8Pin);
    29ee:	a4 e3       	ldi	r26, 0x34	; 52
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e4 e3       	ldi	r30, 0x34	; 52
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	48 2f       	mov	r20, r24
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	02 2e       	mov	r0, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <DIO_U8SetPinDirection+0x150>
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	0a 94       	dec	r0
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <DIO_U8SetPinDirection+0x14c>
    2a10:	80 95       	com	r24
    2a12:	84 23       	and	r24, r20
    2a14:	8c 93       	st	X, r24
    2a16:	48 c0       	rjmp	.+144    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    	else if (Copy_U8Direction == DIO_U8_HIGH)
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <DIO_U8SetPinDirection+0x164>
    2a1e:	44 c0       	rjmp	.+136    	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    		SET_BIT(DDRC_REG,Copy_U8Pin);
    2a20:	a4 e3       	ldi	r26, 0x34	; 52
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e4 e3       	ldi	r30, 0x34	; 52
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	48 2f       	mov	r20, r24
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 2e       	mov	r0, r18
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <DIO_U8SetPinDirection+0x182>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <DIO_U8SetPinDirection+0x17e>
    2a42:	84 2b       	or	r24, r20
    2a44:	8c 93       	st	X, r24
    2a46:	30 c0       	rjmp	.+96     	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
				}	
		    		break;
			}
		    case DIO_U8_PORTD :
			{
		    	if(Copy_U8Direction == DIO_U8_LOW)
    2a48:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4a:	88 23       	and	r24, r24
    2a4c:	a9 f4       	brne	.+42     	; 0x2a78 <DIO_U8SetPinDirection+0x1bc>
		    		CLR_BIT(DDRD_REG,Copy_U8Pin);
    2a4e:	a1 e3       	ldi	r26, 0x31	; 49
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e1 e3       	ldi	r30, 0x31	; 49
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	48 2f       	mov	r20, r24
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	02 2e       	mov	r0, r18
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <DIO_U8SetPinDirection+0x1b0>
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	0a 94       	dec	r0
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <DIO_U8SetPinDirection+0x1ac>
    2a70:	80 95       	com	r24
    2a72:	84 23       	and	r24, r20
    2a74:	8c 93       	st	X, r24
    2a76:	18 c0       	rjmp	.+48     	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    	else if (Copy_U8Direction == DIO_U8_HIGH)
    2a78:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	a9 f4       	brne	.+42     	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
		    		SET_BIT(DDRD_REG,Copy_U8Pin);
    2a7e:	a1 e3       	ldi	r26, 0x31	; 49
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e1 e3       	ldi	r30, 0x31	; 49
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	48 2f       	mov	r20, r24
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	02 2e       	mov	r0, r18
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <DIO_U8SetPinDirection+0x1e0>
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	0a 94       	dec	r0
    2a9e:	e2 f7       	brpl	.-8      	; 0x2a98 <DIO_U8SetPinDirection+0x1dc>
    2aa0:	84 2b       	or	r24, r20
    2aa2:	8c 93       	st	X, r24
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <DIO_U8SetPinDirection+0x1ec>
			}
            
	    }
	}
	else
		Local_U8ErrorState = STATE_NOK;
    2aa6:	19 82       	std	Y+1, r1	; 0x01
	return(Local_U8ErrorState);
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aaa:	26 96       	adiw	r28, 0x06	; 6
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <DIO_U8SetPortDirection>:
u8 DIO_U8SetPortDirection(u8 Copy_U8Port ,u8 Copy_U8Direction)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <DIO_U8SetPortDirection+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <DIO_U8SetPortDirection+0x8>
    2ac4:	0f 92       	push	r0
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	8a 83       	std	Y+2, r24	; 0x02
    2acc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState = STATE_OK;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8Port<=DIO_U8_PORTD )
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	84 30       	cpi	r24, 0x04	; 4
    2ad6:	98 f5       	brcc	.+102    	; 0x2b3e <DIO_U8SetPortDirection+0x82>
	{
		switch(Copy_U8Port)
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	3d 83       	std	Y+5, r19	; 0x05
    2ae0:	2c 83       	std	Y+4, r18	; 0x04
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae6:	81 30       	cpi	r24, 0x01	; 1
    2ae8:	91 05       	cpc	r25, r1
    2aea:	d1 f0       	breq	.+52     	; 0x2b20 <DIO_U8SetPortDirection+0x64>
    2aec:	2c 81       	ldd	r18, Y+4	; 0x04
    2aee:	3d 81       	ldd	r19, Y+5	; 0x05
    2af0:	22 30       	cpi	r18, 0x02	; 2
    2af2:	31 05       	cpc	r19, r1
    2af4:	2c f4       	brge	.+10     	; 0x2b00 <DIO_U8SetPortDirection+0x44>
    2af6:	8c 81       	ldd	r24, Y+4	; 0x04
    2af8:	9d 81       	ldd	r25, Y+5	; 0x05
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	61 f0       	breq	.+24     	; 0x2b16 <DIO_U8SetPortDirection+0x5a>
    2afe:	20 c0       	rjmp	.+64     	; 0x2b40 <DIO_U8SetPortDirection+0x84>
    2b00:	2c 81       	ldd	r18, Y+4	; 0x04
    2b02:	3d 81       	ldd	r19, Y+5	; 0x05
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	81 f0       	breq	.+32     	; 0x2b2a <DIO_U8SetPortDirection+0x6e>
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	91 05       	cpc	r25, r1
    2b12:	81 f0       	breq	.+32     	; 0x2b34 <DIO_U8SetPortDirection+0x78>
    2b14:	15 c0       	rjmp	.+42     	; 0x2b40 <DIO_U8SetPortDirection+0x84>
		{
		case DIO_U8_PORTA :DDRA_REG = Copy_U8Direction ; break;
    2b16:	ea e3       	ldi	r30, 0x3A	; 58
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	80 83       	st	Z, r24
    2b1e:	10 c0       	rjmp	.+32     	; 0x2b40 <DIO_U8SetPortDirection+0x84>
		case DIO_U8_PORTB :DDRB_REG = Copy_U8Direction ; break;
    2b20:	e7 e3       	ldi	r30, 0x37	; 55
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	80 83       	st	Z, r24
    2b28:	0b c0       	rjmp	.+22     	; 0x2b40 <DIO_U8SetPortDirection+0x84>
		case DIO_U8_PORTC :DDRC_REG = Copy_U8Direction ; break;
    2b2a:	e4 e3       	ldi	r30, 0x34	; 52
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	80 83       	st	Z, r24
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <DIO_U8SetPortDirection+0x84>
		case DIO_U8_PORTD :DDRD_REG = Copy_U8Direction ; break;
    2b34:	e1 e3       	ldi	r30, 0x31	; 49
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	80 83       	st	Z, r24
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <DIO_U8SetPortDirection+0x84>
		}
	}
	else
	{
		Local_U8ErrorState = STATE_NOK;
    2b3e:	19 82       	std	Y+1, r1	; 0x01
	}
	return(Local_U8ErrorState);
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <DIO_U8SetPinValue>:
u8 DIO_U8SetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Value)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	00 d0       	rcall	.+0      	; 0x2b58 <DIO_U8SetPinValue+0x6>
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <DIO_U8SetPinValue+0x8>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <DIO_U8SetPinValue+0xa>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	6b 83       	std	Y+3, r22	; 0x03
    2b64:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState = STATE_OK;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Port<=DIO_U8_PORTD && Copy_U8Pin<=DIO_U8_PIN7)
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	84 30       	cpi	r24, 0x04	; 4
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <DIO_U8SetPinValue+0x20>
    2b70:	e5 c0       	rjmp	.+458    	; 0x2d3c <DIO_U8SetPinValue+0x1ea>
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	88 30       	cpi	r24, 0x08	; 8
    2b76:	08 f0       	brcs	.+2      	; 0x2b7a <DIO_U8SetPinValue+0x28>
    2b78:	e1 c0       	rjmp	.+450    	; 0x2d3c <DIO_U8SetPinValue+0x1ea>
	{
		switch(Copy_U8Port)
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	3e 83       	std	Y+6, r19	; 0x06
    2b82:	2d 83       	std	Y+5, r18	; 0x05
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <DIO_U8SetPinValue+0x3e>
    2b8e:	47 c0       	rjmp	.+142    	; 0x2c1e <DIO_U8SetPinValue+0xcc>
    2b90:	2d 81       	ldd	r18, Y+5	; 0x05
    2b92:	3e 81       	ldd	r19, Y+6	; 0x06
    2b94:	22 30       	cpi	r18, 0x02	; 2
    2b96:	31 05       	cpc	r19, r1
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <DIO_U8SetPinValue+0x52>
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	71 f0       	breq	.+28     	; 0x2bbe <DIO_U8SetPinValue+0x6c>
    2ba2:	cd c0       	rjmp	.+410    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
    2ba4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ba6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ba8:	22 30       	cpi	r18, 0x02	; 2
    2baa:	31 05       	cpc	r19, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <DIO_U8SetPinValue+0x5e>
    2bae:	67 c0       	rjmp	.+206    	; 0x2c7e <DIO_U8SetPinValue+0x12c>
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <DIO_U8SetPinValue+0x6a>
    2bba:	91 c0       	rjmp	.+290    	; 0x2cde <DIO_U8SetPinValue+0x18c>
    2bbc:	c0 c0       	rjmp	.+384    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		{

		    case DIO_U8_PORTA :
		    {
		    	if(DIO_U8_HIGH == Copy_U8Value)
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	a1 f4       	brne	.+40     	; 0x2bec <DIO_U8SetPinValue+0x9a>
		    	{
		    		SET_BIT(PORTA_REG,Copy_U8Pin);
    2bc4:	ab e3       	ldi	r26, 0x3B	; 59
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	eb e3       	ldi	r30, 0x3B	; 59
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	48 2f       	mov	r20, r24
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	02 2e       	mov	r0, r18
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <DIO_U8SetPinValue+0x90>
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	0a 94       	dec	r0
    2be4:	e2 f7       	brpl	.-8      	; 0x2bde <DIO_U8SetPinValue+0x8c>
    2be6:	84 2b       	or	r24, r20
    2be8:	8c 93       	st	X, r24
    2bea:	a9 c0       	rjmp	.+338    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	}
		    	else if (DIO_U8_LOW == Copy_U8Value)
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	88 23       	and	r24, r24
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <DIO_U8SetPinValue+0xa2>
    2bf2:	a5 c0       	rjmp	.+330    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	{
		    		CLR_BIT(PORTA_REG,Copy_U8Pin);
    2bf4:	ab e3       	ldi	r26, 0x3B	; 59
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	eb e3       	ldi	r30, 0x3B	; 59
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	48 2f       	mov	r20, r24
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	02 2e       	mov	r0, r18
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <DIO_U8SetPinValue+0xc0>
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	0a 94       	dec	r0
    2c14:	e2 f7       	brpl	.-8      	; 0x2c0e <DIO_U8SetPinValue+0xbc>
    2c16:	80 95       	com	r24
    2c18:	84 23       	and	r24, r20
    2c1a:	8c 93       	st	X, r24
    2c1c:	90 c0       	rjmp	.+288    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	break;
		    }
            
		    case DIO_U8_PORTB :
			{
		    	if(DIO_U8_HIGH == Copy_U8Value)
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	a1 f4       	brne	.+40     	; 0x2c4c <DIO_U8SetPinValue+0xfa>
		    	{
		    		SET_BIT(PORTB_REG,Copy_U8Pin);
    2c24:	a8 e3       	ldi	r26, 0x38	; 56
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e8 e3       	ldi	r30, 0x38	; 56
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	48 2f       	mov	r20, r24
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	02 2e       	mov	r0, r18
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <DIO_U8SetPinValue+0xf0>
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	0a 94       	dec	r0
    2c44:	e2 f7       	brpl	.-8      	; 0x2c3e <DIO_U8SetPinValue+0xec>
    2c46:	84 2b       	or	r24, r20
    2c48:	8c 93       	st	X, r24
    2c4a:	79 c0       	rjmp	.+242    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	}
		    	else if (DIO_U8_LOW == Copy_U8Value)
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	88 23       	and	r24, r24
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <DIO_U8SetPinValue+0x102>
    2c52:	75 c0       	rjmp	.+234    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	{
		    		CLR_BIT(PORTB_REG,Copy_U8Pin);
    2c54:	a8 e3       	ldi	r26, 0x38	; 56
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e8 e3       	ldi	r30, 0x38	; 56
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	48 2f       	mov	r20, r24
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 2e       	mov	r0, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <DIO_U8SetPinValue+0x120>
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	0a 94       	dec	r0
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <DIO_U8SetPinValue+0x11c>
    2c76:	80 95       	com	r24
    2c78:	84 23       	and	r24, r20
    2c7a:	8c 93       	st	X, r24
    2c7c:	60 c0       	rjmp	.+192    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	break;
			}
            
		    case DIO_U8_PORTC :
			{
		    	if(DIO_U8_HIGH == Copy_U8Value)
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	a1 f4       	brne	.+40     	; 0x2cac <DIO_U8SetPinValue+0x15a>
		    	{
		    		SET_BIT(PORTC_REG,Copy_U8Pin);
    2c84:	a5 e3       	ldi	r26, 0x35	; 53
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e5 e3       	ldi	r30, 0x35	; 53
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	48 2f       	mov	r20, r24
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_U8SetPinValue+0x150>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_U8SetPinValue+0x14c>
    2ca6:	84 2b       	or	r24, r20
    2ca8:	8c 93       	st	X, r24
    2caa:	49 c0       	rjmp	.+146    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	}
		    	else if (DIO_U8_LOW == Copy_U8Value)
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <DIO_U8SetPinValue+0x162>
    2cb2:	45 c0       	rjmp	.+138    	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	{
		    		CLR_BIT(PORTC_REG,Copy_U8Pin);
    2cb4:	a5 e3       	ldi	r26, 0x35	; 53
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e5 e3       	ldi	r30, 0x35	; 53
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	48 2f       	mov	r20, r24
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 2e       	mov	r0, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_U8SetPinValue+0x180>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	0a 94       	dec	r0
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_U8SetPinValue+0x17c>
    2cd6:	80 95       	com	r24
    2cd8:	84 23       	and	r24, r20
    2cda:	8c 93       	st	X, r24
    2cdc:	30 c0       	rjmp	.+96     	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
				}	
		    	break;
			}
		    case DIO_U8_PORTD :
			{
		    	if(DIO_U8_HIGH == Copy_U8Value)
    2cde:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	a1 f4       	brne	.+40     	; 0x2d0c <DIO_U8SetPinValue+0x1ba>
		    	{
		    		SET_BIT(PORTD_REG,Copy_U8Pin);
    2ce4:	a2 e3       	ldi	r26, 0x32	; 50
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e2 e3       	ldi	r30, 0x32	; 50
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	48 2f       	mov	r20, r24
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	02 2e       	mov	r0, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <DIO_U8SetPinValue+0x1b0>
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	0a 94       	dec	r0
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <DIO_U8SetPinValue+0x1ac>
    2d06:	84 2b       	or	r24, r20
    2d08:	8c 93       	st	X, r24
    2d0a:	19 c0       	rjmp	.+50     	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	}
		    	else if (DIO_U8_LOW == Copy_U8Value)
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	88 23       	and	r24, r24
    2d10:	b1 f4       	brne	.+44     	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		    	{
		    		CLR_BIT(PORTD_REG,Copy_U8Pin);
    2d12:	a2 e3       	ldi	r26, 0x32	; 50
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e2 e3       	ldi	r30, 0x32	; 50
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	48 2f       	mov	r20, r24
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	02 2e       	mov	r0, r18
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <DIO_U8SetPinValue+0x1de>
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	0a 94       	dec	r0
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <DIO_U8SetPinValue+0x1da>
    2d34:	80 95       	com	r24
    2d36:	84 23       	and	r24, r20
    2d38:	8c 93       	st	X, r24
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <DIO_U8SetPinValue+0x1ec>
		}

	}
	else
	{
		Local_U8ErrorState = STATE_NOK;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return(Local_U8ErrorState);
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d40:	26 96       	adiw	r28, 0x06	; 6
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_U8Port ,u8 Copy_U8Value)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <DIO_U8SetPortValue+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <DIO_U8SetPortValue+0x8>
    2d5a:	0f 92       	push	r0
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	8a 83       	std	Y+2, r24	; 0x02
    2d62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState = STATE_OK;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8Port<=DIO_U8_PORTD )
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	84 30       	cpi	r24, 0x04	; 4
    2d6c:	98 f5       	brcc	.+102    	; 0x2dd4 <DIO_U8SetPortValue+0x82>
	{
		switch(Copy_U8Port)
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	3d 83       	std	Y+5, r19	; 0x05
    2d76:	2c 83       	std	Y+4, r18	; 0x04
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	91 05       	cpc	r25, r1
    2d80:	d1 f0       	breq	.+52     	; 0x2db6 <DIO_U8SetPortValue+0x64>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	22 30       	cpi	r18, 0x02	; 2
    2d88:	31 05       	cpc	r19, r1
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <DIO_U8SetPortValue+0x44>
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	61 f0       	breq	.+24     	; 0x2dac <DIO_U8SetPortValue+0x5a>
    2d94:	20 c0       	rjmp	.+64     	; 0x2dd6 <DIO_U8SetPortValue+0x84>
    2d96:	2c 81       	ldd	r18, Y+4	; 0x04
    2d98:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9a:	22 30       	cpi	r18, 0x02	; 2
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	81 f0       	breq	.+32     	; 0x2dc0 <DIO_U8SetPortValue+0x6e>
    2da0:	8c 81       	ldd	r24, Y+4	; 0x04
    2da2:	9d 81       	ldd	r25, Y+5	; 0x05
    2da4:	83 30       	cpi	r24, 0x03	; 3
    2da6:	91 05       	cpc	r25, r1
    2da8:	81 f0       	breq	.+32     	; 0x2dca <DIO_U8SetPortValue+0x78>
    2daa:	15 c0       	rjmp	.+42     	; 0x2dd6 <DIO_U8SetPortValue+0x84>
		{
		case DIO_U8_PORTA : PORTA_REG = Copy_U8Value;break;
    2dac:	eb e3       	ldi	r30, 0x3B	; 59
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	80 83       	st	Z, r24
    2db4:	10 c0       	rjmp	.+32     	; 0x2dd6 <DIO_U8SetPortValue+0x84>
		case DIO_U8_PORTB : PORTB_REG = Copy_U8Value;break;
    2db6:	e8 e3       	ldi	r30, 0x38	; 56
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 83       	st	Z, r24
    2dbe:	0b c0       	rjmp	.+22     	; 0x2dd6 <DIO_U8SetPortValue+0x84>
		case DIO_U8_PORTC : PORTC_REG = Copy_U8Value;break;
    2dc0:	e5 e3       	ldi	r30, 0x35	; 53
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	80 83       	st	Z, r24
    2dc8:	06 c0       	rjmp	.+12     	; 0x2dd6 <DIO_U8SetPortValue+0x84>
		case DIO_U8_PORTD : PORTD_REG = Copy_U8Value;break;
    2dca:	e2 e3       	ldi	r30, 0x32	; 50
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	80 83       	st	Z, r24
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <DIO_U8SetPortValue+0x84>
		}
	}
	else 
		Local_U8ErrorState = STATE_NOK;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
	return(Local_U8ErrorState);
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <DIO_U8TogglePinValue>:
u8 DIO_U8TogglePinValue(u8 Copy_U8Port ,u8 Copy_U8Pin)
{
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <DIO_U8TogglePinValue+0x6>
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <DIO_U8TogglePinValue+0x8>
    2df0:	0f 92       	push	r0
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	8a 83       	std	Y+2, r24	; 0x02
    2df8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState = STATE_OK;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8Port<=DIO_U8_PORTD && Copy_U8Pin<=DIO_U8_PIN7)
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	84 30       	cpi	r24, 0x04	; 4
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <DIO_U8TogglePinValue+0x1e>
    2e04:	73 c0       	rjmp	.+230    	; 0x2eec <DIO_U8TogglePinValue+0x104>
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	88 30       	cpi	r24, 0x08	; 8
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <DIO_U8TogglePinValue+0x26>
    2e0c:	6f c0       	rjmp	.+222    	; 0x2eec <DIO_U8TogglePinValue+0x104>
	{
		switch(Copy_U8Port)
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	3d 83       	std	Y+5, r19	; 0x05
    2e16:	2c 83       	std	Y+4, r18	; 0x04
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	91 05       	cpc	r25, r1
    2e20:	49 f1       	breq	.+82     	; 0x2e74 <DIO_U8TogglePinValue+0x8c>
    2e22:	2c 81       	ldd	r18, Y+4	; 0x04
    2e24:	3d 81       	ldd	r19, Y+5	; 0x05
    2e26:	22 30       	cpi	r18, 0x02	; 2
    2e28:	31 05       	cpc	r19, r1
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <DIO_U8TogglePinValue+0x4e>
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	61 f0       	breq	.+24     	; 0x2e4c <DIO_U8TogglePinValue+0x64>
    2e34:	5c c0       	rjmp	.+184    	; 0x2eee <DIO_U8TogglePinValue+0x106>
    2e36:	2c 81       	ldd	r18, Y+4	; 0x04
    2e38:	3d 81       	ldd	r19, Y+5	; 0x05
    2e3a:	22 30       	cpi	r18, 0x02	; 2
    2e3c:	31 05       	cpc	r19, r1
    2e3e:	71 f1       	breq	.+92     	; 0x2e9c <DIO_U8TogglePinValue+0xb4>
    2e40:	8c 81       	ldd	r24, Y+4	; 0x04
    2e42:	9d 81       	ldd	r25, Y+5	; 0x05
    2e44:	83 30       	cpi	r24, 0x03	; 3
    2e46:	91 05       	cpc	r25, r1
    2e48:	e9 f1       	breq	.+122    	; 0x2ec4 <DIO_U8TogglePinValue+0xdc>
    2e4a:	51 c0       	rjmp	.+162    	; 0x2eee <DIO_U8TogglePinValue+0x106>
		{
		case DIO_U8_PORTA : TOG_BIT(PORTA_REG,Copy_U8Pin);break;
    2e4c:	ab e3       	ldi	r26, 0x3B	; 59
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	eb e3       	ldi	r30, 0x3B	; 59
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <DIO_U8TogglePinValue+0x82>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <DIO_U8TogglePinValue+0x7e>
    2e6e:	84 27       	eor	r24, r20
    2e70:	8c 93       	st	X, r24
    2e72:	3d c0       	rjmp	.+122    	; 0x2eee <DIO_U8TogglePinValue+0x106>
		case DIO_U8_PORTB : TOG_BIT(PORTB_REG,Copy_U8Pin);break;
    2e74:	a8 e3       	ldi	r26, 0x38	; 56
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e8 e3       	ldi	r30, 0x38	; 56
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	48 2f       	mov	r20, r24
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	02 2e       	mov	r0, r18
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <DIO_U8TogglePinValue+0xaa>
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	0a 94       	dec	r0
    2e94:	e2 f7       	brpl	.-8      	; 0x2e8e <DIO_U8TogglePinValue+0xa6>
    2e96:	84 27       	eor	r24, r20
    2e98:	8c 93       	st	X, r24
    2e9a:	29 c0       	rjmp	.+82     	; 0x2eee <DIO_U8TogglePinValue+0x106>
		case DIO_U8_PORTC : TOG_BIT(PORTC_REG,Copy_U8Pin);break;
    2e9c:	a5 e3       	ldi	r26, 0x35	; 53
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e5 e3       	ldi	r30, 0x35	; 53
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	48 2f       	mov	r20, r24
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	02 2e       	mov	r0, r18
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <DIO_U8TogglePinValue+0xd2>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	0a 94       	dec	r0
    2ebc:	e2 f7       	brpl	.-8      	; 0x2eb6 <DIO_U8TogglePinValue+0xce>
    2ebe:	84 27       	eor	r24, r20
    2ec0:	8c 93       	st	X, r24
    2ec2:	15 c0       	rjmp	.+42     	; 0x2eee <DIO_U8TogglePinValue+0x106>
		case DIO_U8_PORTD : TOG_BIT(PORTD_REG,Copy_U8Pin);break;
    2ec4:	a2 e3       	ldi	r26, 0x32	; 50
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e2 e3       	ldi	r30, 0x32	; 50
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_U8TogglePinValue+0xfa>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <DIO_U8TogglePinValue+0xf6>
    2ee6:	84 27       	eor	r24, r20
    2ee8:	8c 93       	st	X, r24
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <DIO_U8TogglePinValue+0x106>
		}

	}
	else 
		Local_U8ErrorState = STATE_NOK;
    2eec:	19 82       	std	Y+1, r1	; 0x01
	return(Local_U8ErrorState);
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin,u8 * Copy_pu8ReturnedPinValue)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	27 97       	sbiw	r28, 0x07	; 7
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	8a 83       	std	Y+2, r24	; 0x02
    2f16:	6b 83       	std	Y+3, r22	; 0x03
    2f18:	5d 83       	std	Y+5, r21	; 0x05
    2f1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState = STATE_OK;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8Port<=DIO_U8_PORTD && Copy_U8Pin<=DIO_U8_PIN7)
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	84 30       	cpi	r24, 0x04	; 4
    2f24:	08 f0       	brcs	.+2      	; 0x2f28 <DIO_u8GetPinValue+0x28>
    2f26:	75 c0       	rjmp	.+234    	; 0x3012 <DIO_u8GetPinValue+0x112>
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	88 30       	cpi	r24, 0x08	; 8
    2f2c:	08 f0       	brcs	.+2      	; 0x2f30 <DIO_u8GetPinValue+0x30>
    2f2e:	71 c0       	rjmp	.+226    	; 0x3012 <DIO_u8GetPinValue+0x112>
	{
		switch(Copy_U8Port)
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	3f 83       	std	Y+7, r19	; 0x07
    2f38:	2e 83       	std	Y+6, r18	; 0x06
    2f3a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f3c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f3e:	41 30       	cpi	r20, 0x01	; 1
    2f40:	51 05       	cpc	r21, r1
    2f42:	59 f1       	breq	.+86     	; 0x2f9a <DIO_u8GetPinValue+0x9a>
    2f44:	8e 81       	ldd	r24, Y+6	; 0x06
    2f46:	9f 81       	ldd	r25, Y+7	; 0x07
    2f48:	82 30       	cpi	r24, 0x02	; 2
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	34 f4       	brge	.+12     	; 0x2f5a <DIO_u8GetPinValue+0x5a>
    2f4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f50:	3f 81       	ldd	r19, Y+7	; 0x07
    2f52:	21 15       	cp	r18, r1
    2f54:	31 05       	cpc	r19, r1
    2f56:	69 f0       	breq	.+26     	; 0x2f72 <DIO_u8GetPinValue+0x72>
    2f58:	5d c0       	rjmp	.+186    	; 0x3014 <DIO_u8GetPinValue+0x114>
    2f5a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f5c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f5e:	42 30       	cpi	r20, 0x02	; 2
    2f60:	51 05       	cpc	r21, r1
    2f62:	79 f1       	breq	.+94     	; 0x2fc2 <DIO_u8GetPinValue+0xc2>
    2f64:	8e 81       	ldd	r24, Y+6	; 0x06
    2f66:	9f 81       	ldd	r25, Y+7	; 0x07
    2f68:	83 30       	cpi	r24, 0x03	; 3
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <DIO_u8GetPinValue+0x70>
    2f6e:	3d c0       	rjmp	.+122    	; 0x2fea <DIO_u8GetPinValue+0xea>
    2f70:	51 c0       	rjmp	.+162    	; 0x3014 <DIO_u8GetPinValue+0x114>
		{
		;
		case DIO_U8_PORTA : * Copy_pu8ReturnedPinValue = GET_BIT(PINA_REG,Copy_U8Pin);break;
    2f72:	e9 e3       	ldi	r30, 0x39	; 57
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a9 01       	movw	r20, r18
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <DIO_u8GetPinValue+0x8a>
    2f86:	55 95       	asr	r21
    2f88:	47 95       	ror	r20
    2f8a:	8a 95       	dec	r24
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <DIO_u8GetPinValue+0x86>
    2f8e:	ca 01       	movw	r24, r20
    2f90:	81 70       	andi	r24, 0x01	; 1
    2f92:	ec 81       	ldd	r30, Y+4	; 0x04
    2f94:	fd 81       	ldd	r31, Y+5	; 0x05
    2f96:	80 83       	st	Z, r24
    2f98:	3d c0       	rjmp	.+122    	; 0x3014 <DIO_u8GetPinValue+0x114>
		case DIO_U8_PORTB : * Copy_pu8ReturnedPinValue = GET_BIT(PINB_REG,Copy_U8Pin);break;
    2f9a:	e6 e3       	ldi	r30, 0x36	; 54
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a9 01       	movw	r20, r18
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <DIO_u8GetPinValue+0xb2>
    2fae:	55 95       	asr	r21
    2fb0:	47 95       	ror	r20
    2fb2:	8a 95       	dec	r24
    2fb4:	e2 f7       	brpl	.-8      	; 0x2fae <DIO_u8GetPinValue+0xae>
    2fb6:	ca 01       	movw	r24, r20
    2fb8:	81 70       	andi	r24, 0x01	; 1
    2fba:	ec 81       	ldd	r30, Y+4	; 0x04
    2fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    2fbe:	80 83       	st	Z, r24
    2fc0:	29 c0       	rjmp	.+82     	; 0x3014 <DIO_u8GetPinValue+0x114>
		case DIO_U8_PORTC : * Copy_pu8ReturnedPinValue = GET_BIT(PINC_REG,Copy_U8Pin);break;
    2fc2:	e3 e3       	ldi	r30, 0x33	; 51
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a9 01       	movw	r20, r18
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <DIO_u8GetPinValue+0xda>
    2fd6:	55 95       	asr	r21
    2fd8:	47 95       	ror	r20
    2fda:	8a 95       	dec	r24
    2fdc:	e2 f7       	brpl	.-8      	; 0x2fd6 <DIO_u8GetPinValue+0xd6>
    2fde:	ca 01       	movw	r24, r20
    2fe0:	81 70       	andi	r24, 0x01	; 1
    2fe2:	ec 81       	ldd	r30, Y+4	; 0x04
    2fe4:	fd 81       	ldd	r31, Y+5	; 0x05
    2fe6:	80 83       	st	Z, r24
    2fe8:	15 c0       	rjmp	.+42     	; 0x3014 <DIO_u8GetPinValue+0x114>
		case DIO_U8_PORTD : * Copy_pu8ReturnedPinValue = GET_BIT(PIND_REG,Copy_U8Pin);break;
    2fea:	e0 e3       	ldi	r30, 0x30	; 48
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a9 01       	movw	r20, r18
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <DIO_u8GetPinValue+0x102>
    2ffe:	55 95       	asr	r21
    3000:	47 95       	ror	r20
    3002:	8a 95       	dec	r24
    3004:	e2 f7       	brpl	.-8      	; 0x2ffe <DIO_u8GetPinValue+0xfe>
    3006:	ca 01       	movw	r24, r20
    3008:	81 70       	andi	r24, 0x01	; 1
    300a:	ec 81       	ldd	r30, Y+4	; 0x04
    300c:	fd 81       	ldd	r31, Y+5	; 0x05
    300e:	80 83       	st	Z, r24
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <DIO_u8GetPinValue+0x114>

		}
	}
	else 
		Local_U8ErrorState = STATE_NOK;
    3012:	19 82       	std	Y+1, r1	; 0x01
	return(Local_U8ErrorState);
    3014:	89 81       	ldd	r24, Y+1	; 0x01
}
    3016:	27 96       	adiw	r28, 0x07	; 7
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <LCD_VoidInit>:
#include "LCD_private.h"
#include "LCD_interface.h"
#include "LCD_config.h"

void LCD_VoidInit(void)
{
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	6c 97       	sbiw	r28, 0x1c	; 28
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	ac e0       	ldi	r26, 0x0C	; 12
    3042:	b2 e4       	ldi	r27, 0x42	; 66
    3044:	89 8f       	std	Y+25, r24	; 0x19
    3046:	9a 8f       	std	Y+26, r25	; 0x1a
    3048:	ab 8f       	std	Y+27, r26	; 0x1b
    304a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a ef       	ldi	r20, 0xFA	; 250
    305a:	54 e4       	ldi	r21, 0x44	; 68
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	8d 8b       	std	Y+21, r24	; 0x15
    3066:	9e 8b       	std	Y+22, r25	; 0x16
    3068:	af 8b       	std	Y+23, r26	; 0x17
    306a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    306c:	6d 89       	ldd	r22, Y+21	; 0x15
    306e:	7e 89       	ldd	r23, Y+22	; 0x16
    3070:	8f 89       	ldd	r24, Y+23	; 0x17
    3072:	98 8d       	ldd	r25, Y+24	; 0x18
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3080:	88 23       	and	r24, r24
    3082:	2c f4       	brge	.+10     	; 0x308e <LCD_VoidInit+0x66>
		__ticks = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9c 8b       	std	Y+20, r25	; 0x14
    308a:	8b 8b       	std	Y+19, r24	; 0x13
    308c:	3f c0       	rjmp	.+126    	; 0x310c <LCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    308e:	6d 89       	ldd	r22, Y+21	; 0x15
    3090:	7e 89       	ldd	r23, Y+22	; 0x16
    3092:	8f 89       	ldd	r24, Y+23	; 0x17
    3094:	98 8d       	ldd	r25, Y+24	; 0x18
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	4f e7       	ldi	r20, 0x7F	; 127
    309c:	57 e4       	ldi	r21, 0x47	; 71
    309e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a2:	18 16       	cp	r1, r24
    30a4:	4c f5       	brge	.+82     	; 0x30f8 <LCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a6:	69 8d       	ldd	r22, Y+25	; 0x19
    30a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e2       	ldi	r20, 0x20	; 32
    30b4:	51 e4       	ldi	r21, 0x41	; 65
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	9c 8b       	std	Y+20, r25	; 0x14
    30cc:	8b 8b       	std	Y+19, r24	; 0x13
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <LCD_VoidInit+0xc6>
    30d0:	88 ec       	ldi	r24, 0xC8	; 200
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9a 8b       	std	Y+18, r25	; 0x12
    30d6:	89 8b       	std	Y+17, r24	; 0x11
    30d8:	89 89       	ldd	r24, Y+17	; 0x11
    30da:	9a 89       	ldd	r25, Y+18	; 0x12
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <LCD_VoidInit+0xb4>
    30e0:	9a 8b       	std	Y+18, r25	; 0x12
    30e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e4:	8b 89       	ldd	r24, Y+19	; 0x13
    30e6:	9c 89       	ldd	r25, Y+20	; 0x14
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	9c 8b       	std	Y+20, r25	; 0x14
    30ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ee:	8b 89       	ldd	r24, Y+19	; 0x13
    30f0:	9c 89       	ldd	r25, Y+20	; 0x14
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <LCD_VoidInit+0xa8>
    30f6:	14 c0       	rjmp	.+40     	; 0x3120 <LCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f8:	6d 89       	ldd	r22, Y+21	; 0x15
    30fa:	7e 89       	ldd	r23, Y+22	; 0x16
    30fc:	8f 89       	ldd	r24, Y+23	; 0x17
    30fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	9c 8b       	std	Y+20, r25	; 0x14
    310a:	8b 8b       	std	Y+19, r24	; 0x13
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	98 8b       	std	Y+16, r25	; 0x10
    3112:	8f 87       	std	Y+15, r24	; 0x0f
    3114:	8f 85       	ldd	r24, Y+15	; 0x0f
    3116:	98 89       	ldd	r25, Y+16	; 0x10
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <LCD_VoidInit+0xf0>
    311c:	98 8b       	std	Y+16, r25	; 0x10
    311e:	8f 87       	std	Y+15, r24	; 0x0f
	
#elif LCD_MODE == LCD_MODE_4_BIT

	/* LCD Power ON delay always >15ms */
	_delay_ms(35);
	LCD_VoidSendCommand(0x33);
    3120:	83 e3       	ldi	r24, 0x33	; 51
    3122:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* send for 4 bit initialization of LCD  */
	LCD_VoidSendCommand(0x32);
    3126:	82 e3       	ldi	r24, 0x32	; 50
    3128:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
	LCD_VoidSendCommand(0x28);
    312c:	88 e2       	ldi	r24, 0x28	; 40
    312e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* Display on cursor off */
	LCD_VoidSendCommand(0x0c);
    3132:	8c e0       	ldi	r24, 0x0C	; 12
    3134:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* Increment cursor (shift cursor to right) */
	LCD_VoidSendCommand(0x06);
    3138:	86 e0       	ldi	r24, 0x06	; 6
    313a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* Clear display screen*/
	LCD_VoidSendCommand(0x01);
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a0 e0       	ldi	r26, 0x00	; 0
    314a:	b0 e4       	ldi	r27, 0x40	; 64
    314c:	8b 87       	std	Y+11, r24	; 0x0b
    314e:	9c 87       	std	Y+12, r25	; 0x0c
    3150:	ad 87       	std	Y+13, r26	; 0x0d
    3152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3154:	6b 85       	ldd	r22, Y+11	; 0x0b
    3156:	7c 85       	ldd	r23, Y+12	; 0x0c
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a ef       	ldi	r20, 0xFA	; 250
    3162:	54 e4       	ldi	r21, 0x44	; 68
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8f 83       	std	Y+7, r24	; 0x07
    316e:	98 87       	std	Y+8, r25	; 0x08
    3170:	a9 87       	std	Y+9, r26	; 0x09
    3172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	5f e3       	ldi	r21, 0x3F	; 63
    3184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3188:	88 23       	and	r24, r24
    318a:	2c f4       	brge	.+10     	; 0x3196 <LCD_VoidInit+0x16e>
		__ticks = 1;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <LCD_VoidInit+0x1ec>
	else if (__tmp > 65535)
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	4f e7       	ldi	r20, 0x7F	; 127
    31a4:	57 e4       	ldi	r21, 0x47	; 71
    31a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31aa:	18 16       	cp	r1, r24
    31ac:	4c f5       	brge	.+82     	; 0x3200 <LCD_VoidInit+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <LCD_VoidInit+0x1ce>
    31d8:	88 ec       	ldi	r24, 0xC8	; 200
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9c 83       	std	Y+4, r25	; 0x04
    31de:	8b 83       	std	Y+3, r24	; 0x03
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <LCD_VoidInit+0x1bc>
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	69 f7       	brne	.-38     	; 0x31d8 <LCD_VoidInit+0x1b0>
    31fe:	14 c0       	rjmp	.+40     	; 0x3228 <LCD_VoidInit+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <LCD_VoidInit+0x1f8>
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VoidSendCommand (0x80);
    3228:	80 e8       	ldi	r24, 0x80	; 128
    322a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
	/* End Of Init */
#endif	
}
    322e:	6c 96       	adiw	r28, 0x1c	; 28
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <LCD_VoidSendChar>:
void LCD_VoidSendChar (u8 Copy_U8Char)
{
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	c7 55       	subi	r28, 0x57	; 87
    324e:	d0 40       	sbci	r29, 0x00	; 0
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	fe 01       	movw	r30, r28
    325c:	e9 5a       	subi	r30, 0xA9	; 169
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 83       	st	Z, r24
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
	
#elif LCD_MODE == LCD_MODE_4_BIT
	/* Rs = 1 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_RS_PIN,DIO_U8_HIGH);
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
	/* Rw = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_RW_PIN,DIO_U8_LOW);
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	61 e0       	ldi	r22, 0x01	; 1
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
	/* Write On Char */
	DIO_U8SetPortValue(LCD_U8_PORT_DATA,Copy_U8Char);
    3276:	fe 01       	movw	r30, r28
    3278:	e9 5a       	subi	r30, 0xA9	; 169
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	60 81       	ld	r22, Z
    3280:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <DIO_U8SetPortValue>
	/* Enable = 1 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_HIGH);
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	62 e0       	ldi	r22, 0x02	; 2
    3288:	41 e0       	ldi	r20, 0x01	; 1
    328a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    328e:	fe 01       	movw	r30, r28
    3290:	ed 5a       	subi	r30, 0xAD	; 173
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a0 e8       	ldi	r26, 0x80	; 128
    329a:	bf e3       	ldi	r27, 0x3F	; 63
    329c:	80 83       	st	Z, r24
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	a2 83       	std	Z+2, r26	; 0x02
    32a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32a4:	8e 01       	movw	r16, r28
    32a6:	01 5b       	subi	r16, 0xB1	; 177
    32a8:	1f 4f       	sbci	r17, 0xFF	; 255
    32aa:	fe 01       	movw	r30, r28
    32ac:	ed 5a       	subi	r30, 0xAD	; 173
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	60 81       	ld	r22, Z
    32b2:	71 81       	ldd	r23, Z+1	; 0x01
    32b4:	82 81       	ldd	r24, Z+2	; 0x02
    32b6:	93 81       	ldd	r25, Z+3	; 0x03
    32b8:	2b ea       	ldi	r18, 0xAB	; 171
    32ba:	3a ea       	ldi	r19, 0xAA	; 170
    32bc:	4a e2       	ldi	r20, 0x2A	; 42
    32be:	50 e4       	ldi	r21, 0x40	; 64
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	f8 01       	movw	r30, r16
    32ca:	80 83       	st	Z, r24
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	a2 83       	std	Z+2, r26	; 0x02
    32d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d2:	fe 01       	movw	r30, r28
    32d4:	e1 5b       	subi	r30, 0xB1	; 177
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	60 81       	ld	r22, Z
    32da:	71 81       	ldd	r23, Z+1	; 0x01
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	34 f4       	brge	.+12     	; 0x32fc <LCD_VoidSendChar+0xbc>
		__ticks = 1;
    32f0:	fe 01       	movw	r30, r28
    32f2:	e2 5b       	subi	r30, 0xB2	; 178
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 83       	st	Z, r24
    32fa:	e0 c0       	rjmp	.+448    	; 0x34bc <LCD_VoidSendChar+0x27c>
	else if (__tmp > 255)
    32fc:	fe 01       	movw	r30, r28
    32fe:	e1 5b       	subi	r30, 0xB1	; 177
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	60 81       	ld	r22, Z
    3304:	71 81       	ldd	r23, Z+1	; 0x01
    3306:	82 81       	ldd	r24, Z+2	; 0x02
    3308:	93 81       	ldd	r25, Z+3	; 0x03
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	4f e7       	ldi	r20, 0x7F	; 127
    3310:	53 e4       	ldi	r21, 0x43	; 67
    3312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3316:	18 16       	cp	r1, r24
    3318:	0c f0       	brlt	.+2      	; 0x331c <LCD_VoidSendChar+0xdc>
    331a:	c0 c0       	rjmp	.+384    	; 0x349c <LCD_VoidSendChar+0x25c>
	{
		_delay_ms(__us / 1000.0);
    331c:	fe 01       	movw	r30, r28
    331e:	ed 5a       	subi	r30, 0xAD	; 173
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a e7       	ldi	r20, 0x7A	; 122
    3330:	54 e4       	ldi	r21, 0x44	; 68
    3332:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	fe 01       	movw	r30, r28
    333c:	e6 5b       	subi	r30, 0xB6	; 182
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 83       	st	Z, r24
    3342:	91 83       	std	Z+1, r25	; 0x01
    3344:	a2 83       	std	Z+2, r26	; 0x02
    3346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3348:	8e 01       	movw	r16, r28
    334a:	0a 5b       	subi	r16, 0xBA	; 186
    334c:	1f 4f       	sbci	r17, 0xFF	; 255
    334e:	fe 01       	movw	r30, r28
    3350:	e6 5b       	subi	r30, 0xB6	; 182
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a ef       	ldi	r20, 0xFA	; 250
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	f8 01       	movw	r30, r16
    336e:	80 83       	st	Z, r24
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	a2 83       	std	Z+2, r26	; 0x02
    3374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3376:	fe 01       	movw	r30, r28
    3378:	ea 5b       	subi	r30, 0xBA	; 186
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e8       	ldi	r20, 0x80	; 128
    338a:	5f e3       	ldi	r21, 0x3F	; 63
    338c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3390:	88 23       	and	r24, r24
    3392:	44 f4       	brge	.+16     	; 0x33a4 <LCD_VoidSendChar+0x164>
		__ticks = 1;
    3394:	fe 01       	movw	r30, r28
    3396:	ec 5b       	subi	r30, 0xBC	; 188
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	64 c0       	rjmp	.+200    	; 0x346c <LCD_VoidSendChar+0x22c>
	else if (__tmp > 65535)
    33a4:	fe 01       	movw	r30, r28
    33a6:	ea 5b       	subi	r30, 0xBA	; 186
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	4f e7       	ldi	r20, 0x7F	; 127
    33b8:	57 e4       	ldi	r21, 0x47	; 71
    33ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33be:	18 16       	cp	r1, r24
    33c0:	0c f0       	brlt	.+2      	; 0x33c4 <LCD_VoidSendChar+0x184>
    33c2:	43 c0       	rjmp	.+134    	; 0x344a <LCD_VoidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c4:	fe 01       	movw	r30, r28
    33c6:	e6 5b       	subi	r30, 0xB6	; 182
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e2       	ldi	r20, 0x20	; 32
    33d8:	51 e4       	ldi	r21, 0x41	; 65
    33da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	8e 01       	movw	r16, r28
    33e4:	0c 5b       	subi	r16, 0xBC	; 188
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	f8 01       	movw	r30, r16
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	1f c0       	rjmp	.+62     	; 0x343a <LCD_VoidSendChar+0x1fa>
    33fc:	fe 01       	movw	r30, r28
    33fe:	ee 5b       	subi	r30, 0xBE	; 190
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	88 ec       	ldi	r24, 0xC8	; 200
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 83       	st	Z, r24
    340a:	fe 01       	movw	r30, r28
    340c:	ee 5b       	subi	r30, 0xBE	; 190
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <LCD_VoidSendChar+0x1d4>
    3418:	fe 01       	movw	r30, r28
    341a:	ee 5b       	subi	r30, 0xBE	; 190
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	de 01       	movw	r26, r28
    3424:	ac 5b       	subi	r26, 0xBC	; 188
    3426:	bf 4f       	sbci	r27, 0xFF	; 255
    3428:	fe 01       	movw	r30, r28
    342a:	ec 5b       	subi	r30, 0xBC	; 188
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	11 96       	adiw	r26, 0x01	; 1
    3436:	9c 93       	st	X, r25
    3438:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343a:	fe 01       	movw	r30, r28
    343c:	ec 5b       	subi	r30, 0xBC	; 188
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	d1 f6       	brne	.-76     	; 0x33fc <LCD_VoidSendChar+0x1bc>
    3448:	42 c0       	rjmp	.+132    	; 0x34ce <LCD_VoidSendChar+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344a:	8e 01       	movw	r16, r28
    344c:	0c 5b       	subi	r16, 0xBC	; 188
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	fe 01       	movw	r30, r28
    3452:	ea 5b       	subi	r30, 0xBA	; 186
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	82 81       	ldd	r24, Z+2	; 0x02
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	f8 01       	movw	r30, r16
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	80 83       	st	Z, r24
    346c:	de 01       	movw	r26, r28
    346e:	a0 5c       	subi	r26, 0xC0	; 192
    3470:	bf 4f       	sbci	r27, 0xFF	; 255
    3472:	fe 01       	movw	r30, r28
    3474:	ec 5b       	subi	r30, 0xBC	; 188
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	9c 93       	st	X, r25
    3480:	8e 93       	st	-X, r24
    3482:	fe 01       	movw	r30, r28
    3484:	e0 5c       	subi	r30, 0xC0	; 192
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <LCD_VoidSendChar+0x24c>
    3490:	fe 01       	movw	r30, r28
    3492:	e0 5c       	subi	r30, 0xC0	; 192
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
    349a:	19 c0       	rjmp	.+50     	; 0x34ce <LCD_VoidSendChar+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    349c:	8e 01       	movw	r16, r28
    349e:	02 5b       	subi	r16, 0xB2	; 178
    34a0:	1f 4f       	sbci	r17, 0xFF	; 255
    34a2:	fe 01       	movw	r30, r28
    34a4:	e1 5b       	subi	r30, 0xB1	; 177
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	f8 01       	movw	r30, r16
    34ba:	80 83       	st	Z, r24
    34bc:	fe 01       	movw	r30, r28
    34be:	e2 5b       	subi	r30, 0xB2	; 178
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 81       	ld	r24, Z
    34c4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    34c8:	8a 95       	dec	r24
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <LCD_VoidSendChar+0x288>
    34cc:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	62 e0       	ldi	r22, 0x02	; 2
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	a8 e4       	ldi	r26, 0x48	; 72
    34de:	b3 e4       	ldi	r27, 0x43	; 67
    34e0:	8b af       	std	Y+59, r24	; 0x3b
    34e2:	9c af       	std	Y+60, r25	; 0x3c
    34e4:	ad af       	std	Y+61, r26	; 0x3d
    34e6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    34ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    34ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    34f0:	2b ea       	ldi	r18, 0xAB	; 171
    34f2:	3a ea       	ldi	r19, 0xAA	; 170
    34f4:	4a e2       	ldi	r20, 0x2A	; 42
    34f6:	50 e4       	ldi	r21, 0x40	; 64
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8f ab       	std	Y+55, r24	; 0x37
    3502:	98 af       	std	Y+56, r25	; 0x38
    3504:	a9 af       	std	Y+57, r26	; 0x39
    3506:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3508:	6f a9       	ldd	r22, Y+55	; 0x37
    350a:	78 ad       	ldd	r23, Y+56	; 0x38
    350c:	89 ad       	ldd	r24, Y+57	; 0x39
    350e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e8       	ldi	r20, 0x80	; 128
    3516:	5f e3       	ldi	r21, 0x3F	; 63
    3518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    351c:	88 23       	and	r24, r24
    351e:	1c f4       	brge	.+6      	; 0x3526 <LCD_VoidSendChar+0x2e6>
		__ticks = 1;
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	8e ab       	std	Y+54, r24	; 0x36
    3524:	91 c0       	rjmp	.+290    	; 0x3648 <LCD_VoidSendChar+0x408>
	else if (__tmp > 255)
    3526:	6f a9       	ldd	r22, Y+55	; 0x37
    3528:	78 ad       	ldd	r23, Y+56	; 0x38
    352a:	89 ad       	ldd	r24, Y+57	; 0x39
    352c:	9a ad       	ldd	r25, Y+58	; 0x3a
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4f e7       	ldi	r20, 0x7F	; 127
    3534:	53 e4       	ldi	r21, 0x43	; 67
    3536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    353a:	18 16       	cp	r1, r24
    353c:	0c f0       	brlt	.+2      	; 0x3540 <LCD_VoidSendChar+0x300>
    353e:	7b c0       	rjmp	.+246    	; 0x3636 <LCD_VoidSendChar+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    3540:	6b ad       	ldd	r22, Y+59	; 0x3b
    3542:	7c ad       	ldd	r23, Y+60	; 0x3c
    3544:	8d ad       	ldd	r24, Y+61	; 0x3d
    3546:	9e ad       	ldd	r25, Y+62	; 0x3e
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4a e7       	ldi	r20, 0x7A	; 122
    354e:	54 e4       	ldi	r21, 0x44	; 68
    3550:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	8a ab       	std	Y+50, r24	; 0x32
    355a:	9b ab       	std	Y+51, r25	; 0x33
    355c:	ac ab       	std	Y+52, r26	; 0x34
    355e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3560:	6a a9       	ldd	r22, Y+50	; 0x32
    3562:	7b a9       	ldd	r23, Y+51	; 0x33
    3564:	8c a9       	ldd	r24, Y+52	; 0x34
    3566:	9d a9       	ldd	r25, Y+53	; 0x35
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	4a ef       	ldi	r20, 0xFA	; 250
    356e:	54 e4       	ldi	r21, 0x44	; 68
    3570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	8e a7       	std	Y+46, r24	; 0x2e
    357a:	9f a7       	std	Y+47, r25	; 0x2f
    357c:	a8 ab       	std	Y+48, r26	; 0x30
    357e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3580:	6e a5       	ldd	r22, Y+46	; 0x2e
    3582:	7f a5       	ldd	r23, Y+47	; 0x2f
    3584:	88 a9       	ldd	r24, Y+48	; 0x30
    3586:	99 a9       	ldd	r25, Y+49	; 0x31
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3594:	88 23       	and	r24, r24
    3596:	2c f4       	brge	.+10     	; 0x35a2 <LCD_VoidSendChar+0x362>
		__ticks = 1;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9d a7       	std	Y+45, r25	; 0x2d
    359e:	8c a7       	std	Y+44, r24	; 0x2c
    35a0:	3f c0       	rjmp	.+126    	; 0x3620 <LCD_VoidSendChar+0x3e0>
	else if (__tmp > 65535)
    35a2:	6e a5       	ldd	r22, Y+46	; 0x2e
    35a4:	7f a5       	ldd	r23, Y+47	; 0x2f
    35a6:	88 a9       	ldd	r24, Y+48	; 0x30
    35a8:	99 a9       	ldd	r25, Y+49	; 0x31
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	3f ef       	ldi	r19, 0xFF	; 255
    35ae:	4f e7       	ldi	r20, 0x7F	; 127
    35b0:	57 e4       	ldi	r21, 0x47	; 71
    35b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b6:	18 16       	cp	r1, r24
    35b8:	4c f5       	brge	.+82     	; 0x360c <LCD_VoidSendChar+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ba:	6a a9       	ldd	r22, Y+50	; 0x32
    35bc:	7b a9       	ldd	r23, Y+51	; 0x33
    35be:	8c a9       	ldd	r24, Y+52	; 0x34
    35c0:	9d a9       	ldd	r25, Y+53	; 0x35
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	bc 01       	movw	r22, r24
    35d4:	cd 01       	movw	r24, r26
    35d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9d a7       	std	Y+45, r25	; 0x2d
    35e0:	8c a7       	std	Y+44, r24	; 0x2c
    35e2:	0f c0       	rjmp	.+30     	; 0x3602 <LCD_VoidSendChar+0x3c2>
    35e4:	88 ec       	ldi	r24, 0xC8	; 200
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	9b a7       	std	Y+43, r25	; 0x2b
    35ea:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ec:	8a a5       	ldd	r24, Y+42	; 0x2a
    35ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <LCD_VoidSendChar+0x3b0>
    35f4:	9b a7       	std	Y+43, r25	; 0x2b
    35f6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    35fa:	9d a5       	ldd	r25, Y+45	; 0x2d
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	9d a7       	std	Y+45, r25	; 0x2d
    3600:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3602:	8c a5       	ldd	r24, Y+44	; 0x2c
    3604:	9d a5       	ldd	r25, Y+45	; 0x2d
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	69 f7       	brne	.-38     	; 0x35e4 <LCD_VoidSendChar+0x3a4>
    360a:	24 c0       	rjmp	.+72     	; 0x3654 <LCD_VoidSendChar+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360c:	6e a5       	ldd	r22, Y+46	; 0x2e
    360e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3610:	88 a9       	ldd	r24, Y+48	; 0x30
    3612:	99 a9       	ldd	r25, Y+49	; 0x31
    3614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	9d a7       	std	Y+45, r25	; 0x2d
    361e:	8c a7       	std	Y+44, r24	; 0x2c
    3620:	8c a5       	ldd	r24, Y+44	; 0x2c
    3622:	9d a5       	ldd	r25, Y+45	; 0x2d
    3624:	99 a7       	std	Y+41, r25	; 0x29
    3626:	88 a7       	std	Y+40, r24	; 0x28
    3628:	88 a5       	ldd	r24, Y+40	; 0x28
    362a:	99 a5       	ldd	r25, Y+41	; 0x29
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <LCD_VoidSendChar+0x3ec>
    3630:	99 a7       	std	Y+41, r25	; 0x29
    3632:	88 a7       	std	Y+40, r24	; 0x28
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <LCD_VoidSendChar+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3636:	6f a9       	ldd	r22, Y+55	; 0x37
    3638:	78 ad       	ldd	r23, Y+56	; 0x38
    363a:	89 ad       	ldd	r24, Y+57	; 0x39
    363c:	9a ad       	ldd	r25, Y+58	; 0x3a
    363e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	8e ab       	std	Y+54, r24	; 0x36
    3648:	8e a9       	ldd	r24, Y+54	; 0x36
    364a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    364c:	8f a1       	ldd	r24, Y+39	; 0x27
    364e:	8a 95       	dec	r24
    3650:	f1 f7       	brne	.-4      	; 0x364e <LCD_VoidSendChar+0x40e>
    3652:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Char Least Signifit */
	DIO_U8SetPortValue(LCD_U8_PORT_DATA,(Copy_U8Char << 4));
    3654:	fe 01       	movw	r30, r28
    3656:	e9 5a       	subi	r30, 0xA9	; 169
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 81       	ld	r24, Z
    365c:	98 2f       	mov	r25, r24
    365e:	92 95       	swap	r25
    3660:	90 7f       	andi	r25, 0xF0	; 240
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	69 2f       	mov	r22, r25
    3666:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <DIO_U8SetPortValue>
	/* Enable = 1 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_HIGH);
    366a:	82 e0       	ldi	r24, 0x02	; 2
    366c:	62 e0       	ldi	r22, 0x02	; 2
    366e:	41 e0       	ldi	r20, 0x01	; 1
    3670:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	a0 e8       	ldi	r26, 0x80	; 128
    367a:	bf e3       	ldi	r27, 0x3F	; 63
    367c:	8b a3       	std	Y+35, r24	; 0x23
    367e:	9c a3       	std	Y+36, r25	; 0x24
    3680:	ad a3       	std	Y+37, r26	; 0x25
    3682:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3684:	6b a1       	ldd	r22, Y+35	; 0x23
    3686:	7c a1       	ldd	r23, Y+36	; 0x24
    3688:	8d a1       	ldd	r24, Y+37	; 0x25
    368a:	9e a1       	ldd	r25, Y+38	; 0x26
    368c:	2b ea       	ldi	r18, 0xAB	; 171
    368e:	3a ea       	ldi	r19, 0xAA	; 170
    3690:	4a e2       	ldi	r20, 0x2A	; 42
    3692:	50 e4       	ldi	r21, 0x40	; 64
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	8f 8f       	std	Y+31, r24	; 0x1f
    369e:	98 a3       	std	Y+32, r25	; 0x20
    36a0:	a9 a3       	std	Y+33, r26	; 0x21
    36a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    36a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36a6:	78 a1       	ldd	r23, Y+32	; 0x20
    36a8:	89 a1       	ldd	r24, Y+33	; 0x21
    36aa:	9a a1       	ldd	r25, Y+34	; 0x22
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	1c f4       	brge	.+6      	; 0x36c2 <LCD_VoidSendChar+0x482>
		__ticks = 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	8e 8f       	std	Y+30, r24	; 0x1e
    36c0:	91 c0       	rjmp	.+290    	; 0x37e4 <LCD_VoidSendChar+0x5a4>
	else if (__tmp > 255)
    36c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36c4:	78 a1       	ldd	r23, Y+32	; 0x20
    36c6:	89 a1       	ldd	r24, Y+33	; 0x21
    36c8:	9a a1       	ldd	r25, Y+34	; 0x22
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	4f e7       	ldi	r20, 0x7F	; 127
    36d0:	53 e4       	ldi	r21, 0x43	; 67
    36d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d6:	18 16       	cp	r1, r24
    36d8:	0c f0       	brlt	.+2      	; 0x36dc <LCD_VoidSendChar+0x49c>
    36da:	7b c0       	rjmp	.+246    	; 0x37d2 <LCD_VoidSendChar+0x592>
	{
		_delay_ms(__us / 1000.0);
    36dc:	6b a1       	ldd	r22, Y+35	; 0x23
    36de:	7c a1       	ldd	r23, Y+36	; 0x24
    36e0:	8d a1       	ldd	r24, Y+37	; 0x25
    36e2:	9e a1       	ldd	r25, Y+38	; 0x26
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a e7       	ldi	r20, 0x7A	; 122
    36ea:	54 e4       	ldi	r21, 0x44	; 68
    36ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8a 8f       	std	Y+26, r24	; 0x1a
    36f6:	9b 8f       	std	Y+27, r25	; 0x1b
    36f8:	ac 8f       	std	Y+28, r26	; 0x1c
    36fa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    36fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3700:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3702:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8e 8b       	std	Y+22, r24	; 0x16
    3716:	9f 8b       	std	Y+23, r25	; 0x17
    3718:	a8 8f       	std	Y+24, r26	; 0x18
    371a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    371c:	6e 89       	ldd	r22, Y+22	; 0x16
    371e:	7f 89       	ldd	r23, Y+23	; 0x17
    3720:	88 8d       	ldd	r24, Y+24	; 0x18
    3722:	99 8d       	ldd	r25, Y+25	; 0x19
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <LCD_VoidSendChar+0x4fe>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9d 8b       	std	Y+21, r25	; 0x15
    373a:	8c 8b       	std	Y+20, r24	; 0x14
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <LCD_VoidSendChar+0x57c>
	else if (__tmp > 65535)
    373e:	6e 89       	ldd	r22, Y+22	; 0x16
    3740:	7f 89       	ldd	r23, Y+23	; 0x17
    3742:	88 8d       	ldd	r24, Y+24	; 0x18
    3744:	99 8d       	ldd	r25, Y+25	; 0x19
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <LCD_VoidSendChar+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3758:	7b 8d       	ldd	r23, Y+27	; 0x1b
    375a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    375c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9d 8b       	std	Y+21, r25	; 0x15
    377c:	8c 8b       	std	Y+20, r24	; 0x14
    377e:	0f c0       	rjmp	.+30     	; 0x379e <LCD_VoidSendChar+0x55e>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9b 8b       	std	Y+19, r25	; 0x13
    3786:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3788:	8a 89       	ldd	r24, Y+18	; 0x12
    378a:	9b 89       	ldd	r25, Y+19	; 0x13
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <LCD_VoidSendChar+0x54c>
    3790:	9b 8b       	std	Y+19, r25	; 0x13
    3792:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8c 89       	ldd	r24, Y+20	; 0x14
    3796:	9d 89       	ldd	r25, Y+21	; 0x15
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9d 8b       	std	Y+21, r25	; 0x15
    379c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8c 89       	ldd	r24, Y+20	; 0x14
    37a0:	9d 89       	ldd	r25, Y+21	; 0x15
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <LCD_VoidSendChar+0x540>
    37a6:	24 c0       	rjmp	.+72     	; 0x37f0 <LCD_VoidSendChar+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6e 89       	ldd	r22, Y+22	; 0x16
    37aa:	7f 89       	ldd	r23, Y+23	; 0x17
    37ac:	88 8d       	ldd	r24, Y+24	; 0x18
    37ae:	99 8d       	ldd	r25, Y+25	; 0x19
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9d 8b       	std	Y+21, r25	; 0x15
    37ba:	8c 8b       	std	Y+20, r24	; 0x14
    37bc:	8c 89       	ldd	r24, Y+20	; 0x14
    37be:	9d 89       	ldd	r25, Y+21	; 0x15
    37c0:	99 8b       	std	Y+17, r25	; 0x11
    37c2:	88 8b       	std	Y+16, r24	; 0x10
    37c4:	88 89       	ldd	r24, Y+16	; 0x10
    37c6:	99 89       	ldd	r25, Y+17	; 0x11
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <LCD_VoidSendChar+0x588>
    37cc:	99 8b       	std	Y+17, r25	; 0x11
    37ce:	88 8b       	std	Y+16, r24	; 0x10
    37d0:	0f c0       	rjmp	.+30     	; 0x37f0 <LCD_VoidSendChar+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37d4:	78 a1       	ldd	r23, Y+32	; 0x20
    37d6:	89 a1       	ldd	r24, Y+33	; 0x21
    37d8:	9a a1       	ldd	r25, Y+34	; 0x22
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	8e 8f       	std	Y+30, r24	; 0x1e
    37e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37e6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ea:	8a 95       	dec	r24
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <LCD_VoidSendChar+0x5aa>
    37ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	62 e0       	ldi	r22, 0x02	; 2
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	a0 e0       	ldi	r26, 0x00	; 0
    3800:	b0 e4       	ldi	r27, 0x40	; 64
    3802:	8b 87       	std	Y+11, r24	; 0x0b
    3804:	9c 87       	std	Y+12, r25	; 0x0c
    3806:	ad 87       	std	Y+13, r26	; 0x0d
    3808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380a:	6b 85       	ldd	r22, Y+11	; 0x0b
    380c:	7c 85       	ldd	r23, Y+12	; 0x0c
    380e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3810:	9e 85       	ldd	r25, Y+14	; 0x0e
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	4a ef       	ldi	r20, 0xFA	; 250
    3818:	54 e4       	ldi	r21, 0x44	; 68
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	a9 87       	std	Y+9, r26	; 0x09
    3828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e8       	ldi	r20, 0x80	; 128
    3838:	5f e3       	ldi	r21, 0x3F	; 63
    383a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383e:	88 23       	and	r24, r24
    3840:	2c f4       	brge	.+10     	; 0x384c <LCD_VoidSendChar+0x60c>
		__ticks = 1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	3f c0       	rjmp	.+126    	; 0x38ca <LCD_VoidSendChar+0x68a>
	else if (__tmp > 65535)
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	3f ef       	ldi	r19, 0xFF	; 255
    3858:	4f e7       	ldi	r20, 0x7F	; 127
    385a:	57 e4       	ldi	r21, 0x47	; 71
    385c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3860:	18 16       	cp	r1, r24
    3862:	4c f5       	brge	.+82     	; 0x38b6 <LCD_VoidSendChar+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <LCD_VoidSendChar+0x66c>
    388e:	88 ec       	ldi	r24, 0xC8	; 200
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9c 83       	std	Y+4, r25	; 0x04
    3894:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <LCD_VoidSendChar+0x65a>
    389e:	9c 83       	std	Y+4, r25	; 0x04
    38a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	69 f7       	brne	.-38     	; 0x388e <LCD_VoidSendChar+0x64e>
    38b4:	14 c0       	rjmp	.+40     	; 0x38de <LCD_VoidSendChar+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b6:	6f 81       	ldd	r22, Y+7	; 0x07
    38b8:	78 85       	ldd	r23, Y+8	; 0x08
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <LCD_VoidSendChar+0x696>
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    38de:	c9 5a       	subi	r28, 0xA9	; 169
    38e0:	df 4f       	sbci	r29, 0xFF	; 255
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	cf 91       	pop	r28
    38ee:	df 91       	pop	r29
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	08 95       	ret

000038f6 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 Copy_U8Command)
{
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	c7 55       	subi	r28, 0x57	; 87
    3904:	d0 40       	sbci	r29, 0x00	; 0
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	fe 01       	movw	r30, r28
    3912:	e9 5a       	subi	r30, 0xA9	; 169
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 83       	st	Z, r24
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
	
#elif LCD_MODE == LCD_MODE_4_BIT
	/* Rs = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_RS_PIN,DIO_U8_LOW);
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
	/* Rw = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_RW_PIN,DIO_U8_LOW);
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	40 e0       	ldi	r20, 0x00	; 0
    3928:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
	/* Sending Upper Nibble On Command */
	DIO_U8SetPortValue(LCD_U8_PORT_DATA,Copy_U8Command);
    392c:	fe 01       	movw	r30, r28
    392e:	e9 5a       	subi	r30, 0xA9	; 169
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	60 81       	ld	r22, Z
    3936:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <DIO_U8SetPortValue>
	/* Enable = 1 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_HIGH);
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	62 e0       	ldi	r22, 0x02	; 2
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    3944:	fe 01       	movw	r30, r28
    3946:	ed 5a       	subi	r30, 0xAD	; 173
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	a0 e8       	ldi	r26, 0x80	; 128
    3950:	bf e3       	ldi	r27, 0x3F	; 63
    3952:	80 83       	st	Z, r24
    3954:	91 83       	std	Z+1, r25	; 0x01
    3956:	a2 83       	std	Z+2, r26	; 0x02
    3958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    395a:	8e 01       	movw	r16, r28
    395c:	01 5b       	subi	r16, 0xB1	; 177
    395e:	1f 4f       	sbci	r17, 0xFF	; 255
    3960:	fe 01       	movw	r30, r28
    3962:	ed 5a       	subi	r30, 0xAD	; 173
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	2b ea       	ldi	r18, 0xAB	; 171
    3970:	3a ea       	ldi	r19, 0xAA	; 170
    3972:	4a e2       	ldi	r20, 0x2A	; 42
    3974:	50 e4       	ldi	r21, 0x40	; 64
    3976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	f8 01       	movw	r30, r16
    3980:	80 83       	st	Z, r24
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	a2 83       	std	Z+2, r26	; 0x02
    3986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3988:	fe 01       	movw	r30, r28
    398a:	e1 5b       	subi	r30, 0xB1	; 177
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	40 e8       	ldi	r20, 0x80	; 128
    399c:	5f e3       	ldi	r21, 0x3F	; 63
    399e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a2:	88 23       	and	r24, r24
    39a4:	34 f4       	brge	.+12     	; 0x39b2 <LCD_VoidSendCommand+0xbc>
		__ticks = 1;
    39a6:	fe 01       	movw	r30, r28
    39a8:	e2 5b       	subi	r30, 0xB2	; 178
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	80 83       	st	Z, r24
    39b0:	e0 c0       	rjmp	.+448    	; 0x3b72 <LCD_VoidSendCommand+0x27c>
	else if (__tmp > 255)
    39b2:	fe 01       	movw	r30, r28
    39b4:	e1 5b       	subi	r30, 0xB1	; 177
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	60 81       	ld	r22, Z
    39ba:	71 81       	ldd	r23, Z+1	; 0x01
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	93 81       	ldd	r25, Z+3	; 0x03
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4f e7       	ldi	r20, 0x7F	; 127
    39c6:	53 e4       	ldi	r21, 0x43	; 67
    39c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39cc:	18 16       	cp	r1, r24
    39ce:	0c f0       	brlt	.+2      	; 0x39d2 <LCD_VoidSendCommand+0xdc>
    39d0:	c0 c0       	rjmp	.+384    	; 0x3b52 <LCD_VoidSendCommand+0x25c>
	{
		_delay_ms(__us / 1000.0);
    39d2:	fe 01       	movw	r30, r28
    39d4:	ed 5a       	subi	r30, 0xAD	; 173
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a e7       	ldi	r20, 0x7A	; 122
    39e6:	54 e4       	ldi	r21, 0x44	; 68
    39e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	fe 01       	movw	r30, r28
    39f2:	e6 5b       	subi	r30, 0xB6	; 182
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 83       	st	Z, r24
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	a2 83       	std	Z+2, r26	; 0x02
    39fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fe:	8e 01       	movw	r16, r28
    3a00:	0a 5b       	subi	r16, 0xBA	; 186
    3a02:	1f 4f       	sbci	r17, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	e6 5b       	subi	r30, 0xB6	; 182
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	60 81       	ld	r22, Z
    3a0c:	71 81       	ldd	r23, Z+1	; 0x01
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a ef       	ldi	r20, 0xFA	; 250
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	80 83       	st	Z, r24
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	a2 83       	std	Z+2, r26	; 0x02
    3a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ea 5b       	subi	r30, 0xBA	; 186
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e8       	ldi	r20, 0x80	; 128
    3a40:	5f e3       	ldi	r21, 0x3F	; 63
    3a42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a46:	88 23       	and	r24, r24
    3a48:	44 f4       	brge	.+16     	; 0x3a5a <LCD_VoidSendCommand+0x164>
		__ticks = 1;
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ec 5b       	subi	r30, 0xBC	; 188
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	91 83       	std	Z+1, r25	; 0x01
    3a56:	80 83       	st	Z, r24
    3a58:	64 c0       	rjmp	.+200    	; 0x3b22 <LCD_VoidSendCommand+0x22c>
	else if (__tmp > 65535)
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	ea 5b       	subi	r30, 0xBA	; 186
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	3f ef       	ldi	r19, 0xFF	; 255
    3a6c:	4f e7       	ldi	r20, 0x7F	; 127
    3a6e:	57 e4       	ldi	r21, 0x47	; 71
    3a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a74:	18 16       	cp	r1, r24
    3a76:	0c f0       	brlt	.+2      	; 0x3a7a <LCD_VoidSendCommand+0x184>
    3a78:	43 c0       	rjmp	.+134    	; 0x3b00 <LCD_VoidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e6 5b       	subi	r30, 0xB6	; 182
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8e 01       	movw	r16, r28
    3a9a:	0c 5b       	subi	r16, 0xBC	; 188
    3a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	f8 01       	movw	r30, r16
    3aac:	91 83       	std	Z+1, r25	; 0x01
    3aae:	80 83       	st	Z, r24
    3ab0:	1f c0       	rjmp	.+62     	; 0x3af0 <LCD_VoidSendCommand+0x1fa>
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	ee 5b       	subi	r30, 0xBE	; 190
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	88 ec       	ldi	r24, 0xC8	; 200
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	80 83       	st	Z, r24
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ee 5b       	subi	r30, 0xBE	; 190
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <LCD_VoidSendCommand+0x1d4>
    3ace:	fe 01       	movw	r30, r28
    3ad0:	ee 5b       	subi	r30, 0xBE	; 190
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad8:	de 01       	movw	r26, r28
    3ada:	ac 5b       	subi	r26, 0xBC	; 188
    3adc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ade:	fe 01       	movw	r30, r28
    3ae0:	ec 5b       	subi	r30, 0xBC	; 188
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	11 96       	adiw	r26, 0x01	; 1
    3aec:	9c 93       	st	X, r25
    3aee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af0:	fe 01       	movw	r30, r28
    3af2:	ec 5b       	subi	r30, 0xBC	; 188
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	d1 f6       	brne	.-76     	; 0x3ab2 <LCD_VoidSendCommand+0x1bc>
    3afe:	42 c0       	rjmp	.+132    	; 0x3b84 <LCD_VoidSendCommand+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b00:	8e 01       	movw	r16, r28
    3b02:	0c 5b       	subi	r16, 0xBC	; 188
    3b04:	1f 4f       	sbci	r17, 0xFF	; 255
    3b06:	fe 01       	movw	r30, r28
    3b08:	ea 5b       	subi	r30, 0xBA	; 186
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	60 81       	ld	r22, Z
    3b0e:	71 81       	ldd	r23, Z+1	; 0x01
    3b10:	82 81       	ldd	r24, Z+2	; 0x02
    3b12:	93 81       	ldd	r25, Z+3	; 0x03
    3b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	f8 01       	movw	r30, r16
    3b1e:	91 83       	std	Z+1, r25	; 0x01
    3b20:	80 83       	st	Z, r24
    3b22:	de 01       	movw	r26, r28
    3b24:	a0 5c       	subi	r26, 0xC0	; 192
    3b26:	bf 4f       	sbci	r27, 0xFF	; 255
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ec 5b       	subi	r30, 0xBC	; 188
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	11 96       	adiw	r26, 0x01	; 1
    3b34:	9c 93       	st	X, r25
    3b36:	8e 93       	st	-X, r24
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e0 5c       	subi	r30, 0xC0	; 192
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	80 81       	ld	r24, Z
    3b40:	91 81       	ldd	r25, Z+1	; 0x01
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <LCD_VoidSendCommand+0x24c>
    3b46:	fe 01       	movw	r30, r28
    3b48:	e0 5c       	subi	r30, 0xC0	; 192
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
    3b50:	19 c0       	rjmp	.+50     	; 0x3b84 <LCD_VoidSendCommand+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b52:	8e 01       	movw	r16, r28
    3b54:	02 5b       	subi	r16, 0xB2	; 178
    3b56:	1f 4f       	sbci	r17, 0xFF	; 255
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e1 5b       	subi	r30, 0xB1	; 177
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 83       	st	Z, r24
    3b72:	fe 01       	movw	r30, r28
    3b74:	e2 5b       	subi	r30, 0xB2	; 178
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b7e:	8a 95       	dec	r24
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <LCD_VoidSendCommand+0x288>
    3b82:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
    3b84:	82 e0       	ldi	r24, 0x02	; 2
    3b86:	62 e0       	ldi	r22, 0x02	; 2
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	a8 e4       	ldi	r26, 0x48	; 72
    3b94:	b3 e4       	ldi	r27, 0x43	; 67
    3b96:	8b af       	std	Y+59, r24	; 0x3b
    3b98:	9c af       	std	Y+60, r25	; 0x3c
    3b9a:	ad af       	std	Y+61, r26	; 0x3d
    3b9c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b9e:	6b ad       	ldd	r22, Y+59	; 0x3b
    3ba0:	7c ad       	ldd	r23, Y+60	; 0x3c
    3ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ba6:	2b ea       	ldi	r18, 0xAB	; 171
    3ba8:	3a ea       	ldi	r19, 0xAA	; 170
    3baa:	4a e2       	ldi	r20, 0x2A	; 42
    3bac:	50 e4       	ldi	r21, 0x40	; 64
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8f ab       	std	Y+55, r24	; 0x37
    3bb8:	98 af       	std	Y+56, r25	; 0x38
    3bba:	a9 af       	std	Y+57, r26	; 0x39
    3bbc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3bbe:	6f a9       	ldd	r22, Y+55	; 0x37
    3bc0:	78 ad       	ldd	r23, Y+56	; 0x38
    3bc2:	89 ad       	ldd	r24, Y+57	; 0x39
    3bc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	1c f4       	brge	.+6      	; 0x3bdc <LCD_VoidSendCommand+0x2e6>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	8e ab       	std	Y+54, r24	; 0x36
    3bda:	91 c0       	rjmp	.+290    	; 0x3cfe <LCD_VoidSendCommand+0x408>
	else if (__tmp > 255)
    3bdc:	6f a9       	ldd	r22, Y+55	; 0x37
    3bde:	78 ad       	ldd	r23, Y+56	; 0x38
    3be0:	89 ad       	ldd	r24, Y+57	; 0x39
    3be2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	4f e7       	ldi	r20, 0x7F	; 127
    3bea:	53 e4       	ldi	r21, 0x43	; 67
    3bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf0:	18 16       	cp	r1, r24
    3bf2:	0c f0       	brlt	.+2      	; 0x3bf6 <LCD_VoidSendCommand+0x300>
    3bf4:	7b c0       	rjmp	.+246    	; 0x3cec <LCD_VoidSendCommand+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    3bf6:	6b ad       	ldd	r22, Y+59	; 0x3b
    3bf8:	7c ad       	ldd	r23, Y+60	; 0x3c
    3bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	4a e7       	ldi	r20, 0x7A	; 122
    3c04:	54 e4       	ldi	r21, 0x44	; 68
    3c06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	8a ab       	std	Y+50, r24	; 0x32
    3c10:	9b ab       	std	Y+51, r25	; 0x33
    3c12:	ac ab       	std	Y+52, r26	; 0x34
    3c14:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c16:	6a a9       	ldd	r22, Y+50	; 0x32
    3c18:	7b a9       	ldd	r23, Y+51	; 0x33
    3c1a:	8c a9       	ldd	r24, Y+52	; 0x34
    3c1c:	9d a9       	ldd	r25, Y+53	; 0x35
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	4a ef       	ldi	r20, 0xFA	; 250
    3c24:	54 e4       	ldi	r21, 0x44	; 68
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	8e a7       	std	Y+46, r24	; 0x2e
    3c30:	9f a7       	std	Y+47, r25	; 0x2f
    3c32:	a8 ab       	std	Y+48, r26	; 0x30
    3c34:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3c36:	6e a5       	ldd	r22, Y+46	; 0x2e
    3c38:	7f a5       	ldd	r23, Y+47	; 0x2f
    3c3a:	88 a9       	ldd	r24, Y+48	; 0x30
    3c3c:	99 a9       	ldd	r25, Y+49	; 0x31
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e8       	ldi	r20, 0x80	; 128
    3c44:	5f e3       	ldi	r21, 0x3F	; 63
    3c46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c4a:	88 23       	and	r24, r24
    3c4c:	2c f4       	brge	.+10     	; 0x3c58 <LCD_VoidSendCommand+0x362>
		__ticks = 1;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	9d a7       	std	Y+45, r25	; 0x2d
    3c54:	8c a7       	std	Y+44, r24	; 0x2c
    3c56:	3f c0       	rjmp	.+126    	; 0x3cd6 <LCD_VoidSendCommand+0x3e0>
	else if (__tmp > 65535)
    3c58:	6e a5       	ldd	r22, Y+46	; 0x2e
    3c5a:	7f a5       	ldd	r23, Y+47	; 0x2f
    3c5c:	88 a9       	ldd	r24, Y+48	; 0x30
    3c5e:	99 a9       	ldd	r25, Y+49	; 0x31
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	3f ef       	ldi	r19, 0xFF	; 255
    3c64:	4f e7       	ldi	r20, 0x7F	; 127
    3c66:	57 e4       	ldi	r21, 0x47	; 71
    3c68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c6c:	18 16       	cp	r1, r24
    3c6e:	4c f5       	brge	.+82     	; 0x3cc2 <LCD_VoidSendCommand+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c70:	6a a9       	ldd	r22, Y+50	; 0x32
    3c72:	7b a9       	ldd	r23, Y+51	; 0x33
    3c74:	8c a9       	ldd	r24, Y+52	; 0x34
    3c76:	9d a9       	ldd	r25, Y+53	; 0x35
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e2       	ldi	r20, 0x20	; 32
    3c7e:	51 e4       	ldi	r21, 0x41	; 65
    3c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	9d a7       	std	Y+45, r25	; 0x2d
    3c96:	8c a7       	std	Y+44, r24	; 0x2c
    3c98:	0f c0       	rjmp	.+30     	; 0x3cb8 <LCD_VoidSendCommand+0x3c2>
    3c9a:	88 ec       	ldi	r24, 0xC8	; 200
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	9b a7       	std	Y+43, r25	; 0x2b
    3ca0:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ca2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ca4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3ca6:	01 97       	sbiw	r24, 0x01	; 1
    3ca8:	f1 f7       	brne	.-4      	; 0x3ca6 <LCD_VoidSendCommand+0x3b0>
    3caa:	9b a7       	std	Y+43, r25	; 0x2b
    3cac:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cae:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cb0:	9d a5       	ldd	r25, Y+45	; 0x2d
    3cb2:	01 97       	sbiw	r24, 0x01	; 1
    3cb4:	9d a7       	std	Y+45, r25	; 0x2d
    3cb6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb8:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cba:	9d a5       	ldd	r25, Y+45	; 0x2d
    3cbc:	00 97       	sbiw	r24, 0x00	; 0
    3cbe:	69 f7       	brne	.-38     	; 0x3c9a <LCD_VoidSendCommand+0x3a4>
    3cc0:	24 c0       	rjmp	.+72     	; 0x3d0a <LCD_VoidSendCommand+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    3cc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    3cc6:	88 a9       	ldd	r24, Y+48	; 0x30
    3cc8:	99 a9       	ldd	r25, Y+49	; 0x31
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	9d a7       	std	Y+45, r25	; 0x2d
    3cd4:	8c a7       	std	Y+44, r24	; 0x2c
    3cd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cd8:	9d a5       	ldd	r25, Y+45	; 0x2d
    3cda:	99 a7       	std	Y+41, r25	; 0x29
    3cdc:	88 a7       	std	Y+40, r24	; 0x28
    3cde:	88 a5       	ldd	r24, Y+40	; 0x28
    3ce0:	99 a5       	ldd	r25, Y+41	; 0x29
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <LCD_VoidSendCommand+0x3ec>
    3ce6:	99 a7       	std	Y+41, r25	; 0x29
    3ce8:	88 a7       	std	Y+40, r24	; 0x28
    3cea:	0f c0       	rjmp	.+30     	; 0x3d0a <LCD_VoidSendCommand+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3cec:	6f a9       	ldd	r22, Y+55	; 0x37
    3cee:	78 ad       	ldd	r23, Y+56	; 0x38
    3cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    3cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	8e ab       	std	Y+54, r24	; 0x36
    3cfe:	8e a9       	ldd	r24, Y+54	; 0x36
    3d00:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d02:	8f a1       	ldd	r24, Y+39	; 0x27
    3d04:	8a 95       	dec	r24
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <LCD_VoidSendCommand+0x40e>
    3d08:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Command Least Lower Nibble */
	DIO_U8SetPortValue(LCD_U8_PORT_DATA,(Copy_U8Command << 4));
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e9 5a       	subi	r30, 0xA9	; 169
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 81       	ld	r24, Z
    3d12:	98 2f       	mov	r25, r24
    3d14:	92 95       	swap	r25
    3d16:	90 7f       	andi	r25, 0xF0	; 240
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	69 2f       	mov	r22, r25
    3d1c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <DIO_U8SetPortValue>
	/* Enable = 1 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_HIGH);
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	62 e0       	ldi	r22, 0x02	; 2
    3d24:	41 e0       	ldi	r20, 0x01	; 1
    3d26:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	a0 e8       	ldi	r26, 0x80	; 128
    3d30:	bf e3       	ldi	r27, 0x3F	; 63
    3d32:	8b a3       	std	Y+35, r24	; 0x23
    3d34:	9c a3       	std	Y+36, r25	; 0x24
    3d36:	ad a3       	std	Y+37, r26	; 0x25
    3d38:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    3d40:	9e a1       	ldd	r25, Y+38	; 0x26
    3d42:	2b ea       	ldi	r18, 0xAB	; 171
    3d44:	3a ea       	ldi	r19, 0xAA	; 170
    3d46:	4a e2       	ldi	r20, 0x2A	; 42
    3d48:	50 e4       	ldi	r21, 0x40	; 64
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	8f 8f       	std	Y+31, r24	; 0x1f
    3d54:	98 a3       	std	Y+32, r25	; 0x20
    3d56:	a9 a3       	std	Y+33, r26	; 0x21
    3d58:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3d5a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3d5c:	78 a1       	ldd	r23, Y+32	; 0x20
    3d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3d60:	9a a1       	ldd	r25, Y+34	; 0x22
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	40 e8       	ldi	r20, 0x80	; 128
    3d68:	5f e3       	ldi	r21, 0x3F	; 63
    3d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6e:	88 23       	and	r24, r24
    3d70:	1c f4       	brge	.+6      	; 0x3d78 <LCD_VoidSendCommand+0x482>
		__ticks = 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	8e 8f       	std	Y+30, r24	; 0x1e
    3d76:	91 c0       	rjmp	.+290    	; 0x3e9a <LCD_VoidSendCommand+0x5a4>
	else if (__tmp > 255)
    3d78:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3d7a:	78 a1       	ldd	r23, Y+32	; 0x20
    3d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	53 e4       	ldi	r21, 0x43	; 67
    3d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	0c f0       	brlt	.+2      	; 0x3d92 <LCD_VoidSendCommand+0x49c>
    3d90:	7b c0       	rjmp	.+246    	; 0x3e88 <LCD_VoidSendCommand+0x592>
	{
		_delay_ms(__us / 1000.0);
    3d92:	6b a1       	ldd	r22, Y+35	; 0x23
    3d94:	7c a1       	ldd	r23, Y+36	; 0x24
    3d96:	8d a1       	ldd	r24, Y+37	; 0x25
    3d98:	9e a1       	ldd	r25, Y+38	; 0x26
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	4a e7       	ldi	r20, 0x7A	; 122
    3da0:	54 e4       	ldi	r21, 0x44	; 68
    3da2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	8a 8f       	std	Y+26, r24	; 0x1a
    3dac:	9b 8f       	std	Y+27, r25	; 0x1b
    3dae:	ac 8f       	std	Y+28, r26	; 0x1c
    3db0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3db4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3db8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	4a ef       	ldi	r20, 0xFA	; 250
    3dc0:	54 e4       	ldi	r21, 0x44	; 68
    3dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	8e 8b       	std	Y+22, r24	; 0x16
    3dcc:	9f 8b       	std	Y+23, r25	; 0x17
    3dce:	a8 8f       	std	Y+24, r26	; 0x18
    3dd0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3dd2:	6e 89       	ldd	r22, Y+22	; 0x16
    3dd4:	7f 89       	ldd	r23, Y+23	; 0x17
    3dd6:	88 8d       	ldd	r24, Y+24	; 0x18
    3dd8:	99 8d       	ldd	r25, Y+25	; 0x19
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e8       	ldi	r20, 0x80	; 128
    3de0:	5f e3       	ldi	r21, 0x3F	; 63
    3de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de6:	88 23       	and	r24, r24
    3de8:	2c f4       	brge	.+10     	; 0x3df4 <LCD_VoidSendCommand+0x4fe>
		__ticks = 1;
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	9d 8b       	std	Y+21, r25	; 0x15
    3df0:	8c 8b       	std	Y+20, r24	; 0x14
    3df2:	3f c0       	rjmp	.+126    	; 0x3e72 <LCD_VoidSendCommand+0x57c>
	else if (__tmp > 65535)
    3df4:	6e 89       	ldd	r22, Y+22	; 0x16
    3df6:	7f 89       	ldd	r23, Y+23	; 0x17
    3df8:	88 8d       	ldd	r24, Y+24	; 0x18
    3dfa:	99 8d       	ldd	r25, Y+25	; 0x19
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	3f ef       	ldi	r19, 0xFF	; 255
    3e00:	4f e7       	ldi	r20, 0x7F	; 127
    3e02:	57 e4       	ldi	r21, 0x47	; 71
    3e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e08:	18 16       	cp	r1, r24
    3e0a:	4c f5       	brge	.+82     	; 0x3e5e <LCD_VoidSendCommand+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e0e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e2       	ldi	r20, 0x20	; 32
    3e1a:	51 e4       	ldi	r21, 0x41	; 65
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	bc 01       	movw	r22, r24
    3e26:	cd 01       	movw	r24, r26
    3e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	9d 8b       	std	Y+21, r25	; 0x15
    3e32:	8c 8b       	std	Y+20, r24	; 0x14
    3e34:	0f c0       	rjmp	.+30     	; 0x3e54 <LCD_VoidSendCommand+0x55e>
    3e36:	88 ec       	ldi	r24, 0xC8	; 200
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9b 8b       	std	Y+19, r25	; 0x13
    3e3c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e3e:	8a 89       	ldd	r24, Y+18	; 0x12
    3e40:	9b 89       	ldd	r25, Y+19	; 0x13
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <LCD_VoidSendCommand+0x54c>
    3e46:	9b 8b       	std	Y+19, r25	; 0x13
    3e48:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4a:	8c 89       	ldd	r24, Y+20	; 0x14
    3e4c:	9d 89       	ldd	r25, Y+21	; 0x15
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	9d 8b       	std	Y+21, r25	; 0x15
    3e52:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e54:	8c 89       	ldd	r24, Y+20	; 0x14
    3e56:	9d 89       	ldd	r25, Y+21	; 0x15
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	69 f7       	brne	.-38     	; 0x3e36 <LCD_VoidSendCommand+0x540>
    3e5c:	24 c0       	rjmp	.+72     	; 0x3ea6 <LCD_VoidSendCommand+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5e:	6e 89       	ldd	r22, Y+22	; 0x16
    3e60:	7f 89       	ldd	r23, Y+23	; 0x17
    3e62:	88 8d       	ldd	r24, Y+24	; 0x18
    3e64:	99 8d       	ldd	r25, Y+25	; 0x19
    3e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	9d 8b       	std	Y+21, r25	; 0x15
    3e70:	8c 8b       	std	Y+20, r24	; 0x14
    3e72:	8c 89       	ldd	r24, Y+20	; 0x14
    3e74:	9d 89       	ldd	r25, Y+21	; 0x15
    3e76:	99 8b       	std	Y+17, r25	; 0x11
    3e78:	88 8b       	std	Y+16, r24	; 0x10
    3e7a:	88 89       	ldd	r24, Y+16	; 0x10
    3e7c:	99 89       	ldd	r25, Y+17	; 0x11
    3e7e:	01 97       	sbiw	r24, 0x01	; 1
    3e80:	f1 f7       	brne	.-4      	; 0x3e7e <LCD_VoidSendCommand+0x588>
    3e82:	99 8b       	std	Y+17, r25	; 0x11
    3e84:	88 8b       	std	Y+16, r24	; 0x10
    3e86:	0f c0       	rjmp	.+30     	; 0x3ea6 <LCD_VoidSendCommand+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3e8a:	78 a1       	ldd	r23, Y+32	; 0x20
    3e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	8e 8f       	std	Y+30, r24	; 0x1e
    3e9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e9c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea0:	8a 95       	dec	r24
    3ea2:	f1 f7       	brne	.-4      	; 0x3ea0 <LCD_VoidSendCommand+0x5aa>
    3ea4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	/* Enable = 0 */
	DIO_U8SetPinValue(LCD_U8_PORT_CONTROL,LCD_U8_E_PIN,DIO_U8_LOW);
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	62 e0       	ldi	r22, 0x02	; 2
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	a0 e0       	ldi	r26, 0x00	; 0
    3eb6:	b0 e4       	ldi	r27, 0x40	; 64
    3eb8:	8b 87       	std	Y+11, r24	; 0x0b
    3eba:	9c 87       	std	Y+12, r25	; 0x0c
    3ebc:	ad 87       	std	Y+13, r26	; 0x0d
    3ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	4a ef       	ldi	r20, 0xFA	; 250
    3ece:	54 e4       	ldi	r21, 0x44	; 68
    3ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	8f 83       	std	Y+7, r24	; 0x07
    3eda:	98 87       	std	Y+8, r25	; 0x08
    3edc:	a9 87       	std	Y+9, r26	; 0x09
    3ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee2:	78 85       	ldd	r23, Y+8	; 0x08
    3ee4:	89 85       	ldd	r24, Y+9	; 0x09
    3ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e8       	ldi	r20, 0x80	; 128
    3eee:	5f e3       	ldi	r21, 0x3F	; 63
    3ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef4:	88 23       	and	r24, r24
    3ef6:	2c f4       	brge	.+10     	; 0x3f02 <LCD_VoidSendCommand+0x60c>
		__ticks = 1;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	9e 83       	std	Y+6, r25	; 0x06
    3efe:	8d 83       	std	Y+5, r24	; 0x05
    3f00:	3f c0       	rjmp	.+126    	; 0x3f80 <LCD_VoidSendCommand+0x68a>
	else if (__tmp > 65535)
    3f02:	6f 81       	ldd	r22, Y+7	; 0x07
    3f04:	78 85       	ldd	r23, Y+8	; 0x08
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	4c f5       	brge	.+82     	; 0x3f6c <LCD_VoidSendCommand+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e2       	ldi	r20, 0x20	; 32
    3f28:	51 e4       	ldi	r21, 0x41	; 65
    3f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	9e 83       	std	Y+6, r25	; 0x06
    3f40:	8d 83       	std	Y+5, r24	; 0x05
    3f42:	0f c0       	rjmp	.+30     	; 0x3f62 <LCD_VoidSendCommand+0x66c>
    3f44:	88 ec       	ldi	r24, 0xC8	; 200
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9c 83       	std	Y+4, r25	; 0x04
    3f4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <LCD_VoidSendCommand+0x65a>
    3f54:	9c 83       	std	Y+4, r25	; 0x04
    3f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f58:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	9e 83       	std	Y+6, r25	; 0x06
    3f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f62:	8d 81       	ldd	r24, Y+5	; 0x05
    3f64:	9e 81       	ldd	r25, Y+6	; 0x06
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	69 f7       	brne	.-38     	; 0x3f44 <LCD_VoidSendCommand+0x64e>
    3f6a:	14 c0       	rjmp	.+40     	; 0x3f94 <LCD_VoidSendCommand+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6e:	78 85       	ldd	r23, Y+8	; 0x08
    3f70:	89 85       	ldd	r24, Y+9	; 0x09
    3f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	9e 83       	std	Y+6, r25	; 0x06
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	8d 81       	ldd	r24, Y+5	; 0x05
    3f82:	9e 81       	ldd	r25, Y+6	; 0x06
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	89 83       	std	Y+1, r24	; 0x01
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <LCD_VoidSendCommand+0x696>
    3f90:	9a 83       	std	Y+2, r25	; 0x02
    3f92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    3f94:	c9 5a       	subi	r28, 0xA9	; 169
    3f96:	df 4f       	sbci	r29, 0xFF	; 255
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	1f 91       	pop	r17
    3fa8:	0f 91       	pop	r16
    3faa:	08 95       	ret

00003fac <LCD_u8GoToLine>:
u8 LCD_u8GoToLine(u8 Copy_LineNum,u8 Copy_Loction)
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	00 d0       	rcall	.+0      	; 0x3fb2 <LCD_u8GoToLine+0x6>
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <LCD_u8GoToLine+0x8>
    3fb4:	0f 92       	push	r0
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	8a 83       	std	Y+2, r24	; 0x02
    3fbc:	6b 83       	std	Y+3, r22	; 0x03
	/* Set DDRAM Address In Address Counter */
	u8 Local_U8ErrorState = STATE_OK;
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Loction <= 39)
    3fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc4:	88 32       	cpi	r24, 0x28	; 40
    3fc6:	e0 f4       	brcc	.+56     	; 0x4000 <LCD_u8GoToLine+0x54>
	{
		switch(Copy_LineNum)
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	28 2f       	mov	r18, r24
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	3d 83       	std	Y+5, r19	; 0x05
    3fd0:	2c 83       	std	Y+4, r18	; 0x04
    3fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3fd6:	81 30       	cpi	r24, 0x01	; 1
    3fd8:	91 05       	cpc	r25, r1
    3fda:	31 f0       	breq	.+12     	; 0x3fe8 <LCD_u8GoToLine+0x3c>
    3fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    3fde:	3d 81       	ldd	r19, Y+5	; 0x05
    3fe0:	22 30       	cpi	r18, 0x02	; 2
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	31 f0       	breq	.+12     	; 0x3ff2 <LCD_u8GoToLine+0x46>
    3fe6:	0a c0       	rjmp	.+20     	; 0x3ffc <LCD_u8GoToLine+0x50>
		{
			/* First Char In LCD */
			case LCD_u8_LINE1 : LCD_VoidSendCommand(0x80+Copy_Loction);break; /* 0b1000000 */
    3fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fea:	80 58       	subi	r24, 0x80	; 128
    3fec:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    3ff0:	08 c0       	rjmp	.+16     	; 0x4002 <LCD_u8GoToLine+0x56>
			/* Second Char In LCD */
			case LCD_u8_LINE2 : LCD_VoidSendCommand(0xc0+Copy_Loction);break; /* 0b1000000 */
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	80 54       	subi	r24, 0x40	; 64
    3ff6:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    3ffa:	03 c0       	rjmp	.+6      	; 0x4002 <LCD_u8GoToLine+0x56>
			default : Local_U8ErrorState = STATE_NOK;
    3ffc:	19 82       	std	Y+1, r1	; 0x01
    3ffe:	01 c0       	rjmp	.+2      	; 0x4002 <LCD_u8GoToLine+0x56>
		}
	}
	else
	{
		Local_U8ErrorState = STATE_NOK;
    4000:	19 82       	std	Y+1, r1	; 0x01
	}
	return(Local_U8ErrorState);
    4002:	89 81       	ldd	r24, Y+1	; 0x01
}
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	cf 91       	pop	r28
    4010:	df 91       	pop	r29
    4012:	08 95       	ret

00004014 <LCD_VoidClear>:
void LCD_VoidClear(void)
{
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	2e 97       	sbiw	r28, 0x0e	; 14
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
	  /* Display Clear */
	LCD_VoidSendCommand(0x01);
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 e0       	ldi	r26, 0x00	; 0
    4034:	b0 e4       	ldi	r27, 0x40	; 64
    4036:	8b 87       	std	Y+11, r24	; 0x0b
    4038:	9c 87       	std	Y+12, r25	; 0x0c
    403a:	ad 87       	std	Y+13, r26	; 0x0d
    403c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4040:	7c 85       	ldd	r23, Y+12	; 0x0c
    4042:	8d 85       	ldd	r24, Y+13	; 0x0d
    4044:	9e 85       	ldd	r25, Y+14	; 0x0e
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	4a ef       	ldi	r20, 0xFA	; 250
    404c:	54 e4       	ldi	r21, 0x44	; 68
    404e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	8f 83       	std	Y+7, r24	; 0x07
    4058:	98 87       	std	Y+8, r25	; 0x08
    405a:	a9 87       	std	Y+9, r26	; 0x09
    405c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    405e:	6f 81       	ldd	r22, Y+7	; 0x07
    4060:	78 85       	ldd	r23, Y+8	; 0x08
    4062:	89 85       	ldd	r24, Y+9	; 0x09
    4064:	9a 85       	ldd	r25, Y+10	; 0x0a
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e8       	ldi	r20, 0x80	; 128
    406c:	5f e3       	ldi	r21, 0x3F	; 63
    406e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4072:	88 23       	and	r24, r24
    4074:	2c f4       	brge	.+10     	; 0x4080 <LCD_VoidClear+0x6c>
		__ticks = 1;
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
    407e:	3f c0       	rjmp	.+126    	; 0x40fe <LCD_VoidClear+0xea>
	else if (__tmp > 65535)
    4080:	6f 81       	ldd	r22, Y+7	; 0x07
    4082:	78 85       	ldd	r23, Y+8	; 0x08
    4084:	89 85       	ldd	r24, Y+9	; 0x09
    4086:	9a 85       	ldd	r25, Y+10	; 0x0a
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	3f ef       	ldi	r19, 0xFF	; 255
    408c:	4f e7       	ldi	r20, 0x7F	; 127
    408e:	57 e4       	ldi	r21, 0x47	; 71
    4090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4094:	18 16       	cp	r1, r24
    4096:	4c f5       	brge	.+82     	; 0x40ea <LCD_VoidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4098:	6b 85       	ldd	r22, Y+11	; 0x0b
    409a:	7c 85       	ldd	r23, Y+12	; 0x0c
    409c:	8d 85       	ldd	r24, Y+13	; 0x0d
    409e:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e2       	ldi	r20, 0x20	; 32
    40a6:	51 e4       	ldi	r21, 0x41	; 65
    40a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	bc 01       	movw	r22, r24
    40b2:	cd 01       	movw	r24, r26
    40b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
    40c0:	0f c0       	rjmp	.+30     	; 0x40e0 <LCD_VoidClear+0xcc>
    40c2:	88 ec       	ldi	r24, 0xC8	; 200
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <LCD_VoidClear+0xba>
    40d2:	9c 83       	std	Y+4, r25	; 0x04
    40d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d6:	8d 81       	ldd	r24, Y+5	; 0x05
    40d8:	9e 81       	ldd	r25, Y+6	; 0x06
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	9e 83       	std	Y+6, r25	; 0x06
    40de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e0:	8d 81       	ldd	r24, Y+5	; 0x05
    40e2:	9e 81       	ldd	r25, Y+6	; 0x06
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	69 f7       	brne	.-38     	; 0x40c2 <LCD_VoidClear+0xae>
    40e8:	14 c0       	rjmp	.+40     	; 0x4112 <LCD_VoidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	78 85       	ldd	r23, Y+8	; 0x08
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	9e 83       	std	Y+6, r25	; 0x06
    40fc:	8d 83       	std	Y+5, r24	; 0x05
    40fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4100:	9e 81       	ldd	r25, Y+6	; 0x06
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	9a 81       	ldd	r25, Y+2	; 0x02
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <LCD_VoidClear+0xf6>
    410e:	9a 83       	std	Y+2, r25	; 0x02
    4110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4112:	2e 96       	adiw	r28, 0x0e	; 14
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	cf 91       	pop	r28
    4120:	df 91       	pop	r29
    4122:	08 95       	ret

00004124 <LCD_VoidShiftPatterns>:
void LCD_VoidShiftPatterns(u8 Copy_TypeShift,u8 Copy_NumShift)
{
    4124:	df 93       	push	r29
    4126:	cf 93       	push	r28
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	28 97       	sbiw	r28, 0x08	; 8
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	de bf       	out	0x3e, r29	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	8b 83       	std	Y+3, r24	; 0x03
    413a:	6c 83       	std	Y+4, r22	; 0x04
	if (Copy_NumShift == 1)
    413c:	8c 81       	ldd	r24, Y+4	; 0x04
    413e:	81 30       	cpi	r24, 0x01	; 1
    4140:	c1 f4       	brne	.+48     	; 0x4172 <LCD_VoidShiftPatterns+0x4e>
	{
	   switch(Copy_TypeShift)
    4142:	8b 81       	ldd	r24, Y+3	; 0x03
    4144:	28 2f       	mov	r18, r24
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	38 87       	std	Y+8, r19	; 0x08
    414a:	2f 83       	std	Y+7, r18	; 0x07
    414c:	8f 81       	ldd	r24, Y+7	; 0x07
    414e:	98 85       	ldd	r25, Y+8	; 0x08
    4150:	81 30       	cpi	r24, 0x01	; 1
    4152:	91 05       	cpc	r25, r1
    4154:	31 f0       	breq	.+12     	; 0x4162 <LCD_VoidShiftPatterns+0x3e>
    4156:	2f 81       	ldd	r18, Y+7	; 0x07
    4158:	38 85       	ldd	r19, Y+8	; 0x08
    415a:	22 30       	cpi	r18, 0x02	; 2
    415c:	31 05       	cpc	r19, r1
    415e:	29 f0       	breq	.+10     	; 0x416a <LCD_VoidShiftPatterns+0x46>
    4160:	31 c0       	rjmp	.+98     	; 0x41c4 <LCD_VoidShiftPatterns+0xa0>
	   {
	   	case LCD_SHIFT_LEFT  : LCD_VoidSendCommand(0b00011000);break;
    4162:	88 e1       	ldi	r24, 0x18	; 24
    4164:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    4168:	2d c0       	rjmp	.+90     	; 0x41c4 <LCD_VoidShiftPatterns+0xa0>
	  	case LCD_SHIFT_RIGHT : LCD_VoidSendCommand(0b00011100);break;
    416a:	8c e1       	ldi	r24, 0x1C	; 28
    416c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
    4170:	29 c0       	rjmp	.+82     	; 0x41c4 <LCD_VoidShiftPatterns+0xa0>
	   } 
	}
	else
	{
		switch(Copy_TypeShift)
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	28 2f       	mov	r18, r24
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	3e 83       	std	Y+6, r19	; 0x06
    417a:	2d 83       	std	Y+5, r18	; 0x05
    417c:	8d 81       	ldd	r24, Y+5	; 0x05
    417e:	9e 81       	ldd	r25, Y+6	; 0x06
    4180:	81 30       	cpi	r24, 0x01	; 1
    4182:	91 05       	cpc	r25, r1
    4184:	31 f0       	breq	.+12     	; 0x4192 <LCD_VoidShiftPatterns+0x6e>
    4186:	2d 81       	ldd	r18, Y+5	; 0x05
    4188:	3e 81       	ldd	r19, Y+6	; 0x06
    418a:	22 30       	cpi	r18, 0x02	; 2
    418c:	31 05       	cpc	r19, r1
    418e:	71 f0       	breq	.+28     	; 0x41ac <LCD_VoidShiftPatterns+0x88>
    4190:	19 c0       	rjmp	.+50     	; 0x41c4 <LCD_VoidShiftPatterns+0xa0>
	   {
		    /* Shift Left */
	   	    case LCD_SHIFT_LEFT :
		    {
		    	for (u8 i=0; i<Copy_NumShift; i++)
    4192:	1a 82       	std	Y+2, r1	; 0x02
    4194:	06 c0       	rjmp	.+12     	; 0x41a2 <LCD_VoidShiftPatterns+0x7e>
		    	{
		    		LCD_VoidSendCommand(0b00011000);
    4196:	88 e1       	ldi	r24, 0x18	; 24
    4198:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
		switch(Copy_TypeShift)
	   {
		    /* Shift Left */
	   	    case LCD_SHIFT_LEFT :
		    {
		    	for (u8 i=0; i<Copy_NumShift; i++)
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	8f 5f       	subi	r24, 0xFF	; 255
    41a0:	8a 83       	std	Y+2, r24	; 0x02
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	8c 81       	ldd	r24, Y+4	; 0x04
    41a6:	98 17       	cp	r25, r24
    41a8:	b0 f3       	brcs	.-20     	; 0x4196 <LCD_VoidShiftPatterns+0x72>
    41aa:	0c c0       	rjmp	.+24     	; 0x41c4 <LCD_VoidShiftPatterns+0xa0>
		    break;
		    }	
			/* Shift Right */	
	  	    case LCD_SHIFT_RIGHT :
		    {
		    	for (u8 i=0; i<Copy_NumShift; i++)
    41ac:	19 82       	std	Y+1, r1	; 0x01
    41ae:	06 c0       	rjmp	.+12     	; 0x41bc <LCD_VoidShiftPatterns+0x98>
		    	{
		    		LCD_VoidSendCommand(0b00011100);
    41b0:	8c e1       	ldi	r24, 0x1C	; 28
    41b2:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <LCD_VoidSendCommand>
		    break;
		    }	
			/* Shift Right */	
	  	    case LCD_SHIFT_RIGHT :
		    {
		    	for (u8 i=0; i<Copy_NumShift; i++)
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	8f 5f       	subi	r24, 0xFF	; 255
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	99 81       	ldd	r25, Y+1	; 0x01
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	98 17       	cp	r25, r24
    41c2:	b0 f3       	brcs	.-20     	; 0x41b0 <LCD_VoidShiftPatterns+0x8c>
		    	}
		    break;
		    }
	   }
	}   
}
    41c4:	28 96       	adiw	r28, 0x08	; 8
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	cf 91       	pop	r28
    41d2:	df 91       	pop	r29
    41d4:	08 95       	ret

000041d6 <LCD_VoidSentSringAndNum>:
void LCD_VoidSentSringAndNum  (u8 *Copy_Pu8StringAndNum)
{
    41d6:	df 93       	push	r29
    41d8:	cf 93       	push	r28
    41da:	00 d0       	rcall	.+0      	; 0x41dc <LCD_VoidSentSringAndNum+0x6>
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	0b c0       	rjmp	.+22     	; 0x41fc <LCD_VoidSentSringAndNum+0x26>
	while(*Copy_Pu8StringAndNum > 0)
	{
		LCD_VoidSendChar(*Copy_Pu8StringAndNum++);
    41e6:	e9 81       	ldd	r30, Y+1	; 0x01
    41e8:	fa 81       	ldd	r31, Y+2	; 0x02
    41ea:	20 81       	ld	r18, Z
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	9a 81       	ldd	r25, Y+2	; 0x02
    41f0:	01 96       	adiw	r24, 0x01	; 1
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	82 2f       	mov	r24, r18
    41f8:	0e 94 20 19 	call	0x3240	; 0x3240 <LCD_VoidSendChar>
	   }
	}   
}
void LCD_VoidSentSringAndNum  (u8 *Copy_Pu8StringAndNum)
{
	while(*Copy_Pu8StringAndNum > 0)
    41fc:	e9 81       	ldd	r30, Y+1	; 0x01
    41fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4200:	80 81       	ld	r24, Z
    4202:	88 23       	and	r24, r24
    4204:	81 f7       	brne	.-32     	; 0x41e6 <LCD_VoidSentSringAndNum+0x10>
	{
		LCD_VoidSendChar(*Copy_Pu8StringAndNum++);
	}
}  
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	cf 91       	pop	r28
    420c:	df 91       	pop	r29
    420e:	08 95       	ret

00004210 <LCD_VoidSinsoul>:
void LCD_VoidSinsoul(u8 *Copy_Pu8StringAndNum)
{
    4210:	0f 93       	push	r16
    4212:	1f 93       	push	r17
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
    421c:	c6 55       	subi	r28, 0x56	; 86
    421e:	d0 40       	sbci	r29, 0x00	; 0
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	fe 01       	movw	r30, r28
    422c:	eb 5a       	subi	r30, 0xAB	; 171
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	91 83       	std	Z+1, r25	; 0x01
    4232:	80 83       	st	Z, r24
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    4234:	fe 01       	movw	r30, r28
    4236:	eb 5a       	subi	r30, 0xAB	; 171
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	91 81       	ldd	r25, Z+1	; 0x01
    423e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    4242:	fe 01       	movw	r30, r28
    4244:	ef 5a       	subi	r30, 0xAF	; 175
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	aa e7       	ldi	r26, 0x7A	; 122
    424e:	b4 e4       	ldi	r27, 0x44	; 68
    4250:	80 83       	st	Z, r24
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	a2 83       	std	Z+2, r26	; 0x02
    4256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4258:	8e 01       	movw	r16, r28
    425a:	03 5b       	subi	r16, 0xB3	; 179
    425c:	1f 4f       	sbci	r17, 0xFF	; 255
    425e:	fe 01       	movw	r30, r28
    4260:	ef 5a       	subi	r30, 0xAF	; 175
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	60 81       	ld	r22, Z
    4266:	71 81       	ldd	r23, Z+1	; 0x01
    4268:	82 81       	ldd	r24, Z+2	; 0x02
    426a:	93 81       	ldd	r25, Z+3	; 0x03
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	4a ef       	ldi	r20, 0xFA	; 250
    4272:	54 e4       	ldi	r21, 0x44	; 68
    4274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	f8 01       	movw	r30, r16
    427e:	80 83       	st	Z, r24
    4280:	91 83       	std	Z+1, r25	; 0x01
    4282:	a2 83       	std	Z+2, r26	; 0x02
    4284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4286:	fe 01       	movw	r30, r28
    4288:	e3 5b       	subi	r30, 0xB3	; 179
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	93 81       	ldd	r25, Z+3	; 0x03
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	44 f4       	brge	.+16     	; 0x42b4 <LCD_VoidSinsoul+0xa4>
		__ticks = 1;
    42a4:	fe 01       	movw	r30, r28
    42a6:	e5 5b       	subi	r30, 0xB5	; 181
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	80 83       	st	Z, r24
    42b2:	64 c0       	rjmp	.+200    	; 0x437c <LCD_VoidSinsoul+0x16c>
	else if (__tmp > 65535)
    42b4:	fe 01       	movw	r30, r28
    42b6:	e3 5b       	subi	r30, 0xB3	; 179
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	60 81       	ld	r22, Z
    42bc:	71 81       	ldd	r23, Z+1	; 0x01
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	93 81       	ldd	r25, Z+3	; 0x03
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	3f ef       	ldi	r19, 0xFF	; 255
    42c6:	4f e7       	ldi	r20, 0x7F	; 127
    42c8:	57 e4       	ldi	r21, 0x47	; 71
    42ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ce:	18 16       	cp	r1, r24
    42d0:	0c f0       	brlt	.+2      	; 0x42d4 <LCD_VoidSinsoul+0xc4>
    42d2:	43 c0       	rjmp	.+134    	; 0x435a <LCD_VoidSinsoul+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d4:	fe 01       	movw	r30, r28
    42d6:	ef 5a       	subi	r30, 0xAF	; 175
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e2       	ldi	r20, 0x20	; 32
    42e8:	51 e4       	ldi	r21, 0x41	; 65
    42ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	8e 01       	movw	r16, r28
    42f4:	05 5b       	subi	r16, 0xB5	; 181
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	bc 01       	movw	r22, r24
    42fa:	cd 01       	movw	r24, r26
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	f8 01       	movw	r30, r16
    4306:	91 83       	std	Z+1, r25	; 0x01
    4308:	80 83       	st	Z, r24
    430a:	1f c0       	rjmp	.+62     	; 0x434a <LCD_VoidSinsoul+0x13a>
    430c:	fe 01       	movw	r30, r28
    430e:	e7 5b       	subi	r30, 0xB7	; 183
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	88 ec       	ldi	r24, 0xC8	; 200
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
    431a:	fe 01       	movw	r30, r28
    431c:	e7 5b       	subi	r30, 0xB7	; 183
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	f1 f7       	brne	.-4      	; 0x4324 <LCD_VoidSinsoul+0x114>
    4328:	fe 01       	movw	r30, r28
    432a:	e7 5b       	subi	r30, 0xB7	; 183
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	de 01       	movw	r26, r28
    4334:	a5 5b       	subi	r26, 0xB5	; 181
    4336:	bf 4f       	sbci	r27, 0xFF	; 255
    4338:	fe 01       	movw	r30, r28
    433a:	e5 5b       	subi	r30, 0xB5	; 181
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 81       	ld	r24, Z
    4340:	91 81       	ldd	r25, Z+1	; 0x01
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	11 96       	adiw	r26, 0x01	; 1
    4346:	9c 93       	st	X, r25
    4348:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434a:	fe 01       	movw	r30, r28
    434c:	e5 5b       	subi	r30, 0xB5	; 181
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	80 81       	ld	r24, Z
    4352:	91 81       	ldd	r25, Z+1	; 0x01
    4354:	00 97       	sbiw	r24, 0x00	; 0
    4356:	d1 f6       	brne	.-76     	; 0x430c <LCD_VoidSinsoul+0xfc>
    4358:	27 c0       	rjmp	.+78     	; 0x43a8 <LCD_VoidSinsoul+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435a:	8e 01       	movw	r16, r28
    435c:	05 5b       	subi	r16, 0xB5	; 181
    435e:	1f 4f       	sbci	r17, 0xFF	; 255
    4360:	fe 01       	movw	r30, r28
    4362:	e3 5b       	subi	r30, 0xB3	; 179
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	60 81       	ld	r22, Z
    4368:	71 81       	ldd	r23, Z+1	; 0x01
    436a:	82 81       	ldd	r24, Z+2	; 0x02
    436c:	93 81       	ldd	r25, Z+3	; 0x03
    436e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	f8 01       	movw	r30, r16
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
    437c:	de 01       	movw	r26, r28
    437e:	a9 5b       	subi	r26, 0xB9	; 185
    4380:	bf 4f       	sbci	r27, 0xFF	; 255
    4382:	fe 01       	movw	r30, r28
    4384:	e5 5b       	subi	r30, 0xB5	; 181
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	8d 93       	st	X+, r24
    438e:	9c 93       	st	X, r25
    4390:	fe 01       	movw	r30, r28
    4392:	e9 5b       	subi	r30, 0xB9	; 185
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	80 81       	ld	r24, Z
    4398:	91 81       	ldd	r25, Z+1	; 0x01
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	f1 f7       	brne	.-4      	; 0x439a <LCD_VoidSinsoul+0x18a>
    439e:	fe 01       	movw	r30, r28
    43a0:	e9 5b       	subi	r30, 0xB9	; 185
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	91 83       	std	Z+1, r25	; 0x01
    43a6:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_VoidClear();
    43a8:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(2,4);
    43ac:	82 e0       	ldi	r24, 0x02	; 2
    43ae:	64 e0       	ldi	r22, 0x04	; 4
    43b0:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    43b4:	fe 01       	movw	r30, r28
    43b6:	eb 5a       	subi	r30, 0xAB	; 171
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 81       	ld	r24, Z
    43bc:	91 81       	ldd	r25, Z+1	; 0x01
    43be:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    43c2:	fe 01       	movw	r30, r28
    43c4:	ed 5b       	subi	r30, 0xBD	; 189
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	aa e7       	ldi	r26, 0x7A	; 122
    43ce:	b4 e4       	ldi	r27, 0x44	; 68
    43d0:	80 83       	st	Z, r24
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	a2 83       	std	Z+2, r26	; 0x02
    43d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d8:	8e 01       	movw	r16, r28
    43da:	01 5c       	subi	r16, 0xC1	; 193
    43dc:	1f 4f       	sbci	r17, 0xFF	; 255
    43de:	fe 01       	movw	r30, r28
    43e0:	ed 5b       	subi	r30, 0xBD	; 189
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	4a ef       	ldi	r20, 0xFA	; 250
    43f2:	54 e4       	ldi	r21, 0x44	; 68
    43f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	f8 01       	movw	r30, r16
    43fe:	80 83       	st	Z, r24
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	a2 83       	std	Z+2, r26	; 0x02
    4404:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4406:	fe 01       	movw	r30, r28
    4408:	ff 96       	adiw	r30, 0x3f	; 63
    440a:	60 81       	ld	r22, Z
    440c:	71 81       	ldd	r23, Z+1	; 0x01
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	93 81       	ldd	r25, Z+3	; 0x03
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e8       	ldi	r20, 0x80	; 128
    4418:	5f e3       	ldi	r21, 0x3F	; 63
    441a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    441e:	88 23       	and	r24, r24
    4420:	2c f4       	brge	.+10     	; 0x442c <LCD_VoidSinsoul+0x21c>
		__ticks = 1;
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	9e af       	std	Y+62, r25	; 0x3e
    4428:	8d af       	std	Y+61, r24	; 0x3d
    442a:	46 c0       	rjmp	.+140    	; 0x44b8 <LCD_VoidSinsoul+0x2a8>
	else if (__tmp > 65535)
    442c:	fe 01       	movw	r30, r28
    442e:	ff 96       	adiw	r30, 0x3f	; 63
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	3f ef       	ldi	r19, 0xFF	; 255
    443c:	4f e7       	ldi	r20, 0x7F	; 127
    443e:	57 e4       	ldi	r21, 0x47	; 71
    4440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4444:	18 16       	cp	r1, r24
    4446:	64 f5       	brge	.+88     	; 0x44a0 <LCD_VoidSinsoul+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	fe 01       	movw	r30, r28
    444a:	ed 5b       	subi	r30, 0xBD	; 189
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e2       	ldi	r20, 0x20	; 32
    445c:	51 e4       	ldi	r21, 0x41	; 65
    445e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	bc 01       	movw	r22, r24
    4468:	cd 01       	movw	r24, r26
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	9e af       	std	Y+62, r25	; 0x3e
    4474:	8d af       	std	Y+61, r24	; 0x3d
    4476:	0f c0       	rjmp	.+30     	; 0x4496 <LCD_VoidSinsoul+0x286>
    4478:	88 ec       	ldi	r24, 0xC8	; 200
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	9c af       	std	Y+60, r25	; 0x3c
    447e:	8b af       	std	Y+59, r24	; 0x3b
    4480:	8b ad       	ldd	r24, Y+59	; 0x3b
    4482:	9c ad       	ldd	r25, Y+60	; 0x3c
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <LCD_VoidSinsoul+0x274>
    4488:	9c af       	std	Y+60, r25	; 0x3c
    448a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    448c:	8d ad       	ldd	r24, Y+61	; 0x3d
    448e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	9e af       	std	Y+62, r25	; 0x3e
    4494:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4496:	8d ad       	ldd	r24, Y+61	; 0x3d
    4498:	9e ad       	ldd	r25, Y+62	; 0x3e
    449a:	00 97       	sbiw	r24, 0x00	; 0
    449c:	69 f7       	brne	.-38     	; 0x4478 <LCD_VoidSinsoul+0x268>
    449e:	16 c0       	rjmp	.+44     	; 0x44cc <LCD_VoidSinsoul+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a0:	fe 01       	movw	r30, r28
    44a2:	ff 96       	adiw	r30, 0x3f	; 63
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	9e af       	std	Y+62, r25	; 0x3e
    44b6:	8d af       	std	Y+61, r24	; 0x3d
    44b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    44ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    44bc:	9a af       	std	Y+58, r25	; 0x3a
    44be:	89 af       	std	Y+57, r24	; 0x39
    44c0:	89 ad       	ldd	r24, Y+57	; 0x39
    44c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	f1 f7       	brne	.-4      	; 0x44c4 <LCD_VoidSinsoul+0x2b4>
    44c8:	9a af       	std	Y+58, r25	; 0x3a
    44ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_VoidClear();
    44cc:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(1,8);
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	68 e0       	ldi	r22, 0x08	; 8
    44d4:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    44d8:	fe 01       	movw	r30, r28
    44da:	eb 5a       	subi	r30, 0xAB	; 171
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	91 81       	ldd	r25, Z+1	; 0x01
    44e2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	aa e7       	ldi	r26, 0x7A	; 122
    44ec:	b4 e4       	ldi	r27, 0x44	; 68
    44ee:	8d ab       	std	Y+53, r24	; 0x35
    44f0:	9e ab       	std	Y+54, r25	; 0x36
    44f2:	af ab       	std	Y+55, r26	; 0x37
    44f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f6:	6d a9       	ldd	r22, Y+53	; 0x35
    44f8:	7e a9       	ldd	r23, Y+54	; 0x36
    44fa:	8f a9       	ldd	r24, Y+55	; 0x37
    44fc:	98 ad       	ldd	r25, Y+56	; 0x38
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	4a ef       	ldi	r20, 0xFA	; 250
    4504:	54 e4       	ldi	r21, 0x44	; 68
    4506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	89 ab       	std	Y+49, r24	; 0x31
    4510:	9a ab       	std	Y+50, r25	; 0x32
    4512:	ab ab       	std	Y+51, r26	; 0x33
    4514:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4516:	69 a9       	ldd	r22, Y+49	; 0x31
    4518:	7a a9       	ldd	r23, Y+50	; 0x32
    451a:	8b a9       	ldd	r24, Y+51	; 0x33
    451c:	9c a9       	ldd	r25, Y+52	; 0x34
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	40 e8       	ldi	r20, 0x80	; 128
    4524:	5f e3       	ldi	r21, 0x3F	; 63
    4526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    452a:	88 23       	and	r24, r24
    452c:	2c f4       	brge	.+10     	; 0x4538 <LCD_VoidSinsoul+0x328>
		__ticks = 1;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	98 ab       	std	Y+48, r25	; 0x30
    4534:	8f a7       	std	Y+47, r24	; 0x2f
    4536:	3f c0       	rjmp	.+126    	; 0x45b6 <LCD_VoidSinsoul+0x3a6>
	else if (__tmp > 65535)
    4538:	69 a9       	ldd	r22, Y+49	; 0x31
    453a:	7a a9       	ldd	r23, Y+50	; 0x32
    453c:	8b a9       	ldd	r24, Y+51	; 0x33
    453e:	9c a9       	ldd	r25, Y+52	; 0x34
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	3f ef       	ldi	r19, 0xFF	; 255
    4544:	4f e7       	ldi	r20, 0x7F	; 127
    4546:	57 e4       	ldi	r21, 0x47	; 71
    4548:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    454c:	18 16       	cp	r1, r24
    454e:	4c f5       	brge	.+82     	; 0x45a2 <LCD_VoidSinsoul+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4550:	6d a9       	ldd	r22, Y+53	; 0x35
    4552:	7e a9       	ldd	r23, Y+54	; 0x36
    4554:	8f a9       	ldd	r24, Y+55	; 0x37
    4556:	98 ad       	ldd	r25, Y+56	; 0x38
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e2       	ldi	r20, 0x20	; 32
    455e:	51 e4       	ldi	r21, 0x41	; 65
    4560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	bc 01       	movw	r22, r24
    456a:	cd 01       	movw	r24, r26
    456c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	98 ab       	std	Y+48, r25	; 0x30
    4576:	8f a7       	std	Y+47, r24	; 0x2f
    4578:	0f c0       	rjmp	.+30     	; 0x4598 <LCD_VoidSinsoul+0x388>
    457a:	88 ec       	ldi	r24, 0xC8	; 200
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	9e a7       	std	Y+46, r25	; 0x2e
    4580:	8d a7       	std	Y+45, r24	; 0x2d
    4582:	8d a5       	ldd	r24, Y+45	; 0x2d
    4584:	9e a5       	ldd	r25, Y+46	; 0x2e
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <LCD_VoidSinsoul+0x376>
    458a:	9e a7       	std	Y+46, r25	; 0x2e
    458c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4590:	98 a9       	ldd	r25, Y+48	; 0x30
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	98 ab       	std	Y+48, r25	; 0x30
    4596:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	8f a5       	ldd	r24, Y+47	; 0x2f
    459a:	98 a9       	ldd	r25, Y+48	; 0x30
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	69 f7       	brne	.-38     	; 0x457a <LCD_VoidSinsoul+0x36a>
    45a0:	14 c0       	rjmp	.+40     	; 0x45ca <LCD_VoidSinsoul+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a2:	69 a9       	ldd	r22, Y+49	; 0x31
    45a4:	7a a9       	ldd	r23, Y+50	; 0x32
    45a6:	8b a9       	ldd	r24, Y+51	; 0x33
    45a8:	9c a9       	ldd	r25, Y+52	; 0x34
    45aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	98 ab       	std	Y+48, r25	; 0x30
    45b4:	8f a7       	std	Y+47, r24	; 0x2f
    45b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    45b8:	98 a9       	ldd	r25, Y+48	; 0x30
    45ba:	9c a7       	std	Y+44, r25	; 0x2c
    45bc:	8b a7       	std	Y+43, r24	; 0x2b
    45be:	8b a5       	ldd	r24, Y+43	; 0x2b
    45c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <LCD_VoidSinsoul+0x3b2>
    45c6:	9c a7       	std	Y+44, r25	; 0x2c
    45c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_VoidClear();
    45ca:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(2,12);
    45ce:	82 e0       	ldi	r24, 0x02	; 2
    45d0:	6c e0       	ldi	r22, 0x0C	; 12
    45d2:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    45d6:	fe 01       	movw	r30, r28
    45d8:	eb 5a       	subi	r30, 0xAB	; 171
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	80 81       	ld	r24, Z
    45de:	91 81       	ldd	r25, Z+1	; 0x01
    45e0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	aa e7       	ldi	r26, 0x7A	; 122
    45ea:	b4 e4       	ldi	r27, 0x44	; 68
    45ec:	8f a3       	std	Y+39, r24	; 0x27
    45ee:	98 a7       	std	Y+40, r25	; 0x28
    45f0:	a9 a7       	std	Y+41, r26	; 0x29
    45f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f4:	6f a1       	ldd	r22, Y+39	; 0x27
    45f6:	78 a5       	ldd	r23, Y+40	; 0x28
    45f8:	89 a5       	ldd	r24, Y+41	; 0x29
    45fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4a ef       	ldi	r20, 0xFA	; 250
    4602:	54 e4       	ldi	r21, 0x44	; 68
    4604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	8b a3       	std	Y+35, r24	; 0x23
    460e:	9c a3       	std	Y+36, r25	; 0x24
    4610:	ad a3       	std	Y+37, r26	; 0x25
    4612:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4614:	6b a1       	ldd	r22, Y+35	; 0x23
    4616:	7c a1       	ldd	r23, Y+36	; 0x24
    4618:	8d a1       	ldd	r24, Y+37	; 0x25
    461a:	9e a1       	ldd	r25, Y+38	; 0x26
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e8       	ldi	r20, 0x80	; 128
    4622:	5f e3       	ldi	r21, 0x3F	; 63
    4624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4628:	88 23       	and	r24, r24
    462a:	2c f4       	brge	.+10     	; 0x4636 <LCD_VoidSinsoul+0x426>
		__ticks = 1;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	9a a3       	std	Y+34, r25	; 0x22
    4632:	89 a3       	std	Y+33, r24	; 0x21
    4634:	3f c0       	rjmp	.+126    	; 0x46b4 <LCD_VoidSinsoul+0x4a4>
	else if (__tmp > 65535)
    4636:	6b a1       	ldd	r22, Y+35	; 0x23
    4638:	7c a1       	ldd	r23, Y+36	; 0x24
    463a:	8d a1       	ldd	r24, Y+37	; 0x25
    463c:	9e a1       	ldd	r25, Y+38	; 0x26
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	3f ef       	ldi	r19, 0xFF	; 255
    4642:	4f e7       	ldi	r20, 0x7F	; 127
    4644:	57 e4       	ldi	r21, 0x47	; 71
    4646:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    464a:	18 16       	cp	r1, r24
    464c:	4c f5       	brge	.+82     	; 0x46a0 <LCD_VoidSinsoul+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464e:	6f a1       	ldd	r22, Y+39	; 0x27
    4650:	78 a5       	ldd	r23, Y+40	; 0x28
    4652:	89 a5       	ldd	r24, Y+41	; 0x29
    4654:	9a a5       	ldd	r25, Y+42	; 0x2a
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	40 e2       	ldi	r20, 0x20	; 32
    465c:	51 e4       	ldi	r21, 0x41	; 65
    465e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	bc 01       	movw	r22, r24
    4668:	cd 01       	movw	r24, r26
    466a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466e:	dc 01       	movw	r26, r24
    4670:	cb 01       	movw	r24, r22
    4672:	9a a3       	std	Y+34, r25	; 0x22
    4674:	89 a3       	std	Y+33, r24	; 0x21
    4676:	0f c0       	rjmp	.+30     	; 0x4696 <LCD_VoidSinsoul+0x486>
    4678:	88 ec       	ldi	r24, 0xC8	; 200
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	98 a3       	std	Y+32, r25	; 0x20
    467e:	8f 8f       	std	Y+31, r24	; 0x1f
    4680:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4682:	98 a1       	ldd	r25, Y+32	; 0x20
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	f1 f7       	brne	.-4      	; 0x4684 <LCD_VoidSinsoul+0x474>
    4688:	98 a3       	std	Y+32, r25	; 0x20
    468a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468c:	89 a1       	ldd	r24, Y+33	; 0x21
    468e:	9a a1       	ldd	r25, Y+34	; 0x22
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	9a a3       	std	Y+34, r25	; 0x22
    4694:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4696:	89 a1       	ldd	r24, Y+33	; 0x21
    4698:	9a a1       	ldd	r25, Y+34	; 0x22
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	69 f7       	brne	.-38     	; 0x4678 <LCD_VoidSinsoul+0x468>
    469e:	14 c0       	rjmp	.+40     	; 0x46c8 <LCD_VoidSinsoul+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a0:	6b a1       	ldd	r22, Y+35	; 0x23
    46a2:	7c a1       	ldd	r23, Y+36	; 0x24
    46a4:	8d a1       	ldd	r24, Y+37	; 0x25
    46a6:	9e a1       	ldd	r25, Y+38	; 0x26
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	9a a3       	std	Y+34, r25	; 0x22
    46b2:	89 a3       	std	Y+33, r24	; 0x21
    46b4:	89 a1       	ldd	r24, Y+33	; 0x21
    46b6:	9a a1       	ldd	r25, Y+34	; 0x22
    46b8:	9e 8f       	std	Y+30, r25	; 0x1e
    46ba:	8d 8f       	std	Y+29, r24	; 0x1d
    46bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <LCD_VoidSinsoul+0x4b0>
    46c4:	9e 8f       	std	Y+30, r25	; 0x1e
    46c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_VoidClear();
    46c8:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(1,14);
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	6e e0       	ldi	r22, 0x0E	; 14
    46d0:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    46d4:	fe 01       	movw	r30, r28
    46d6:	eb 5a       	subi	r30, 0xAB	; 171
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 81       	ld	r24, Z
    46dc:	91 81       	ldd	r25, Z+1	; 0x01
    46de:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	aa e7       	ldi	r26, 0x7A	; 122
    46e8:	b4 e4       	ldi	r27, 0x44	; 68
    46ea:	89 8f       	std	Y+25, r24	; 0x19
    46ec:	9a 8f       	std	Y+26, r25	; 0x1a
    46ee:	ab 8f       	std	Y+27, r26	; 0x1b
    46f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46f2:	69 8d       	ldd	r22, Y+25	; 0x19
    46f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	4a ef       	ldi	r20, 0xFA	; 250
    4700:	54 e4       	ldi	r21, 0x44	; 68
    4702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	8d 8b       	std	Y+21, r24	; 0x15
    470c:	9e 8b       	std	Y+22, r25	; 0x16
    470e:	af 8b       	std	Y+23, r26	; 0x17
    4710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4712:	6d 89       	ldd	r22, Y+21	; 0x15
    4714:	7e 89       	ldd	r23, Y+22	; 0x16
    4716:	8f 89       	ldd	r24, Y+23	; 0x17
    4718:	98 8d       	ldd	r25, Y+24	; 0x18
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	40 e8       	ldi	r20, 0x80	; 128
    4720:	5f e3       	ldi	r21, 0x3F	; 63
    4722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4726:	88 23       	and	r24, r24
    4728:	2c f4       	brge	.+10     	; 0x4734 <LCD_VoidSinsoul+0x524>
		__ticks = 1;
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	9c 8b       	std	Y+20, r25	; 0x14
    4730:	8b 8b       	std	Y+19, r24	; 0x13
    4732:	3f c0       	rjmp	.+126    	; 0x47b2 <LCD_VoidSinsoul+0x5a2>
	else if (__tmp > 65535)
    4734:	6d 89       	ldd	r22, Y+21	; 0x15
    4736:	7e 89       	ldd	r23, Y+22	; 0x16
    4738:	8f 89       	ldd	r24, Y+23	; 0x17
    473a:	98 8d       	ldd	r25, Y+24	; 0x18
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	3f ef       	ldi	r19, 0xFF	; 255
    4740:	4f e7       	ldi	r20, 0x7F	; 127
    4742:	57 e4       	ldi	r21, 0x47	; 71
    4744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4748:	18 16       	cp	r1, r24
    474a:	4c f5       	brge	.+82     	; 0x479e <LCD_VoidSinsoul+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474c:	69 8d       	ldd	r22, Y+25	; 0x19
    474e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	40 e2       	ldi	r20, 0x20	; 32
    475a:	51 e4       	ldi	r21, 0x41	; 65
    475c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	bc 01       	movw	r22, r24
    4766:	cd 01       	movw	r24, r26
    4768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	9c 8b       	std	Y+20, r25	; 0x14
    4772:	8b 8b       	std	Y+19, r24	; 0x13
    4774:	0f c0       	rjmp	.+30     	; 0x4794 <LCD_VoidSinsoul+0x584>
    4776:	88 ec       	ldi	r24, 0xC8	; 200
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	9a 8b       	std	Y+18, r25	; 0x12
    477c:	89 8b       	std	Y+17, r24	; 0x11
    477e:	89 89       	ldd	r24, Y+17	; 0x11
    4780:	9a 89       	ldd	r25, Y+18	; 0x12
    4782:	01 97       	sbiw	r24, 0x01	; 1
    4784:	f1 f7       	brne	.-4      	; 0x4782 <LCD_VoidSinsoul+0x572>
    4786:	9a 8b       	std	Y+18, r25	; 0x12
    4788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    478a:	8b 89       	ldd	r24, Y+19	; 0x13
    478c:	9c 89       	ldd	r25, Y+20	; 0x14
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	9c 8b       	std	Y+20, r25	; 0x14
    4792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4794:	8b 89       	ldd	r24, Y+19	; 0x13
    4796:	9c 89       	ldd	r25, Y+20	; 0x14
    4798:	00 97       	sbiw	r24, 0x00	; 0
    479a:	69 f7       	brne	.-38     	; 0x4776 <LCD_VoidSinsoul+0x566>
    479c:	14 c0       	rjmp	.+40     	; 0x47c6 <LCD_VoidSinsoul+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    479e:	6d 89       	ldd	r22, Y+21	; 0x15
    47a0:	7e 89       	ldd	r23, Y+22	; 0x16
    47a2:	8f 89       	ldd	r24, Y+23	; 0x17
    47a4:	98 8d       	ldd	r25, Y+24	; 0x18
    47a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	9c 8b       	std	Y+20, r25	; 0x14
    47b0:	8b 8b       	std	Y+19, r24	; 0x13
    47b2:	8b 89       	ldd	r24, Y+19	; 0x13
    47b4:	9c 89       	ldd	r25, Y+20	; 0x14
    47b6:	98 8b       	std	Y+16, r25	; 0x10
    47b8:	8f 87       	std	Y+15, r24	; 0x0f
    47ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    47bc:	98 89       	ldd	r25, Y+16	; 0x10
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	f1 f7       	brne	.-4      	; 0x47be <LCD_VoidSinsoul+0x5ae>
    47c2:	98 8b       	std	Y+16, r25	; 0x10
    47c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_VoidClear();
    47c6:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(2,16);
    47ca:	82 e0       	ldi	r24, 0x02	; 2
    47cc:	60 e1       	ldi	r22, 0x10	; 16
    47ce:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
	LCD_VoidSentSringAndNum(Copy_Pu8StringAndNum);
    47d2:	fe 01       	movw	r30, r28
    47d4:	eb 5a       	subi	r30, 0xAB	; 171
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	aa e7       	ldi	r26, 0x7A	; 122
    47e6:	b4 e4       	ldi	r27, 0x44	; 68
    47e8:	8b 87       	std	Y+11, r24	; 0x0b
    47ea:	9c 87       	std	Y+12, r25	; 0x0c
    47ec:	ad 87       	std	Y+13, r26	; 0x0d
    47ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	4a ef       	ldi	r20, 0xFA	; 250
    47fe:	54 e4       	ldi	r21, 0x44	; 68
    4800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	8f 83       	std	Y+7, r24	; 0x07
    480a:	98 87       	std	Y+8, r25	; 0x08
    480c:	a9 87       	std	Y+9, r26	; 0x09
    480e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4810:	6f 81       	ldd	r22, Y+7	; 0x07
    4812:	78 85       	ldd	r23, Y+8	; 0x08
    4814:	89 85       	ldd	r24, Y+9	; 0x09
    4816:	9a 85       	ldd	r25, Y+10	; 0x0a
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	40 e8       	ldi	r20, 0x80	; 128
    481e:	5f e3       	ldi	r21, 0x3F	; 63
    4820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4824:	88 23       	and	r24, r24
    4826:	2c f4       	brge	.+10     	; 0x4832 <LCD_VoidSinsoul+0x622>
		__ticks = 1;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
    4830:	3f c0       	rjmp	.+126    	; 0x48b0 <LCD_VoidSinsoul+0x6a0>
	else if (__tmp > 65535)
    4832:	6f 81       	ldd	r22, Y+7	; 0x07
    4834:	78 85       	ldd	r23, Y+8	; 0x08
    4836:	89 85       	ldd	r24, Y+9	; 0x09
    4838:	9a 85       	ldd	r25, Y+10	; 0x0a
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	3f ef       	ldi	r19, 0xFF	; 255
    483e:	4f e7       	ldi	r20, 0x7F	; 127
    4840:	57 e4       	ldi	r21, 0x47	; 71
    4842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4846:	18 16       	cp	r1, r24
    4848:	4c f5       	brge	.+82     	; 0x489c <LCD_VoidSinsoul+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    484a:	6b 85       	ldd	r22, Y+11	; 0x0b
    484c:	7c 85       	ldd	r23, Y+12	; 0x0c
    484e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4850:	9e 85       	ldd	r25, Y+14	; 0x0e
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	40 e2       	ldi	r20, 0x20	; 32
    4858:	51 e4       	ldi	r21, 0x41	; 65
    485a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	bc 01       	movw	r22, r24
    4864:	cd 01       	movw	r24, r26
    4866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	9e 83       	std	Y+6, r25	; 0x06
    4870:	8d 83       	std	Y+5, r24	; 0x05
    4872:	0f c0       	rjmp	.+30     	; 0x4892 <LCD_VoidSinsoul+0x682>
    4874:	88 ec       	ldi	r24, 0xC8	; 200
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	9c 83       	std	Y+4, r25	; 0x04
    487a:	8b 83       	std	Y+3, r24	; 0x03
    487c:	8b 81       	ldd	r24, Y+3	; 0x03
    487e:	9c 81       	ldd	r25, Y+4	; 0x04
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	f1 f7       	brne	.-4      	; 0x4880 <LCD_VoidSinsoul+0x670>
    4884:	9c 83       	std	Y+4, r25	; 0x04
    4886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4888:	8d 81       	ldd	r24, Y+5	; 0x05
    488a:	9e 81       	ldd	r25, Y+6	; 0x06
    488c:	01 97       	sbiw	r24, 0x01	; 1
    488e:	9e 83       	std	Y+6, r25	; 0x06
    4890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4892:	8d 81       	ldd	r24, Y+5	; 0x05
    4894:	9e 81       	ldd	r25, Y+6	; 0x06
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	69 f7       	brne	.-38     	; 0x4874 <LCD_VoidSinsoul+0x664>
    489a:	14 c0       	rjmp	.+40     	; 0x48c4 <LCD_VoidSinsoul+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489c:	6f 81       	ldd	r22, Y+7	; 0x07
    489e:	78 85       	ldd	r23, Y+8	; 0x08
    48a0:	89 85       	ldd	r24, Y+9	; 0x09
    48a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	8d 83       	std	Y+5, r24	; 0x05
    48b0:	8d 81       	ldd	r24, Y+5	; 0x05
    48b2:	9e 81       	ldd	r25, Y+6	; 0x06
    48b4:	9a 83       	std	Y+2, r25	; 0x02
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	9a 81       	ldd	r25, Y+2	; 0x02
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <LCD_VoidSinsoul+0x6ac>
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_VoidClear();
    48c4:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
	LCD_u8GoToLine(1,0);
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	60 e0       	ldi	r22, 0x00	; 0
    48cc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <LCD_u8GoToLine>
}  
    48d0:	ca 5a       	subi	r28, 0xAA	; 170
    48d2:	df 4f       	sbci	r29, 0xFF	; 255
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	1f 91       	pop	r17
    48e4:	0f 91       	pop	r16
    48e6:	08 95       	ret

000048e8 <LCD_voidSendNumber>:
void LCD_voidSendNumber(u32 Copy_u8Number)
{
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	68 97       	sbiw	r28, 0x18	; 24
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	6d 8b       	std	Y+21, r22	; 0x15
    48fe:	7e 8b       	std	Y+22, r23	; 0x16
    4900:	8f 8b       	std	Y+23, r24	; 0x17
    4902:	98 8f       	std	Y+24, r25	; 0x18
  u32 Local_remainder=0,Local_reverse=0,Local_TMP=0,Local_Counter,Local_TMPNum=Copy_u8Number;
    4904:	19 8a       	std	Y+17, r1	; 0x11
    4906:	1a 8a       	std	Y+18, r1	; 0x12
    4908:	1b 8a       	std	Y+19, r1	; 0x13
    490a:	1c 8a       	std	Y+20, r1	; 0x14
    490c:	1d 86       	std	Y+13, r1	; 0x0d
    490e:	1e 86       	std	Y+14, r1	; 0x0e
    4910:	1f 86       	std	Y+15, r1	; 0x0f
    4912:	18 8a       	std	Y+16, r1	; 0x10
    4914:	19 86       	std	Y+9, r1	; 0x09
    4916:	1a 86       	std	Y+10, r1	; 0x0a
    4918:	1b 86       	std	Y+11, r1	; 0x0b
    491a:	1c 86       	std	Y+12, r1	; 0x0c
    491c:	8d 89       	ldd	r24, Y+21	; 0x15
    491e:	9e 89       	ldd	r25, Y+22	; 0x16
    4920:	af 89       	ldd	r26, Y+23	; 0x17
    4922:	b8 8d       	ldd	r27, Y+24	; 0x18
    4924:	89 83       	std	Y+1, r24	; 0x01
    4926:	9a 83       	std	Y+2, r25	; 0x02
    4928:	ab 83       	std	Y+3, r26	; 0x03
    492a:	bc 83       	std	Y+4, r27	; 0x04
  if (Copy_u8Number==0)
    492c:	8d 89       	ldd	r24, Y+21	; 0x15
    492e:	9e 89       	ldd	r25, Y+22	; 0x16
    4930:	af 89       	ldd	r26, Y+23	; 0x17
    4932:	b8 8d       	ldd	r27, Y+24	; 0x18
    4934:	00 97       	sbiw	r24, 0x00	; 0
    4936:	a1 05       	cpc	r26, r1
    4938:	b1 05       	cpc	r27, r1
    493a:	21 f4       	brne	.+8      	; 0x4944 <LCD_voidSendNumber+0x5c>
  {

    LCD_VoidSendChar('0');
    493c:	80 e3       	ldi	r24, 0x30	; 48
    493e:	0e 94 20 19 	call	0x3240	; 0x3240 <LCD_VoidSendChar>
    4942:	d4 c0       	rjmp	.+424    	; 0x4aec <LCD_voidSendNumber+0x204>
  }
  else{
  for(Local_Counter=-1;0==Local_TMP;Local_Counter++)
    4944:	8f ef       	ldi	r24, 0xFF	; 255
    4946:	9f ef       	ldi	r25, 0xFF	; 255
    4948:	af ef       	ldi	r26, 0xFF	; 255
    494a:	bf ef       	ldi	r27, 0xFF	; 255
    494c:	8d 83       	std	Y+5, r24	; 0x05
    494e:	9e 83       	std	Y+6, r25	; 0x06
    4950:	af 83       	std	Y+7, r26	; 0x07
    4952:	b8 87       	std	Y+8, r27	; 0x08
    4954:	2f c0       	rjmp	.+94     	; 0x49b4 <LCD_voidSendNumber+0xcc>
  {
       Local_TMP=Local_TMPNum %10;
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	9a 81       	ldd	r25, Y+2	; 0x02
    495a:	ab 81       	ldd	r26, Y+3	; 0x03
    495c:	bc 81       	ldd	r27, Y+4	; 0x04
    495e:	2a e0       	ldi	r18, 0x0A	; 10
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	40 e0       	ldi	r20, 0x00	; 0
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	89 87       	std	Y+9, r24	; 0x09
    4974:	9a 87       	std	Y+10, r25	; 0x0a
    4976:	ab 87       	std	Y+11, r26	; 0x0b
    4978:	bc 87       	std	Y+12, r27	; 0x0c
       Local_TMPNum=Local_TMPNum / 10;
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	9a 81       	ldd	r25, Y+2	; 0x02
    497e:	ab 81       	ldd	r26, Y+3	; 0x03
    4980:	bc 81       	ldd	r27, Y+4	; 0x04
    4982:	2a e0       	ldi	r18, 0x0A	; 10
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	50 e0       	ldi	r21, 0x00	; 0
    498a:	bc 01       	movw	r22, r24
    498c:	cd 01       	movw	r24, r26
    498e:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4992:	da 01       	movw	r26, r20
    4994:	c9 01       	movw	r24, r18
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	9a 83       	std	Y+2, r25	; 0x02
    499a:	ab 83       	std	Y+3, r26	; 0x03
    499c:	bc 83       	std	Y+4, r27	; 0x04
  {

    LCD_VoidSendChar('0');
  }
  else{
  for(Local_Counter=-1;0==Local_TMP;Local_Counter++)
    499e:	8d 81       	ldd	r24, Y+5	; 0x05
    49a0:	9e 81       	ldd	r25, Y+6	; 0x06
    49a2:	af 81       	ldd	r26, Y+7	; 0x07
    49a4:	b8 85       	ldd	r27, Y+8	; 0x08
    49a6:	01 96       	adiw	r24, 0x01	; 1
    49a8:	a1 1d       	adc	r26, r1
    49aa:	b1 1d       	adc	r27, r1
    49ac:	8d 83       	std	Y+5, r24	; 0x05
    49ae:	9e 83       	std	Y+6, r25	; 0x06
    49b0:	af 83       	std	Y+7, r26	; 0x07
    49b2:	b8 87       	std	Y+8, r27	; 0x08
    49b4:	89 85       	ldd	r24, Y+9	; 0x09
    49b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    49ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	a1 05       	cpc	r26, r1
    49c0:	b1 05       	cpc	r27, r1
    49c2:	49 f2       	breq	.-110    	; 0x4956 <LCD_voidSendNumber+0x6e>
    49c4:	3e c0       	rjmp	.+124    	; 0x4a42 <LCD_voidSendNumber+0x15a>
       Local_TMP=Local_TMPNum %10;
       Local_TMPNum=Local_TMPNum / 10;
  }
  while(Copy_u8Number!=0)
  {
    Local_remainder=Copy_u8Number %10;
    49c6:	8d 89       	ldd	r24, Y+21	; 0x15
    49c8:	9e 89       	ldd	r25, Y+22	; 0x16
    49ca:	af 89       	ldd	r26, Y+23	; 0x17
    49cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    49ce:	2a e0       	ldi	r18, 0x0A	; 10
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	40 e0       	ldi	r20, 0x00	; 0
    49d4:	50 e0       	ldi	r21, 0x00	; 0
    49d6:	bc 01       	movw	r22, r24
    49d8:	cd 01       	movw	r24, r26
    49da:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	89 8b       	std	Y+17, r24	; 0x11
    49e4:	9a 8b       	std	Y+18, r25	; 0x12
    49e6:	ab 8b       	std	Y+19, r26	; 0x13
    49e8:	bc 8b       	std	Y+20, r27	; 0x14
    Local_reverse=Local_reverse*10+Local_remainder;
    49ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ee:	af 85       	ldd	r26, Y+15	; 0x0f
    49f0:	b8 89       	ldd	r27, Y+16	; 0x10
    49f2:	2a e0       	ldi	r18, 0x0A	; 10
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e0       	ldi	r20, 0x00	; 0
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	bc 01       	movw	r22, r24
    49fc:	cd 01       	movw	r24, r26
    49fe:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__mulsi3>
    4a02:	9b 01       	movw	r18, r22
    4a04:	ac 01       	movw	r20, r24
    4a06:	89 89       	ldd	r24, Y+17	; 0x11
    4a08:	9a 89       	ldd	r25, Y+18	; 0x12
    4a0a:	ab 89       	ldd	r26, Y+19	; 0x13
    4a0c:	bc 89       	ldd	r27, Y+20	; 0x14
    4a0e:	82 0f       	add	r24, r18
    4a10:	93 1f       	adc	r25, r19
    4a12:	a4 1f       	adc	r26, r20
    4a14:	b5 1f       	adc	r27, r21
    4a16:	8d 87       	std	Y+13, r24	; 0x0d
    4a18:	9e 87       	std	Y+14, r25	; 0x0e
    4a1a:	af 87       	std	Y+15, r26	; 0x0f
    4a1c:	b8 8b       	std	Y+16, r27	; 0x10
    Copy_u8Number=Copy_u8Number / 10;
    4a1e:	8d 89       	ldd	r24, Y+21	; 0x15
    4a20:	9e 89       	ldd	r25, Y+22	; 0x16
    4a22:	af 89       	ldd	r26, Y+23	; 0x17
    4a24:	b8 8d       	ldd	r27, Y+24	; 0x18
    4a26:	2a e0       	ldi	r18, 0x0A	; 10
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4a36:	da 01       	movw	r26, r20
    4a38:	c9 01       	movw	r24, r18
    4a3a:	8d 8b       	std	Y+21, r24	; 0x15
    4a3c:	9e 8b       	std	Y+22, r25	; 0x16
    4a3e:	af 8b       	std	Y+23, r26	; 0x17
    4a40:	b8 8f       	std	Y+24, r27	; 0x18
  for(Local_Counter=-1;0==Local_TMP;Local_Counter++)
  {
       Local_TMP=Local_TMPNum %10;
       Local_TMPNum=Local_TMPNum / 10;
  }
  while(Copy_u8Number!=0)
    4a42:	8d 89       	ldd	r24, Y+21	; 0x15
    4a44:	9e 89       	ldd	r25, Y+22	; 0x16
    4a46:	af 89       	ldd	r26, Y+23	; 0x17
    4a48:	b8 8d       	ldd	r27, Y+24	; 0x18
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	a1 05       	cpc	r26, r1
    4a4e:	b1 05       	cpc	r27, r1
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <LCD_voidSendNumber+0x16c>
    4a52:	b9 cf       	rjmp	.-142    	; 0x49c6 <LCD_voidSendNumber+0xde>
  {
    Local_remainder=Copy_u8Number %10;
    Local_reverse=Local_reverse*10+Local_remainder;
    Copy_u8Number=Copy_u8Number / 10;
  }
  Local_TMP=0;
    4a54:	19 86       	std	Y+9, r1	; 0x09
    4a56:	1a 86       	std	Y+10, r1	; 0x0a
    4a58:	1b 86       	std	Y+11, r1	; 0x0b
    4a5a:	1c 86       	std	Y+12, r1	; 0x0c
    4a5c:	28 c0       	rjmp	.+80     	; 0x4aae <LCD_voidSendNumber+0x1c6>
  while (Local_reverse!=0)
  {
    Local_TMP=Local_reverse%10;
    4a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a62:	af 85       	ldd	r26, Y+15	; 0x0f
    4a64:	b8 89       	ldd	r27, Y+16	; 0x10
    4a66:	2a e0       	ldi	r18, 0x0A	; 10
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	40 e0       	ldi	r20, 0x00	; 0
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	bc 01       	movw	r22, r24
    4a70:	cd 01       	movw	r24, r26
    4a72:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	89 87       	std	Y+9, r24	; 0x09
    4a7c:	9a 87       	std	Y+10, r25	; 0x0a
    4a7e:	ab 87       	std	Y+11, r26	; 0x0b
    4a80:	bc 87       	std	Y+12, r27	; 0x0c
    LCD_VoidSendChar(Local_TMP+'0');
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	80 5d       	subi	r24, 0xD0	; 208
    4a86:	0e 94 20 19 	call	0x3240	; 0x3240 <LCD_VoidSendChar>
    Local_reverse=Local_reverse / 10;
    4a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a8e:	af 85       	ldd	r26, Y+15	; 0x0f
    4a90:	b8 89       	ldd	r27, Y+16	; 0x10
    4a92:	2a e0       	ldi	r18, 0x0A	; 10
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4aa2:	da 01       	movw	r26, r20
    4aa4:	c9 01       	movw	r24, r18
    4aa6:	8d 87       	std	Y+13, r24	; 0x0d
    4aa8:	9e 87       	std	Y+14, r25	; 0x0e
    4aaa:	af 87       	std	Y+15, r26	; 0x0f
    4aac:	b8 8b       	std	Y+16, r27	; 0x10
    Local_remainder=Copy_u8Number %10;
    Local_reverse=Local_reverse*10+Local_remainder;
    Copy_u8Number=Copy_u8Number / 10;
  }
  Local_TMP=0;
  while (Local_reverse!=0)
    4aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab2:	af 85       	ldd	r26, Y+15	; 0x0f
    4ab4:	b8 89       	ldd	r27, Y+16	; 0x10
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	a1 05       	cpc	r26, r1
    4aba:	b1 05       	cpc	r27, r1
    4abc:	81 f6       	brne	.-96     	; 0x4a5e <LCD_voidSendNumber+0x176>
    4abe:	0e c0       	rjmp	.+28     	; 0x4adc <LCD_voidSendNumber+0x1f4>
    LCD_VoidSendChar(Local_TMP+'0');
    Local_reverse=Local_reverse / 10;
  }
  while(0 != Local_Counter)
  {
    LCD_VoidSendChar('0');
    4ac0:	80 e3       	ldi	r24, 0x30	; 48
    4ac2:	0e 94 20 19 	call	0x3240	; 0x3240 <LCD_VoidSendChar>

    Local_Counter--;
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	af 81       	ldd	r26, Y+7	; 0x07
    4acc:	b8 85       	ldd	r27, Y+8	; 0x08
    4ace:	01 97       	sbiw	r24, 0x01	; 1
    4ad0:	a1 09       	sbc	r26, r1
    4ad2:	b1 09       	sbc	r27, r1
    4ad4:	8d 83       	std	Y+5, r24	; 0x05
    4ad6:	9e 83       	std	Y+6, r25	; 0x06
    4ad8:	af 83       	std	Y+7, r26	; 0x07
    4ada:	b8 87       	std	Y+8, r27	; 0x08
  {
    Local_TMP=Local_reverse%10;
    LCD_VoidSendChar(Local_TMP+'0');
    Local_reverse=Local_reverse / 10;
  }
  while(0 != Local_Counter)
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	af 81       	ldd	r26, Y+7	; 0x07
    4ae2:	b8 85       	ldd	r27, Y+8	; 0x08
    4ae4:	00 97       	sbiw	r24, 0x00	; 0
    4ae6:	a1 05       	cpc	r26, r1
    4ae8:	b1 05       	cpc	r27, r1
    4aea:	51 f7       	brne	.-44     	; 0x4ac0 <LCD_voidSendNumber+0x1d8>

    Local_Counter--;
  }
  }

}
    4aec:	68 96       	adiw	r28, 0x18	; 24
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	cf 91       	pop	r28
    4afa:	df 91       	pop	r29
    4afc:	08 95       	ret

00004afe <VoidServoInit>:
#include "TIMERS_interface.h"
#include "ServoMotor_interface.h"
#include "TIMERS_private.h"

void VoidServoInit(void)
{
    4afe:	df 93       	push	r29
    4b00:	cf 93       	push	r28
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62
	TIMERS_VoidTimer1Init();
    4b06:	0e 94 85 2b 	call	0x570a	; 0x570a <TIMERS_VoidTimer1Init>
}
    4b0a:	cf 91       	pop	r28
    4b0c:	df 91       	pop	r29
    4b0e:	08 95       	ret

00004b10 <VoidServoSetAngle>:
void VoidServoSetAngle (u8 Copy_u8Angle)
{
    4b10:	0f 93       	push	r16
    4b12:	1f 93       	push	r17
    4b14:	df 93       	push	r29
    4b16:	cf 93       	push	r28
    4b18:	0f 92       	push	r0
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = ((Copy_u8Angle * 1000UL)/180) + 999;
    4b20:	0a e4       	ldi	r16, 0x4A	; 74
    4b22:	10 e0       	ldi	r17, 0x00	; 0
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	88 2f       	mov	r24, r24
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	a0 e0       	ldi	r26, 0x00	; 0
    4b2c:	b0 e0       	ldi	r27, 0x00	; 0
    4b2e:	28 ee       	ldi	r18, 0xE8	; 232
    4b30:	33 e0       	ldi	r19, 0x03	; 3
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__mulsi3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	24 eb       	ldi	r18, 0xB4	; 180
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	50 e0       	ldi	r21, 0x00	; 0
    4b4a:	bc 01       	movw	r22, r24
    4b4c:	cd 01       	movw	r24, r26
    4b4e:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4b52:	da 01       	movw	r26, r20
    4b54:	c9 01       	movw	r24, r18
    4b56:	89 51       	subi	r24, 0x19	; 25
    4b58:	9c 4f       	sbci	r25, 0xFC	; 252
    4b5a:	f8 01       	movw	r30, r16
    4b5c:	91 83       	std	Z+1, r25	; 0x01
    4b5e:	80 83       	st	Z, r24
}
    4b60:	0f 90       	pop	r0
    4b62:	cf 91       	pop	r28
    4b64:	df 91       	pop	r29
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	08 95       	ret

00004b6c <Step_VoidSetAngle>:
#include <util/delay.h>
/* MCAL */
#include "DIO_Interface.h"
#include "StepperMotor_interface.h"
void Step_VoidSetAngle(u8 Copy_u8Direction ,u16 Copy_u16Angle)
{
    4b6c:	0f 93       	push	r16
    4b6e:	1f 93       	push	r17
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
    4b78:	cf 57       	subi	r28, 0x7F	; 127
    4b7a:	d0 40       	sbci	r29, 0x00	; 0
    4b7c:	0f b6       	in	r0, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	cd bf       	out	0x3d, r28	; 61
    4b86:	fe 01       	movw	r30, r28
    4b88:	e3 58       	subi	r30, 0x83	; 131
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	80 83       	st	Z, r24
    4b8e:	fe 01       	movw	r30, r28
    4b90:	e2 58       	subi	r30, 0x82	; 130
    4b92:	ff 4f       	sbci	r31, 0xFF	; 255
    4b94:	71 83       	std	Z+1, r23	; 0x01
    4b96:	60 83       	st	Z, r22
	u32 Local_u32NumberOfSteps ,Local_u32NumberOfIterations ,Local_u32Counter ;
	
	 /* Calculate Number Of Steps */
	Local_u32NumberOfSteps = (Copy_u16Angle * 2048UL)/360;
    4b98:	fe 01       	movw	r30, r28
    4b9a:	e2 58       	subi	r30, 0x82	; 130
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	80 81       	ld	r24, Z
    4ba0:	91 81       	ldd	r25, Z+1	; 0x01
    4ba2:	cc 01       	movw	r24, r24
    4ba4:	a0 e0       	ldi	r26, 0x00	; 0
    4ba6:	b0 e0       	ldi	r27, 0x00	; 0
    4ba8:	07 2e       	mov	r0, r23
    4baa:	7b e0       	ldi	r23, 0x0B	; 11
    4bac:	88 0f       	add	r24, r24
    4bae:	99 1f       	adc	r25, r25
    4bb0:	aa 1f       	adc	r26, r26
    4bb2:	bb 1f       	adc	r27, r27
    4bb4:	7a 95       	dec	r23
    4bb6:	d1 f7       	brne	.-12     	; 0x4bac <Step_VoidSetAngle+0x40>
    4bb8:	70 2d       	mov	r23, r0
    4bba:	8e 01       	movw	r16, r28
    4bbc:	07 58       	subi	r16, 0x87	; 135
    4bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc0:	28 e6       	ldi	r18, 0x68	; 104
    4bc2:	31 e0       	ldi	r19, 0x01	; 1
    4bc4:	40 e0       	ldi	r20, 0x00	; 0
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	bc 01       	movw	r22, r24
    4bca:	cd 01       	movw	r24, r26
    4bcc:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    4bd0:	da 01       	movw	r26, r20
    4bd2:	c9 01       	movw	r24, r18
    4bd4:	f8 01       	movw	r30, r16
    4bd6:	80 83       	st	Z, r24
    4bd8:	91 83       	std	Z+1, r25	; 0x01
    4bda:	a2 83       	std	Z+2, r26	; 0x02
    4bdc:	b3 83       	std	Z+3, r27	; 0x03
	
	/* Calculate Number Of Iterations */
	Local_u32NumberOfIterations = Local_u32NumberOfSteps/4 ;
    4bde:	9e 01       	movw	r18, r28
    4be0:	2b 58       	subi	r18, 0x8B	; 139
    4be2:	3f 4f       	sbci	r19, 0xFF	; 255
    4be4:	fe 01       	movw	r30, r28
    4be6:	e7 58       	subi	r30, 0x87	; 135
    4be8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bea:	80 81       	ld	r24, Z
    4bec:	91 81       	ldd	r25, Z+1	; 0x01
    4bee:	a2 81       	ldd	r26, Z+2	; 0x02
    4bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    4bf2:	b6 95       	lsr	r27
    4bf4:	a7 95       	ror	r26
    4bf6:	97 95       	ror	r25
    4bf8:	87 95       	ror	r24
    4bfa:	b6 95       	lsr	r27
    4bfc:	a7 95       	ror	r26
    4bfe:	97 95       	ror	r25
    4c00:	87 95       	ror	r24
    4c02:	f9 01       	movw	r30, r18
    4c04:	80 83       	st	Z, r24
    4c06:	91 83       	std	Z+1, r25	; 0x01
    4c08:	a2 83       	std	Z+2, r26	; 0x02
    4c0a:	b3 83       	std	Z+3, r27	; 0x03

	if(Copy_u8Direction == StepperMotor_u8_AntiClockWise )
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	e3 58       	subi	r30, 0x83	; 131
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	80 81       	ld	r24, Z
    4c14:	81 30       	cpi	r24, 0x01	; 1
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <Step_VoidSetAngle+0xae>
    4c18:	1e c3       	rjmp	.+1596   	; 0x5256 <Step_VoidSetAngle+0x6ea>
	{
		for(Local_u32Counter = 0; Local_u32Counter < Local_u32NumberOfIterations; Local_u32Counter++)
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	ef 58       	subi	r30, 0x8F	; 143
    4c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c20:	10 82       	st	Z, r1
    4c22:	11 82       	std	Z+1, r1	; 0x01
    4c24:	12 82       	std	Z+2, r1	; 0x02
    4c26:	13 82       	std	Z+3, r1	; 0x03
    4c28:	00 c3       	rjmp	.+1536   	; 0x522a <Step_VoidSetAngle+0x6be>
		{
			/*                        Step1                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_LOW);
    4c2a:	82 e0       	ldi	r24, 0x02	; 2
    4c2c:	63 e0       	ldi	r22, 0x03	; 3
    4c2e:	40 e0       	ldi	r20, 0x00	; 0
    4c30:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    4c34:	82 e0       	ldi	r24, 0x02	; 2
    4c36:	64 e0       	ldi	r22, 0x04	; 4
    4c38:	41 e0       	ldi	r20, 0x01	; 1
    4c3a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    4c3e:	82 e0       	ldi	r24, 0x02	; 2
    4c40:	65 e0       	ldi	r22, 0x05	; 5
    4c42:	41 e0       	ldi	r20, 0x01	; 1
    4c44:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    4c48:	82 e0       	ldi	r24, 0x02	; 2
    4c4a:	66 e0       	ldi	r22, 0x06	; 6
    4c4c:	41 e0       	ldi	r20, 0x01	; 1
    4c4e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    4c52:	fe 01       	movw	r30, r28
    4c54:	e3 59       	subi	r30, 0x93	; 147
    4c56:	ff 4f       	sbci	r31, 0xFF	; 255
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	a0 e2       	ldi	r26, 0x20	; 32
    4c5e:	b1 e4       	ldi	r27, 0x41	; 65
    4c60:	80 83       	st	Z, r24
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	a2 83       	std	Z+2, r26	; 0x02
    4c66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c68:	8e 01       	movw	r16, r28
    4c6a:	07 59       	subi	r16, 0x97	; 151
    4c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e3 59       	subi	r30, 0x93	; 147
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	60 81       	ld	r22, Z
    4c76:	71 81       	ldd	r23, Z+1	; 0x01
    4c78:	82 81       	ldd	r24, Z+2	; 0x02
    4c7a:	93 81       	ldd	r25, Z+3	; 0x03
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	4a ef       	ldi	r20, 0xFA	; 250
    4c82:	54 e4       	ldi	r21, 0x44	; 68
    4c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	f8 01       	movw	r30, r16
    4c8e:	80 83       	st	Z, r24
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	a2 83       	std	Z+2, r26	; 0x02
    4c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c96:	fe 01       	movw	r30, r28
    4c98:	e7 59       	subi	r30, 0x97	; 151
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	40 e8       	ldi	r20, 0x80	; 128
    4caa:	5f e3       	ldi	r21, 0x3F	; 63
    4cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cb0:	88 23       	and	r24, r24
    4cb2:	44 f4       	brge	.+16     	; 0x4cc4 <Step_VoidSetAngle+0x158>
		__ticks = 1;
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	e9 59       	subi	r30, 0x99	; 153
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	91 83       	std	Z+1, r25	; 0x01
    4cc0:	80 83       	st	Z, r24
    4cc2:	64 c0       	rjmp	.+200    	; 0x4d8c <Step_VoidSetAngle+0x220>
	else if (__tmp > 65535)
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e7 59       	subi	r30, 0x97	; 151
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	60 81       	ld	r22, Z
    4ccc:	71 81       	ldd	r23, Z+1	; 0x01
    4cce:	82 81       	ldd	r24, Z+2	; 0x02
    4cd0:	93 81       	ldd	r25, Z+3	; 0x03
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	3f ef       	ldi	r19, 0xFF	; 255
    4cd6:	4f e7       	ldi	r20, 0x7F	; 127
    4cd8:	57 e4       	ldi	r21, 0x47	; 71
    4cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cde:	18 16       	cp	r1, r24
    4ce0:	0c f0       	brlt	.+2      	; 0x4ce4 <Step_VoidSetAngle+0x178>
    4ce2:	43 c0       	rjmp	.+134    	; 0x4d6a <Step_VoidSetAngle+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	e3 59       	subi	r30, 0x93	; 147
    4ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cea:	60 81       	ld	r22, Z
    4cec:	71 81       	ldd	r23, Z+1	; 0x01
    4cee:	82 81       	ldd	r24, Z+2	; 0x02
    4cf0:	93 81       	ldd	r25, Z+3	; 0x03
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	40 e2       	ldi	r20, 0x20	; 32
    4cf8:	51 e4       	ldi	r21, 0x41	; 65
    4cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8e 01       	movw	r16, r28
    4d04:	09 59       	subi	r16, 0x99	; 153
    4d06:	1f 4f       	sbci	r17, 0xFF	; 255
    4d08:	bc 01       	movw	r22, r24
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	f8 01       	movw	r30, r16
    4d16:	91 83       	std	Z+1, r25	; 0x01
    4d18:	80 83       	st	Z, r24
    4d1a:	1f c0       	rjmp	.+62     	; 0x4d5a <Step_VoidSetAngle+0x1ee>
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	eb 59       	subi	r30, 0x9B	; 155
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	88 ec       	ldi	r24, 0xC8	; 200
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	80 83       	st	Z, r24
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	eb 59       	subi	r30, 0x9B	; 155
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	80 81       	ld	r24, Z
    4d32:	91 81       	ldd	r25, Z+1	; 0x01
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	f1 f7       	brne	.-4      	; 0x4d34 <Step_VoidSetAngle+0x1c8>
    4d38:	fe 01       	movw	r30, r28
    4d3a:	eb 59       	subi	r30, 0x9B	; 155
    4d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d42:	de 01       	movw	r26, r28
    4d44:	a9 59       	subi	r26, 0x99	; 153
    4d46:	bf 4f       	sbci	r27, 0xFF	; 255
    4d48:	fe 01       	movw	r30, r28
    4d4a:	e9 59       	subi	r30, 0x99	; 153
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	80 81       	ld	r24, Z
    4d50:	91 81       	ldd	r25, Z+1	; 0x01
    4d52:	01 97       	sbiw	r24, 0x01	; 1
    4d54:	11 96       	adiw	r26, 0x01	; 1
    4d56:	9c 93       	st	X, r25
    4d58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5a:	fe 01       	movw	r30, r28
    4d5c:	e9 59       	subi	r30, 0x99	; 153
    4d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d60:	80 81       	ld	r24, Z
    4d62:	91 81       	ldd	r25, Z+1	; 0x01
    4d64:	00 97       	sbiw	r24, 0x00	; 0
    4d66:	d1 f6       	brne	.-76     	; 0x4d1c <Step_VoidSetAngle+0x1b0>
    4d68:	27 c0       	rjmp	.+78     	; 0x4db8 <Step_VoidSetAngle+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d6a:	8e 01       	movw	r16, r28
    4d6c:	09 59       	subi	r16, 0x99	; 153
    4d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d70:	fe 01       	movw	r30, r28
    4d72:	e7 59       	subi	r30, 0x97	; 151
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	60 81       	ld	r22, Z
    4d78:	71 81       	ldd	r23, Z+1	; 0x01
    4d7a:	82 81       	ldd	r24, Z+2	; 0x02
    4d7c:	93 81       	ldd	r25, Z+3	; 0x03
    4d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	f8 01       	movw	r30, r16
    4d88:	91 83       	std	Z+1, r25	; 0x01
    4d8a:	80 83       	st	Z, r24
    4d8c:	de 01       	movw	r26, r28
    4d8e:	ad 59       	subi	r26, 0x9D	; 157
    4d90:	bf 4f       	sbci	r27, 0xFF	; 255
    4d92:	fe 01       	movw	r30, r28
    4d94:	e9 59       	subi	r30, 0x99	; 153
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	80 81       	ld	r24, Z
    4d9a:	91 81       	ldd	r25, Z+1	; 0x01
    4d9c:	8d 93       	st	X+, r24
    4d9e:	9c 93       	st	X, r25
    4da0:	fe 01       	movw	r30, r28
    4da2:	ed 59       	subi	r30, 0x9D	; 157
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	01 97       	sbiw	r24, 0x01	; 1
    4dac:	f1 f7       	brne	.-4      	; 0x4daa <Step_VoidSetAngle+0x23e>
    4dae:	fe 01       	movw	r30, r28
    4db0:	ed 59       	subi	r30, 0x9D	; 157
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	91 83       	std	Z+1, r25	; 0x01
    4db6:	80 83       	st	Z, r24
			_delay_ms(10);
			/*                        Step2                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    4db8:	82 e0       	ldi	r24, 0x02	; 2
    4dba:	63 e0       	ldi	r22, 0x03	; 3
    4dbc:	41 e0       	ldi	r20, 0x01	; 1
    4dbe:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_LOW);
    4dc2:	82 e0       	ldi	r24, 0x02	; 2
    4dc4:	64 e0       	ldi	r22, 0x04	; 4
    4dc6:	40 e0       	ldi	r20, 0x00	; 0
    4dc8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	65 e0       	ldi	r22, 0x05	; 5
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    4dd6:	82 e0       	ldi	r24, 0x02	; 2
    4dd8:	66 e0       	ldi	r22, 0x06	; 6
    4dda:	41 e0       	ldi	r20, 0x01	; 1
    4ddc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    4de0:	fe 01       	movw	r30, r28
    4de2:	e1 5a       	subi	r30, 0xA1	; 161
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	a0 e2       	ldi	r26, 0x20	; 32
    4dec:	b1 e4       	ldi	r27, 0x41	; 65
    4dee:	80 83       	st	Z, r24
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	a2 83       	std	Z+2, r26	; 0x02
    4df4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df6:	8e 01       	movw	r16, r28
    4df8:	05 5a       	subi	r16, 0xA5	; 165
    4dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e1 5a       	subi	r30, 0xA1	; 161
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	60 81       	ld	r22, Z
    4e04:	71 81       	ldd	r23, Z+1	; 0x01
    4e06:	82 81       	ldd	r24, Z+2	; 0x02
    4e08:	93 81       	ldd	r25, Z+3	; 0x03
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	4a ef       	ldi	r20, 0xFA	; 250
    4e10:	54 e4       	ldi	r21, 0x44	; 68
    4e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	f8 01       	movw	r30, r16
    4e1c:	80 83       	st	Z, r24
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	a2 83       	std	Z+2, r26	; 0x02
    4e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e24:	fe 01       	movw	r30, r28
    4e26:	e5 5a       	subi	r30, 0xA5	; 165
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	60 81       	ld	r22, Z
    4e2c:	71 81       	ldd	r23, Z+1	; 0x01
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	93 81       	ldd	r25, Z+3	; 0x03
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	40 e8       	ldi	r20, 0x80	; 128
    4e38:	5f e3       	ldi	r21, 0x3F	; 63
    4e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e3e:	88 23       	and	r24, r24
    4e40:	44 f4       	brge	.+16     	; 0x4e52 <Step_VoidSetAngle+0x2e6>
		__ticks = 1;
    4e42:	fe 01       	movw	r30, r28
    4e44:	e7 5a       	subi	r30, 0xA7	; 167
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
    4e50:	64 c0       	rjmp	.+200    	; 0x4f1a <Step_VoidSetAngle+0x3ae>
	else if (__tmp > 65535)
    4e52:	fe 01       	movw	r30, r28
    4e54:	e5 5a       	subi	r30, 0xA5	; 165
    4e56:	ff 4f       	sbci	r31, 0xFF	; 255
    4e58:	60 81       	ld	r22, Z
    4e5a:	71 81       	ldd	r23, Z+1	; 0x01
    4e5c:	82 81       	ldd	r24, Z+2	; 0x02
    4e5e:	93 81       	ldd	r25, Z+3	; 0x03
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	3f ef       	ldi	r19, 0xFF	; 255
    4e64:	4f e7       	ldi	r20, 0x7F	; 127
    4e66:	57 e4       	ldi	r21, 0x47	; 71
    4e68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e6c:	18 16       	cp	r1, r24
    4e6e:	0c f0       	brlt	.+2      	; 0x4e72 <Step_VoidSetAngle+0x306>
    4e70:	43 c0       	rjmp	.+134    	; 0x4ef8 <Step_VoidSetAngle+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e72:	fe 01       	movw	r30, r28
    4e74:	e1 5a       	subi	r30, 0xA1	; 161
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	60 81       	ld	r22, Z
    4e7a:	71 81       	ldd	r23, Z+1	; 0x01
    4e7c:	82 81       	ldd	r24, Z+2	; 0x02
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e2       	ldi	r20, 0x20	; 32
    4e86:	51 e4       	ldi	r21, 0x41	; 65
    4e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	8e 01       	movw	r16, r28
    4e92:	07 5a       	subi	r16, 0xA7	; 167
    4e94:	1f 4f       	sbci	r17, 0xFF	; 255
    4e96:	bc 01       	movw	r22, r24
    4e98:	cd 01       	movw	r24, r26
    4e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	f8 01       	movw	r30, r16
    4ea4:	91 83       	std	Z+1, r25	; 0x01
    4ea6:	80 83       	st	Z, r24
    4ea8:	1f c0       	rjmp	.+62     	; 0x4ee8 <Step_VoidSetAngle+0x37c>
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e9 5a       	subi	r30, 0xA9	; 169
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	88 ec       	ldi	r24, 0xC8	; 200
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	91 83       	std	Z+1, r25	; 0x01
    4eb6:	80 83       	st	Z, r24
    4eb8:	fe 01       	movw	r30, r28
    4eba:	e9 5a       	subi	r30, 0xA9	; 169
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	80 81       	ld	r24, Z
    4ec0:	91 81       	ldd	r25, Z+1	; 0x01
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <Step_VoidSetAngle+0x356>
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	e9 5a       	subi	r30, 0xA9	; 169
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	91 83       	std	Z+1, r25	; 0x01
    4ece:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed0:	de 01       	movw	r26, r28
    4ed2:	a7 5a       	subi	r26, 0xA7	; 167
    4ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	e7 5a       	subi	r30, 0xA7	; 167
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	11 96       	adiw	r26, 0x01	; 1
    4ee4:	9c 93       	st	X, r25
    4ee6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee8:	fe 01       	movw	r30, r28
    4eea:	e7 5a       	subi	r30, 0xA7	; 167
    4eec:	ff 4f       	sbci	r31, 0xFF	; 255
    4eee:	80 81       	ld	r24, Z
    4ef0:	91 81       	ldd	r25, Z+1	; 0x01
    4ef2:	00 97       	sbiw	r24, 0x00	; 0
    4ef4:	d1 f6       	brne	.-76     	; 0x4eaa <Step_VoidSetAngle+0x33e>
    4ef6:	27 c0       	rjmp	.+78     	; 0x4f46 <Step_VoidSetAngle+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef8:	8e 01       	movw	r16, r28
    4efa:	07 5a       	subi	r16, 0xA7	; 167
    4efc:	1f 4f       	sbci	r17, 0xFF	; 255
    4efe:	fe 01       	movw	r30, r28
    4f00:	e5 5a       	subi	r30, 0xA5	; 165
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	60 81       	ld	r22, Z
    4f06:	71 81       	ldd	r23, Z+1	; 0x01
    4f08:	82 81       	ldd	r24, Z+2	; 0x02
    4f0a:	93 81       	ldd	r25, Z+3	; 0x03
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	f8 01       	movw	r30, r16
    4f16:	91 83       	std	Z+1, r25	; 0x01
    4f18:	80 83       	st	Z, r24
    4f1a:	de 01       	movw	r26, r28
    4f1c:	ab 5a       	subi	r26, 0xAB	; 171
    4f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f20:	fe 01       	movw	r30, r28
    4f22:	e7 5a       	subi	r30, 0xA7	; 167
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	80 81       	ld	r24, Z
    4f28:	91 81       	ldd	r25, Z+1	; 0x01
    4f2a:	8d 93       	st	X+, r24
    4f2c:	9c 93       	st	X, r25
    4f2e:	fe 01       	movw	r30, r28
    4f30:	eb 5a       	subi	r30, 0xAB	; 171
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	80 81       	ld	r24, Z
    4f36:	91 81       	ldd	r25, Z+1	; 0x01
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	f1 f7       	brne	.-4      	; 0x4f38 <Step_VoidSetAngle+0x3cc>
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	eb 5a       	subi	r30, 0xAB	; 171
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	91 83       	std	Z+1, r25	; 0x01
    4f44:	80 83       	st	Z, r24
			_delay_ms(10);
			/*                        Step3                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    4f46:	82 e0       	ldi	r24, 0x02	; 2
    4f48:	63 e0       	ldi	r22, 0x03	; 3
    4f4a:	41 e0       	ldi	r20, 0x01	; 1
    4f4c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    4f50:	82 e0       	ldi	r24, 0x02	; 2
    4f52:	64 e0       	ldi	r22, 0x04	; 4
    4f54:	41 e0       	ldi	r20, 0x01	; 1
    4f56:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_LOW);
    4f5a:	82 e0       	ldi	r24, 0x02	; 2
    4f5c:	65 e0       	ldi	r22, 0x05	; 5
    4f5e:	40 e0       	ldi	r20, 0x00	; 0
    4f60:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    4f64:	82 e0       	ldi	r24, 0x02	; 2
    4f66:	66 e0       	ldi	r22, 0x06	; 6
    4f68:	41 e0       	ldi	r20, 0x01	; 1
    4f6a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    4f6e:	fe 01       	movw	r30, r28
    4f70:	ef 5a       	subi	r30, 0xAF	; 175
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	a0 e2       	ldi	r26, 0x20	; 32
    4f7a:	b1 e4       	ldi	r27, 0x41	; 65
    4f7c:	80 83       	st	Z, r24
    4f7e:	91 83       	std	Z+1, r25	; 0x01
    4f80:	a2 83       	std	Z+2, r26	; 0x02
    4f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f84:	8e 01       	movw	r16, r28
    4f86:	03 5b       	subi	r16, 0xB3	; 179
    4f88:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8a:	fe 01       	movw	r30, r28
    4f8c:	ef 5a       	subi	r30, 0xAF	; 175
    4f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f90:	60 81       	ld	r22, Z
    4f92:	71 81       	ldd	r23, Z+1	; 0x01
    4f94:	82 81       	ldd	r24, Z+2	; 0x02
    4f96:	93 81       	ldd	r25, Z+3	; 0x03
    4f98:	20 e0       	ldi	r18, 0x00	; 0
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	4a ef       	ldi	r20, 0xFA	; 250
    4f9e:	54 e4       	ldi	r21, 0x44	; 68
    4fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	cb 01       	movw	r24, r22
    4fa8:	f8 01       	movw	r30, r16
    4faa:	80 83       	st	Z, r24
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	a2 83       	std	Z+2, r26	; 0x02
    4fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e3 5b       	subi	r30, 0xB3	; 179
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	60 81       	ld	r22, Z
    4fba:	71 81       	ldd	r23, Z+1	; 0x01
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	93 81       	ldd	r25, Z+3	; 0x03
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	40 e8       	ldi	r20, 0x80	; 128
    4fc6:	5f e3       	ldi	r21, 0x3F	; 63
    4fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fcc:	88 23       	and	r24, r24
    4fce:	44 f4       	brge	.+16     	; 0x4fe0 <Step_VoidSetAngle+0x474>
		__ticks = 1;
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e5 5b       	subi	r30, 0xB5	; 181
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
    4fde:	64 c0       	rjmp	.+200    	; 0x50a8 <Step_VoidSetAngle+0x53c>
	else if (__tmp > 65535)
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	e3 5b       	subi	r30, 0xB3	; 179
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	60 81       	ld	r22, Z
    4fe8:	71 81       	ldd	r23, Z+1	; 0x01
    4fea:	82 81       	ldd	r24, Z+2	; 0x02
    4fec:	93 81       	ldd	r25, Z+3	; 0x03
    4fee:	20 e0       	ldi	r18, 0x00	; 0
    4ff0:	3f ef       	ldi	r19, 0xFF	; 255
    4ff2:	4f e7       	ldi	r20, 0x7F	; 127
    4ff4:	57 e4       	ldi	r21, 0x47	; 71
    4ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ffa:	18 16       	cp	r1, r24
    4ffc:	0c f0       	brlt	.+2      	; 0x5000 <Step_VoidSetAngle+0x494>
    4ffe:	43 c0       	rjmp	.+134    	; 0x5086 <Step_VoidSetAngle+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5000:	fe 01       	movw	r30, r28
    5002:	ef 5a       	subi	r30, 0xAF	; 175
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	82 81       	ldd	r24, Z+2	; 0x02
    500c:	93 81       	ldd	r25, Z+3	; 0x03
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e2       	ldi	r20, 0x20	; 32
    5014:	51 e4       	ldi	r21, 0x41	; 65
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	8e 01       	movw	r16, r28
    5020:	05 5b       	subi	r16, 0xB5	; 181
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
    5024:	bc 01       	movw	r22, r24
    5026:	cd 01       	movw	r24, r26
    5028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502c:	dc 01       	movw	r26, r24
    502e:	cb 01       	movw	r24, r22
    5030:	f8 01       	movw	r30, r16
    5032:	91 83       	std	Z+1, r25	; 0x01
    5034:	80 83       	st	Z, r24
    5036:	1f c0       	rjmp	.+62     	; 0x5076 <Step_VoidSetAngle+0x50a>
    5038:	fe 01       	movw	r30, r28
    503a:	e7 5b       	subi	r30, 0xB7	; 183
    503c:	ff 4f       	sbci	r31, 0xFF	; 255
    503e:	88 ec       	ldi	r24, 0xC8	; 200
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	91 83       	std	Z+1, r25	; 0x01
    5044:	80 83       	st	Z, r24
    5046:	fe 01       	movw	r30, r28
    5048:	e7 5b       	subi	r30, 0xB7	; 183
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	80 81       	ld	r24, Z
    504e:	91 81       	ldd	r25, Z+1	; 0x01
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <Step_VoidSetAngle+0x4e4>
    5054:	fe 01       	movw	r30, r28
    5056:	e7 5b       	subi	r30, 0xB7	; 183
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505e:	de 01       	movw	r26, r28
    5060:	a5 5b       	subi	r26, 0xB5	; 181
    5062:	bf 4f       	sbci	r27, 0xFF	; 255
    5064:	fe 01       	movw	r30, r28
    5066:	e5 5b       	subi	r30, 0xB5	; 181
    5068:	ff 4f       	sbci	r31, 0xFF	; 255
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	11 96       	adiw	r26, 0x01	; 1
    5072:	9c 93       	st	X, r25
    5074:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5076:	fe 01       	movw	r30, r28
    5078:	e5 5b       	subi	r30, 0xB5	; 181
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	d1 f6       	brne	.-76     	; 0x5038 <Step_VoidSetAngle+0x4cc>
    5084:	27 c0       	rjmp	.+78     	; 0x50d4 <Step_VoidSetAngle+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5086:	8e 01       	movw	r16, r28
    5088:	05 5b       	subi	r16, 0xB5	; 181
    508a:	1f 4f       	sbci	r17, 0xFF	; 255
    508c:	fe 01       	movw	r30, r28
    508e:	e3 5b       	subi	r30, 0xB3	; 179
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	60 81       	ld	r22, Z
    5094:	71 81       	ldd	r23, Z+1	; 0x01
    5096:	82 81       	ldd	r24, Z+2	; 0x02
    5098:	93 81       	ldd	r25, Z+3	; 0x03
    509a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	f8 01       	movw	r30, r16
    50a4:	91 83       	std	Z+1, r25	; 0x01
    50a6:	80 83       	st	Z, r24
    50a8:	de 01       	movw	r26, r28
    50aa:	a9 5b       	subi	r26, 0xB9	; 185
    50ac:	bf 4f       	sbci	r27, 0xFF	; 255
    50ae:	fe 01       	movw	r30, r28
    50b0:	e5 5b       	subi	r30, 0xB5	; 181
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	80 81       	ld	r24, Z
    50b6:	91 81       	ldd	r25, Z+1	; 0x01
    50b8:	8d 93       	st	X+, r24
    50ba:	9c 93       	st	X, r25
    50bc:	fe 01       	movw	r30, r28
    50be:	e9 5b       	subi	r30, 0xB9	; 185
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	80 81       	ld	r24, Z
    50c4:	91 81       	ldd	r25, Z+1	; 0x01
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	f1 f7       	brne	.-4      	; 0x50c6 <Step_VoidSetAngle+0x55a>
    50ca:	fe 01       	movw	r30, r28
    50cc:	e9 5b       	subi	r30, 0xB9	; 185
    50ce:	ff 4f       	sbci	r31, 0xFF	; 255
    50d0:	91 83       	std	Z+1, r25	; 0x01
    50d2:	80 83       	st	Z, r24
			_delay_ms(10);
			/*                        Step4                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    50d4:	82 e0       	ldi	r24, 0x02	; 2
    50d6:	63 e0       	ldi	r22, 0x03	; 3
    50d8:	41 e0       	ldi	r20, 0x01	; 1
    50da:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    50de:	82 e0       	ldi	r24, 0x02	; 2
    50e0:	64 e0       	ldi	r22, 0x04	; 4
    50e2:	41 e0       	ldi	r20, 0x01	; 1
    50e4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    50e8:	82 e0       	ldi	r24, 0x02	; 2
    50ea:	65 e0       	ldi	r22, 0x05	; 5
    50ec:	41 e0       	ldi	r20, 0x01	; 1
    50ee:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_LOW);
    50f2:	82 e0       	ldi	r24, 0x02	; 2
    50f4:	66 e0       	ldi	r22, 0x06	; 6
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    50fc:	fe 01       	movw	r30, r28
    50fe:	ed 5b       	subi	r30, 0xBD	; 189
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	80 e0       	ldi	r24, 0x00	; 0
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	a0 e2       	ldi	r26, 0x20	; 32
    5108:	b1 e4       	ldi	r27, 0x41	; 65
    510a:	80 83       	st	Z, r24
    510c:	91 83       	std	Z+1, r25	; 0x01
    510e:	a2 83       	std	Z+2, r26	; 0x02
    5110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5112:	8e 01       	movw	r16, r28
    5114:	01 5c       	subi	r16, 0xC1	; 193
    5116:	1f 4f       	sbci	r17, 0xFF	; 255
    5118:	fe 01       	movw	r30, r28
    511a:	ed 5b       	subi	r30, 0xBD	; 189
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	4a ef       	ldi	r20, 0xFA	; 250
    512c:	54 e4       	ldi	r21, 0x44	; 68
    512e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	f8 01       	movw	r30, r16
    5138:	80 83       	st	Z, r24
    513a:	91 83       	std	Z+1, r25	; 0x01
    513c:	a2 83       	std	Z+2, r26	; 0x02
    513e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5140:	fe 01       	movw	r30, r28
    5142:	ff 96       	adiw	r30, 0x3f	; 63
    5144:	60 81       	ld	r22, Z
    5146:	71 81       	ldd	r23, Z+1	; 0x01
    5148:	82 81       	ldd	r24, Z+2	; 0x02
    514a:	93 81       	ldd	r25, Z+3	; 0x03
    514c:	20 e0       	ldi	r18, 0x00	; 0
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	40 e8       	ldi	r20, 0x80	; 128
    5152:	5f e3       	ldi	r21, 0x3F	; 63
    5154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5158:	88 23       	and	r24, r24
    515a:	2c f4       	brge	.+10     	; 0x5166 <Step_VoidSetAngle+0x5fa>
		__ticks = 1;
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	9e af       	std	Y+62, r25	; 0x3e
    5162:	8d af       	std	Y+61, r24	; 0x3d
    5164:	46 c0       	rjmp	.+140    	; 0x51f2 <Step_VoidSetAngle+0x686>
	else if (__tmp > 65535)
    5166:	fe 01       	movw	r30, r28
    5168:	ff 96       	adiw	r30, 0x3f	; 63
    516a:	60 81       	ld	r22, Z
    516c:	71 81       	ldd	r23, Z+1	; 0x01
    516e:	82 81       	ldd	r24, Z+2	; 0x02
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	3f ef       	ldi	r19, 0xFF	; 255
    5176:	4f e7       	ldi	r20, 0x7F	; 127
    5178:	57 e4       	ldi	r21, 0x47	; 71
    517a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    517e:	18 16       	cp	r1, r24
    5180:	64 f5       	brge	.+88     	; 0x51da <Step_VoidSetAngle+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5182:	fe 01       	movw	r30, r28
    5184:	ed 5b       	subi	r30, 0xBD	; 189
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	60 81       	ld	r22, Z
    518a:	71 81       	ldd	r23, Z+1	; 0x01
    518c:	82 81       	ldd	r24, Z+2	; 0x02
    518e:	93 81       	ldd	r25, Z+3	; 0x03
    5190:	20 e0       	ldi	r18, 0x00	; 0
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	40 e2       	ldi	r20, 0x20	; 32
    5196:	51 e4       	ldi	r21, 0x41	; 65
    5198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	bc 01       	movw	r22, r24
    51a2:	cd 01       	movw	r24, r26
    51a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	9e af       	std	Y+62, r25	; 0x3e
    51ae:	8d af       	std	Y+61, r24	; 0x3d
    51b0:	0f c0       	rjmp	.+30     	; 0x51d0 <Step_VoidSetAngle+0x664>
    51b2:	88 ec       	ldi	r24, 0xC8	; 200
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	9c af       	std	Y+60, r25	; 0x3c
    51b8:	8b af       	std	Y+59, r24	; 0x3b
    51ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    51bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    51be:	01 97       	sbiw	r24, 0x01	; 1
    51c0:	f1 f7       	brne	.-4      	; 0x51be <Step_VoidSetAngle+0x652>
    51c2:	9c af       	std	Y+60, r25	; 0x3c
    51c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    51c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	9e af       	std	Y+62, r25	; 0x3e
    51ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    51d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    51d4:	00 97       	sbiw	r24, 0x00	; 0
    51d6:	69 f7       	brne	.-38     	; 0x51b2 <Step_VoidSetAngle+0x646>
    51d8:	16 c0       	rjmp	.+44     	; 0x5206 <Step_VoidSetAngle+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51da:	fe 01       	movw	r30, r28
    51dc:	ff 96       	adiw	r30, 0x3f	; 63
    51de:	60 81       	ld	r22, Z
    51e0:	71 81       	ldd	r23, Z+1	; 0x01
    51e2:	82 81       	ldd	r24, Z+2	; 0x02
    51e4:	93 81       	ldd	r25, Z+3	; 0x03
    51e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	9e af       	std	Y+62, r25	; 0x3e
    51f0:	8d af       	std	Y+61, r24	; 0x3d
    51f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    51f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    51f6:	9a af       	std	Y+58, r25	; 0x3a
    51f8:	89 af       	std	Y+57, r24	; 0x39
    51fa:	89 ad       	ldd	r24, Y+57	; 0x39
    51fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	f1 f7       	brne	.-4      	; 0x51fe <Step_VoidSetAngle+0x692>
    5202:	9a af       	std	Y+58, r25	; 0x3a
    5204:	89 af       	std	Y+57, r24	; 0x39
	/* Calculate Number Of Iterations */
	Local_u32NumberOfIterations = Local_u32NumberOfSteps/4 ;

	if(Copy_u8Direction == StepperMotor_u8_AntiClockWise )
	{
		for(Local_u32Counter = 0; Local_u32Counter < Local_u32NumberOfIterations; Local_u32Counter++)
    5206:	9e 01       	movw	r18, r28
    5208:	2f 58       	subi	r18, 0x8F	; 143
    520a:	3f 4f       	sbci	r19, 0xFF	; 255
    520c:	fe 01       	movw	r30, r28
    520e:	ef 58       	subi	r30, 0x8F	; 143
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	80 81       	ld	r24, Z
    5214:	91 81       	ldd	r25, Z+1	; 0x01
    5216:	a2 81       	ldd	r26, Z+2	; 0x02
    5218:	b3 81       	ldd	r27, Z+3	; 0x03
    521a:	01 96       	adiw	r24, 0x01	; 1
    521c:	a1 1d       	adc	r26, r1
    521e:	b1 1d       	adc	r27, r1
    5220:	f9 01       	movw	r30, r18
    5222:	80 83       	st	Z, r24
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	a2 83       	std	Z+2, r26	; 0x02
    5228:	b3 83       	std	Z+3, r27	; 0x03
    522a:	fe 01       	movw	r30, r28
    522c:	ef 58       	subi	r30, 0x8F	; 143
    522e:	ff 4f       	sbci	r31, 0xFF	; 255
    5230:	de 01       	movw	r26, r28
    5232:	ab 58       	subi	r26, 0x8B	; 139
    5234:	bf 4f       	sbci	r27, 0xFF	; 255
    5236:	20 81       	ld	r18, Z
    5238:	31 81       	ldd	r19, Z+1	; 0x01
    523a:	42 81       	ldd	r20, Z+2	; 0x02
    523c:	53 81       	ldd	r21, Z+3	; 0x03
    523e:	8d 91       	ld	r24, X+
    5240:	9d 91       	ld	r25, X+
    5242:	0d 90       	ld	r0, X+
    5244:	bc 91       	ld	r27, X
    5246:	a0 2d       	mov	r26, r0
    5248:	28 17       	cp	r18, r24
    524a:	39 07       	cpc	r19, r25
    524c:	4a 07       	cpc	r20, r26
    524e:	5b 07       	cpc	r21, r27
    5250:	08 f4       	brcc	.+2      	; 0x5254 <Step_VoidSetAngle+0x6e8>
    5252:	eb cc       	rjmp	.-1578   	; 0x4c2a <Step_VoidSetAngle+0xbe>
    5254:	4e c2       	rjmp	.+1180   	; 0x56f2 <Step_VoidSetAngle+0xb86>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_LOW);
			_delay_ms(10);
		}
	}
	else if (Copy_u8Direction == StepperMotor_u8_ClockWise)
    5256:	fe 01       	movw	r30, r28
    5258:	e3 58       	subi	r30, 0x83	; 131
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	80 81       	ld	r24, Z
    525e:	88 23       	and	r24, r24
    5260:	09 f0       	breq	.+2      	; 0x5264 <Step_VoidSetAngle+0x6f8>
    5262:	47 c2       	rjmp	.+1166   	; 0x56f2 <Step_VoidSetAngle+0xb86>
	{
		for(Local_u32Counter = 0; Local_u32Counter < Local_u32NumberOfIterations; Local_u32Counter++)
    5264:	fe 01       	movw	r30, r28
    5266:	ef 58       	subi	r30, 0x8F	; 143
    5268:	ff 4f       	sbci	r31, 0xFF	; 255
    526a:	10 82       	st	Z, r1
    526c:	11 82       	std	Z+1, r1	; 0x01
    526e:	12 82       	std	Z+2, r1	; 0x02
    5270:	13 82       	std	Z+3, r1	; 0x03
    5272:	2a c2       	rjmp	.+1108   	; 0x56c8 <Step_VoidSetAngle+0xb5c>
		{
			/*                        Step1                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    5274:	82 e0       	ldi	r24, 0x02	; 2
    5276:	63 e0       	ldi	r22, 0x03	; 3
    5278:	41 e0       	ldi	r20, 0x01	; 1
    527a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    527e:	82 e0       	ldi	r24, 0x02	; 2
    5280:	64 e0       	ldi	r22, 0x04	; 4
    5282:	41 e0       	ldi	r20, 0x01	; 1
    5284:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    5288:	82 e0       	ldi	r24, 0x02	; 2
    528a:	65 e0       	ldi	r22, 0x05	; 5
    528c:	41 e0       	ldi	r20, 0x01	; 1
    528e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_LOW);
    5292:	82 e0       	ldi	r24, 0x02	; 2
    5294:	66 e0       	ldi	r22, 0x06	; 6
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	a0 e2       	ldi	r26, 0x20	; 32
    52a2:	b1 e4       	ldi	r27, 0x41	; 65
    52a4:	8d ab       	std	Y+53, r24	; 0x35
    52a6:	9e ab       	std	Y+54, r25	; 0x36
    52a8:	af ab       	std	Y+55, r26	; 0x37
    52aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ac:	6d a9       	ldd	r22, Y+53	; 0x35
    52ae:	7e a9       	ldd	r23, Y+54	; 0x36
    52b0:	8f a9       	ldd	r24, Y+55	; 0x37
    52b2:	98 ad       	ldd	r25, Y+56	; 0x38
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	4a ef       	ldi	r20, 0xFA	; 250
    52ba:	54 e4       	ldi	r21, 0x44	; 68
    52bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c0:	dc 01       	movw	r26, r24
    52c2:	cb 01       	movw	r24, r22
    52c4:	89 ab       	std	Y+49, r24	; 0x31
    52c6:	9a ab       	std	Y+50, r25	; 0x32
    52c8:	ab ab       	std	Y+51, r26	; 0x33
    52ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    52cc:	69 a9       	ldd	r22, Y+49	; 0x31
    52ce:	7a a9       	ldd	r23, Y+50	; 0x32
    52d0:	8b a9       	ldd	r24, Y+51	; 0x33
    52d2:	9c a9       	ldd	r25, Y+52	; 0x34
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e8       	ldi	r20, 0x80	; 128
    52da:	5f e3       	ldi	r21, 0x3F	; 63
    52dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52e0:	88 23       	and	r24, r24
    52e2:	2c f4       	brge	.+10     	; 0x52ee <Step_VoidSetAngle+0x782>
		__ticks = 1;
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	98 ab       	std	Y+48, r25	; 0x30
    52ea:	8f a7       	std	Y+47, r24	; 0x2f
    52ec:	3f c0       	rjmp	.+126    	; 0x536c <Step_VoidSetAngle+0x800>
	else if (__tmp > 65535)
    52ee:	69 a9       	ldd	r22, Y+49	; 0x31
    52f0:	7a a9       	ldd	r23, Y+50	; 0x32
    52f2:	8b a9       	ldd	r24, Y+51	; 0x33
    52f4:	9c a9       	ldd	r25, Y+52	; 0x34
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	3f ef       	ldi	r19, 0xFF	; 255
    52fa:	4f e7       	ldi	r20, 0x7F	; 127
    52fc:	57 e4       	ldi	r21, 0x47	; 71
    52fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5302:	18 16       	cp	r1, r24
    5304:	4c f5       	brge	.+82     	; 0x5358 <Step_VoidSetAngle+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5306:	6d a9       	ldd	r22, Y+53	; 0x35
    5308:	7e a9       	ldd	r23, Y+54	; 0x36
    530a:	8f a9       	ldd	r24, Y+55	; 0x37
    530c:	98 ad       	ldd	r25, Y+56	; 0x38
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	40 e2       	ldi	r20, 0x20	; 32
    5314:	51 e4       	ldi	r21, 0x41	; 65
    5316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    531a:	dc 01       	movw	r26, r24
    531c:	cb 01       	movw	r24, r22
    531e:	bc 01       	movw	r22, r24
    5320:	cd 01       	movw	r24, r26
    5322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	98 ab       	std	Y+48, r25	; 0x30
    532c:	8f a7       	std	Y+47, r24	; 0x2f
    532e:	0f c0       	rjmp	.+30     	; 0x534e <Step_VoidSetAngle+0x7e2>
    5330:	88 ec       	ldi	r24, 0xC8	; 200
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	9e a7       	std	Y+46, r25	; 0x2e
    5336:	8d a7       	std	Y+45, r24	; 0x2d
    5338:	8d a5       	ldd	r24, Y+45	; 0x2d
    533a:	9e a5       	ldd	r25, Y+46	; 0x2e
    533c:	01 97       	sbiw	r24, 0x01	; 1
    533e:	f1 f7       	brne	.-4      	; 0x533c <Step_VoidSetAngle+0x7d0>
    5340:	9e a7       	std	Y+46, r25	; 0x2e
    5342:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5344:	8f a5       	ldd	r24, Y+47	; 0x2f
    5346:	98 a9       	ldd	r25, Y+48	; 0x30
    5348:	01 97       	sbiw	r24, 0x01	; 1
    534a:	98 ab       	std	Y+48, r25	; 0x30
    534c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    534e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5350:	98 a9       	ldd	r25, Y+48	; 0x30
    5352:	00 97       	sbiw	r24, 0x00	; 0
    5354:	69 f7       	brne	.-38     	; 0x5330 <Step_VoidSetAngle+0x7c4>
    5356:	14 c0       	rjmp	.+40     	; 0x5380 <Step_VoidSetAngle+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5358:	69 a9       	ldd	r22, Y+49	; 0x31
    535a:	7a a9       	ldd	r23, Y+50	; 0x32
    535c:	8b a9       	ldd	r24, Y+51	; 0x33
    535e:	9c a9       	ldd	r25, Y+52	; 0x34
    5360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	98 ab       	std	Y+48, r25	; 0x30
    536a:	8f a7       	std	Y+47, r24	; 0x2f
    536c:	8f a5       	ldd	r24, Y+47	; 0x2f
    536e:	98 a9       	ldd	r25, Y+48	; 0x30
    5370:	9c a7       	std	Y+44, r25	; 0x2c
    5372:	8b a7       	std	Y+43, r24	; 0x2b
    5374:	8b a5       	ldd	r24, Y+43	; 0x2b
    5376:	9c a5       	ldd	r25, Y+44	; 0x2c
    5378:	01 97       	sbiw	r24, 0x01	; 1
    537a:	f1 f7       	brne	.-4      	; 0x5378 <Step_VoidSetAngle+0x80c>
    537c:	9c a7       	std	Y+44, r25	; 0x2c
    537e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			/*                        Step2                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    5380:	82 e0       	ldi	r24, 0x02	; 2
    5382:	63 e0       	ldi	r22, 0x03	; 3
    5384:	41 e0       	ldi	r20, 0x01	; 1
    5386:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    538a:	82 e0       	ldi	r24, 0x02	; 2
    538c:	64 e0       	ldi	r22, 0x04	; 4
    538e:	41 e0       	ldi	r20, 0x01	; 1
    5390:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_LOW);
    5394:	82 e0       	ldi	r24, 0x02	; 2
    5396:	65 e0       	ldi	r22, 0x05	; 5
    5398:	40 e0       	ldi	r20, 0x00	; 0
    539a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    539e:	82 e0       	ldi	r24, 0x02	; 2
    53a0:	66 e0       	ldi	r22, 0x06	; 6
    53a2:	41 e0       	ldi	r20, 0x01	; 1
    53a4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a0 e2       	ldi	r26, 0x20	; 32
    53ae:	b1 e4       	ldi	r27, 0x41	; 65
    53b0:	8f a3       	std	Y+39, r24	; 0x27
    53b2:	98 a7       	std	Y+40, r25	; 0x28
    53b4:	a9 a7       	std	Y+41, r26	; 0x29
    53b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6f a1       	ldd	r22, Y+39	; 0x27
    53ba:	78 a5       	ldd	r23, Y+40	; 0x28
    53bc:	89 a5       	ldd	r24, Y+41	; 0x29
    53be:	9a a5       	ldd	r25, Y+42	; 0x2a
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	4a ef       	ldi	r20, 0xFA	; 250
    53c6:	54 e4       	ldi	r21, 0x44	; 68
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	8b a3       	std	Y+35, r24	; 0x23
    53d2:	9c a3       	std	Y+36, r25	; 0x24
    53d4:	ad a3       	std	Y+37, r26	; 0x25
    53d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53d8:	6b a1       	ldd	r22, Y+35	; 0x23
    53da:	7c a1       	ldd	r23, Y+36	; 0x24
    53dc:	8d a1       	ldd	r24, Y+37	; 0x25
    53de:	9e a1       	ldd	r25, Y+38	; 0x26
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e8       	ldi	r20, 0x80	; 128
    53e6:	5f e3       	ldi	r21, 0x3F	; 63
    53e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53ec:	88 23       	and	r24, r24
    53ee:	2c f4       	brge	.+10     	; 0x53fa <Step_VoidSetAngle+0x88e>
		__ticks = 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9a a3       	std	Y+34, r25	; 0x22
    53f6:	89 a3       	std	Y+33, r24	; 0x21
    53f8:	3f c0       	rjmp	.+126    	; 0x5478 <Step_VoidSetAngle+0x90c>
	else if (__tmp > 65535)
    53fa:	6b a1       	ldd	r22, Y+35	; 0x23
    53fc:	7c a1       	ldd	r23, Y+36	; 0x24
    53fe:	8d a1       	ldd	r24, Y+37	; 0x25
    5400:	9e a1       	ldd	r25, Y+38	; 0x26
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	3f ef       	ldi	r19, 0xFF	; 255
    5406:	4f e7       	ldi	r20, 0x7F	; 127
    5408:	57 e4       	ldi	r21, 0x47	; 71
    540a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	4c f5       	brge	.+82     	; 0x5464 <Step_VoidSetAngle+0x8f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5412:	6f a1       	ldd	r22, Y+39	; 0x27
    5414:	78 a5       	ldd	r23, Y+40	; 0x28
    5416:	89 a5       	ldd	r24, Y+41	; 0x29
    5418:	9a a5       	ldd	r25, Y+42	; 0x2a
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9a a3       	std	Y+34, r25	; 0x22
    5438:	89 a3       	std	Y+33, r24	; 0x21
    543a:	0f c0       	rjmp	.+30     	; 0x545a <Step_VoidSetAngle+0x8ee>
    543c:	88 ec       	ldi	r24, 0xC8	; 200
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	98 a3       	std	Y+32, r25	; 0x20
    5442:	8f 8f       	std	Y+31, r24	; 0x1f
    5444:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5446:	98 a1       	ldd	r25, Y+32	; 0x20
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <Step_VoidSetAngle+0x8dc>
    544c:	98 a3       	std	Y+32, r25	; 0x20
    544e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5450:	89 a1       	ldd	r24, Y+33	; 0x21
    5452:	9a a1       	ldd	r25, Y+34	; 0x22
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	9a a3       	std	Y+34, r25	; 0x22
    5458:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545a:	89 a1       	ldd	r24, Y+33	; 0x21
    545c:	9a a1       	ldd	r25, Y+34	; 0x22
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	69 f7       	brne	.-38     	; 0x543c <Step_VoidSetAngle+0x8d0>
    5462:	14 c0       	rjmp	.+40     	; 0x548c <Step_VoidSetAngle+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5464:	6b a1       	ldd	r22, Y+35	; 0x23
    5466:	7c a1       	ldd	r23, Y+36	; 0x24
    5468:	8d a1       	ldd	r24, Y+37	; 0x25
    546a:	9e a1       	ldd	r25, Y+38	; 0x26
    546c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9a a3       	std	Y+34, r25	; 0x22
    5476:	89 a3       	std	Y+33, r24	; 0x21
    5478:	89 a1       	ldd	r24, Y+33	; 0x21
    547a:	9a a1       	ldd	r25, Y+34	; 0x22
    547c:	9e 8f       	std	Y+30, r25	; 0x1e
    547e:	8d 8f       	std	Y+29, r24	; 0x1d
    5480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <Step_VoidSetAngle+0x918>
    5488:	9e 8f       	std	Y+30, r25	; 0x1e
    548a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			/*                        Step3                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
    548c:	82 e0       	ldi	r24, 0x02	; 2
    548e:	63 e0       	ldi	r22, 0x03	; 3
    5490:	41 e0       	ldi	r20, 0x01	; 1
    5492:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_LOW);
    5496:	82 e0       	ldi	r24, 0x02	; 2
    5498:	64 e0       	ldi	r22, 0x04	; 4
    549a:	40 e0       	ldi	r20, 0x00	; 0
    549c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    54a0:	82 e0       	ldi	r24, 0x02	; 2
    54a2:	65 e0       	ldi	r22, 0x05	; 5
    54a4:	41 e0       	ldi	r20, 0x01	; 1
    54a6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    54aa:	82 e0       	ldi	r24, 0x02	; 2
    54ac:	66 e0       	ldi	r22, 0x06	; 6
    54ae:	41 e0       	ldi	r20, 0x01	; 1
    54b0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	a0 e2       	ldi	r26, 0x20	; 32
    54ba:	b1 e4       	ldi	r27, 0x41	; 65
    54bc:	89 8f       	std	Y+25, r24	; 0x19
    54be:	9a 8f       	std	Y+26, r25	; 0x1a
    54c0:	ab 8f       	std	Y+27, r26	; 0x1b
    54c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c4:	69 8d       	ldd	r22, Y+25	; 0x19
    54c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	4a ef       	ldi	r20, 0xFA	; 250
    54d2:	54 e4       	ldi	r21, 0x44	; 68
    54d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	8d 8b       	std	Y+21, r24	; 0x15
    54de:	9e 8b       	std	Y+22, r25	; 0x16
    54e0:	af 8b       	std	Y+23, r26	; 0x17
    54e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54e4:	6d 89       	ldd	r22, Y+21	; 0x15
    54e6:	7e 89       	ldd	r23, Y+22	; 0x16
    54e8:	8f 89       	ldd	r24, Y+23	; 0x17
    54ea:	98 8d       	ldd	r25, Y+24	; 0x18
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	40 e8       	ldi	r20, 0x80	; 128
    54f2:	5f e3       	ldi	r21, 0x3F	; 63
    54f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54f8:	88 23       	and	r24, r24
    54fa:	2c f4       	brge	.+10     	; 0x5506 <Step_VoidSetAngle+0x99a>
		__ticks = 1;
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9c 8b       	std	Y+20, r25	; 0x14
    5502:	8b 8b       	std	Y+19, r24	; 0x13
    5504:	3f c0       	rjmp	.+126    	; 0x5584 <Step_VoidSetAngle+0xa18>
	else if (__tmp > 65535)
    5506:	6d 89       	ldd	r22, Y+21	; 0x15
    5508:	7e 89       	ldd	r23, Y+22	; 0x16
    550a:	8f 89       	ldd	r24, Y+23	; 0x17
    550c:	98 8d       	ldd	r25, Y+24	; 0x18
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	3f ef       	ldi	r19, 0xFF	; 255
    5512:	4f e7       	ldi	r20, 0x7F	; 127
    5514:	57 e4       	ldi	r21, 0x47	; 71
    5516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    551a:	18 16       	cp	r1, r24
    551c:	4c f5       	brge	.+82     	; 0x5570 <Step_VoidSetAngle+0xa04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    551e:	69 8d       	ldd	r22, Y+25	; 0x19
    5520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e2       	ldi	r20, 0x20	; 32
    552c:	51 e4       	ldi	r21, 0x41	; 65
    552e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	bc 01       	movw	r22, r24
    5538:	cd 01       	movw	r24, r26
    553a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	9c 8b       	std	Y+20, r25	; 0x14
    5544:	8b 8b       	std	Y+19, r24	; 0x13
    5546:	0f c0       	rjmp	.+30     	; 0x5566 <Step_VoidSetAngle+0x9fa>
    5548:	88 ec       	ldi	r24, 0xC8	; 200
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	9a 8b       	std	Y+18, r25	; 0x12
    554e:	89 8b       	std	Y+17, r24	; 0x11
    5550:	89 89       	ldd	r24, Y+17	; 0x11
    5552:	9a 89       	ldd	r25, Y+18	; 0x12
    5554:	01 97       	sbiw	r24, 0x01	; 1
    5556:	f1 f7       	brne	.-4      	; 0x5554 <Step_VoidSetAngle+0x9e8>
    5558:	9a 8b       	std	Y+18, r25	; 0x12
    555a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    555c:	8b 89       	ldd	r24, Y+19	; 0x13
    555e:	9c 89       	ldd	r25, Y+20	; 0x14
    5560:	01 97       	sbiw	r24, 0x01	; 1
    5562:	9c 8b       	std	Y+20, r25	; 0x14
    5564:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5566:	8b 89       	ldd	r24, Y+19	; 0x13
    5568:	9c 89       	ldd	r25, Y+20	; 0x14
    556a:	00 97       	sbiw	r24, 0x00	; 0
    556c:	69 f7       	brne	.-38     	; 0x5548 <Step_VoidSetAngle+0x9dc>
    556e:	14 c0       	rjmp	.+40     	; 0x5598 <Step_VoidSetAngle+0xa2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5570:	6d 89       	ldd	r22, Y+21	; 0x15
    5572:	7e 89       	ldd	r23, Y+22	; 0x16
    5574:	8f 89       	ldd	r24, Y+23	; 0x17
    5576:	98 8d       	ldd	r25, Y+24	; 0x18
    5578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	9c 8b       	std	Y+20, r25	; 0x14
    5582:	8b 8b       	std	Y+19, r24	; 0x13
    5584:	8b 89       	ldd	r24, Y+19	; 0x13
    5586:	9c 89       	ldd	r25, Y+20	; 0x14
    5588:	98 8b       	std	Y+16, r25	; 0x10
    558a:	8f 87       	std	Y+15, r24	; 0x0f
    558c:	8f 85       	ldd	r24, Y+15	; 0x0f
    558e:	98 89       	ldd	r25, Y+16	; 0x10
    5590:	01 97       	sbiw	r24, 0x01	; 1
    5592:	f1 f7       	brne	.-4      	; 0x5590 <Step_VoidSetAngle+0xa24>
    5594:	98 8b       	std	Y+16, r25	; 0x10
    5596:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			/*                        Step4                               */
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_LOW);
    5598:	82 e0       	ldi	r24, 0x02	; 2
    559a:	63 e0       	ldi	r22, 0x03	; 3
    559c:	40 e0       	ldi	r20, 0x00	; 0
    559e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN4, DIO_U8_HIGH);
    55a2:	82 e0       	ldi	r24, 0x02	; 2
    55a4:	64 e0       	ldi	r22, 0x04	; 4
    55a6:	41 e0       	ldi	r20, 0x01	; 1
    55a8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
    55ac:	82 e0       	ldi	r24, 0x02	; 2
    55ae:	65 e0       	ldi	r22, 0x05	; 5
    55b0:	41 e0       	ldi	r20, 0x01	; 1
    55b2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
    55b6:	82 e0       	ldi	r24, 0x02	; 2
    55b8:	66 e0       	ldi	r22, 0x06	; 6
    55ba:	41 e0       	ldi	r20, 0x01	; 1
    55bc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <DIO_U8SetPinValue>
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	a0 e2       	ldi	r26, 0x20	; 32
    55c6:	b1 e4       	ldi	r27, 0x41	; 65
    55c8:	8b 87       	std	Y+11, r24	; 0x0b
    55ca:	9c 87       	std	Y+12, r25	; 0x0c
    55cc:	ad 87       	std	Y+13, r26	; 0x0d
    55ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d8:	20 e0       	ldi	r18, 0x00	; 0
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	4a ef       	ldi	r20, 0xFA	; 250
    55de:	54 e4       	ldi	r21, 0x44	; 68
    55e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	8f 83       	std	Y+7, r24	; 0x07
    55ea:	98 87       	std	Y+8, r25	; 0x08
    55ec:	a9 87       	std	Y+9, r26	; 0x09
    55ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55f0:	6f 81       	ldd	r22, Y+7	; 0x07
    55f2:	78 85       	ldd	r23, Y+8	; 0x08
    55f4:	89 85       	ldd	r24, Y+9	; 0x09
    55f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f e3       	ldi	r21, 0x3F	; 63
    5600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5604:	88 23       	and	r24, r24
    5606:	2c f4       	brge	.+10     	; 0x5612 <Step_VoidSetAngle+0xaa6>
		__ticks = 1;
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	9e 83       	std	Y+6, r25	; 0x06
    560e:	8d 83       	std	Y+5, r24	; 0x05
    5610:	3f c0       	rjmp	.+126    	; 0x5690 <Step_VoidSetAngle+0xb24>
	else if (__tmp > 65535)
    5612:	6f 81       	ldd	r22, Y+7	; 0x07
    5614:	78 85       	ldd	r23, Y+8	; 0x08
    5616:	89 85       	ldd	r24, Y+9	; 0x09
    5618:	9a 85       	ldd	r25, Y+10	; 0x0a
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	3f ef       	ldi	r19, 0xFF	; 255
    561e:	4f e7       	ldi	r20, 0x7F	; 127
    5620:	57 e4       	ldi	r21, 0x47	; 71
    5622:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5626:	18 16       	cp	r1, r24
    5628:	4c f5       	brge	.+82     	; 0x567c <Step_VoidSetAngle+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    562a:	6b 85       	ldd	r22, Y+11	; 0x0b
    562c:	7c 85       	ldd	r23, Y+12	; 0x0c
    562e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5630:	9e 85       	ldd	r25, Y+14	; 0x0e
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	40 e2       	ldi	r20, 0x20	; 32
    5638:	51 e4       	ldi	r21, 0x41	; 65
    563a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563e:	dc 01       	movw	r26, r24
    5640:	cb 01       	movw	r24, r22
    5642:	bc 01       	movw	r22, r24
    5644:	cd 01       	movw	r24, r26
    5646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	9e 83       	std	Y+6, r25	; 0x06
    5650:	8d 83       	std	Y+5, r24	; 0x05
    5652:	0f c0       	rjmp	.+30     	; 0x5672 <Step_VoidSetAngle+0xb06>
    5654:	88 ec       	ldi	r24, 0xC8	; 200
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	9c 83       	std	Y+4, r25	; 0x04
    565a:	8b 83       	std	Y+3, r24	; 0x03
    565c:	8b 81       	ldd	r24, Y+3	; 0x03
    565e:	9c 81       	ldd	r25, Y+4	; 0x04
    5660:	01 97       	sbiw	r24, 0x01	; 1
    5662:	f1 f7       	brne	.-4      	; 0x5660 <Step_VoidSetAngle+0xaf4>
    5664:	9c 83       	std	Y+4, r25	; 0x04
    5666:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5668:	8d 81       	ldd	r24, Y+5	; 0x05
    566a:	9e 81       	ldd	r25, Y+6	; 0x06
    566c:	01 97       	sbiw	r24, 0x01	; 1
    566e:	9e 83       	std	Y+6, r25	; 0x06
    5670:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5672:	8d 81       	ldd	r24, Y+5	; 0x05
    5674:	9e 81       	ldd	r25, Y+6	; 0x06
    5676:	00 97       	sbiw	r24, 0x00	; 0
    5678:	69 f7       	brne	.-38     	; 0x5654 <Step_VoidSetAngle+0xae8>
    567a:	14 c0       	rjmp	.+40     	; 0x56a4 <Step_VoidSetAngle+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567c:	6f 81       	ldd	r22, Y+7	; 0x07
    567e:	78 85       	ldd	r23, Y+8	; 0x08
    5680:	89 85       	ldd	r24, Y+9	; 0x09
    5682:	9a 85       	ldd	r25, Y+10	; 0x0a
    5684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5688:	dc 01       	movw	r26, r24
    568a:	cb 01       	movw	r24, r22
    568c:	9e 83       	std	Y+6, r25	; 0x06
    568e:	8d 83       	std	Y+5, r24	; 0x05
    5690:	8d 81       	ldd	r24, Y+5	; 0x05
    5692:	9e 81       	ldd	r25, Y+6	; 0x06
    5694:	9a 83       	std	Y+2, r25	; 0x02
    5696:	89 83       	std	Y+1, r24	; 0x01
    5698:	89 81       	ldd	r24, Y+1	; 0x01
    569a:	9a 81       	ldd	r25, Y+2	; 0x02
    569c:	01 97       	sbiw	r24, 0x01	; 1
    569e:	f1 f7       	brne	.-4      	; 0x569c <Step_VoidSetAngle+0xb30>
    56a0:	9a 83       	std	Y+2, r25	; 0x02
    56a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
		}
	}
	else if (Copy_u8Direction == StepperMotor_u8_ClockWise)
	{
		for(Local_u32Counter = 0; Local_u32Counter < Local_u32NumberOfIterations; Local_u32Counter++)
    56a4:	9e 01       	movw	r18, r28
    56a6:	2f 58       	subi	r18, 0x8F	; 143
    56a8:	3f 4f       	sbci	r19, 0xFF	; 255
    56aa:	fe 01       	movw	r30, r28
    56ac:	ef 58       	subi	r30, 0x8F	; 143
    56ae:	ff 4f       	sbci	r31, 0xFF	; 255
    56b0:	80 81       	ld	r24, Z
    56b2:	91 81       	ldd	r25, Z+1	; 0x01
    56b4:	a2 81       	ldd	r26, Z+2	; 0x02
    56b6:	b3 81       	ldd	r27, Z+3	; 0x03
    56b8:	01 96       	adiw	r24, 0x01	; 1
    56ba:	a1 1d       	adc	r26, r1
    56bc:	b1 1d       	adc	r27, r1
    56be:	f9 01       	movw	r30, r18
    56c0:	80 83       	st	Z, r24
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	a2 83       	std	Z+2, r26	; 0x02
    56c6:	b3 83       	std	Z+3, r27	; 0x03
    56c8:	fe 01       	movw	r30, r28
    56ca:	ef 58       	subi	r30, 0x8F	; 143
    56cc:	ff 4f       	sbci	r31, 0xFF	; 255
    56ce:	de 01       	movw	r26, r28
    56d0:	ab 58       	subi	r26, 0x8B	; 139
    56d2:	bf 4f       	sbci	r27, 0xFF	; 255
    56d4:	20 81       	ld	r18, Z
    56d6:	31 81       	ldd	r19, Z+1	; 0x01
    56d8:	42 81       	ldd	r20, Z+2	; 0x02
    56da:	53 81       	ldd	r21, Z+3	; 0x03
    56dc:	8d 91       	ld	r24, X+
    56de:	9d 91       	ld	r25, X+
    56e0:	0d 90       	ld	r0, X+
    56e2:	bc 91       	ld	r27, X
    56e4:	a0 2d       	mov	r26, r0
    56e6:	28 17       	cp	r18, r24
    56e8:	39 07       	cpc	r19, r25
    56ea:	4a 07       	cpc	r20, r26
    56ec:	5b 07       	cpc	r21, r27
    56ee:	08 f4       	brcc	.+2      	; 0x56f2 <Step_VoidSetAngle+0xb86>
    56f0:	c1 cd       	rjmp	.-1150   	; 0x5274 <Step_VoidSetAngle+0x708>
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN5, DIO_U8_HIGH);
			DIO_U8SetPinValue(DIO_U8_PORTC, DIO_U8_PIN6, DIO_U8_HIGH);
			_delay_ms(10);
		}
	}
}
    56f2:	c1 58       	subi	r28, 0x81	; 129
    56f4:	df 4f       	sbci	r29, 0xFF	; 255
    56f6:	0f b6       	in	r0, 0x3f	; 63
    56f8:	f8 94       	cli
    56fa:	de bf       	out	0x3e, r29	; 62
    56fc:	0f be       	out	0x3f, r0	; 63
    56fe:	cd bf       	out	0x3d, r28	; 61
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	1f 91       	pop	r17
    5706:	0f 91       	pop	r16
    5708:	08 95       	ret

0000570a <TIMERS_VoidTimer1Init>:
/* Global Pointer To Function Timers */
static void(*TIMERS_PfTimer0OVF)(void) = NULL;
static void(*TIMERS_PfTimer0CTC)(void) = NULL;

void TIMERS_VoidTimer1Init(void)
{
    570a:	df 93       	push	r29
    570c:	cf 93       	push	r28
    570e:	cd b7       	in	r28, 0x3d	; 61
    5710:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode 14 Fast PMW */
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    5712:	af e4       	ldi	r26, 0x4F	; 79
    5714:	b0 e0       	ldi	r27, 0x00	; 0
    5716:	ef e4       	ldi	r30, 0x4F	; 79
    5718:	f0 e0       	ldi	r31, 0x00	; 0
    571a:	80 81       	ld	r24, Z
    571c:	82 60       	ori	r24, 0x02	; 2
    571e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    5720:	af e4       	ldi	r26, 0x4F	; 79
    5722:	b0 e0       	ldi	r27, 0x00	; 0
    5724:	ef e4       	ldi	r30, 0x4F	; 79
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	80 81       	ld	r24, Z
    572a:	8e 7f       	andi	r24, 0xFE	; 254
    572c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    572e:	ae e4       	ldi	r26, 0x4E	; 78
    5730:	b0 e0       	ldi	r27, 0x00	; 0
    5732:	ee e4       	ldi	r30, 0x4E	; 78
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	80 81       	ld	r24, Z
    5738:	80 61       	ori	r24, 0x10	; 16
    573a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    573c:	ae e4       	ldi	r26, 0x4E	; 78
    573e:	b0 e0       	ldi	r27, 0x00	; 0
    5740:	ee e4       	ldi	r30, 0x4E	; 78
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	88 60       	ori	r24, 0x08	; 8
    5748:	8c 93       	st	X, r24
	/* Set Top Value In Register ICR1 REG */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    574a:	af e4       	ldi	r26, 0x4F	; 79
    574c:	b0 e0       	ldi	r27, 0x00	; 0
    574e:	ef e4       	ldi	r30, 0x4F	; 79
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	80 81       	ld	r24, Z
    5754:	80 68       	ori	r24, 0x80	; 128
    5756:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    5758:	af e4       	ldi	r26, 0x4F	; 79
    575a:	b0 e0       	ldi	r27, 0x00	; 0
    575c:	ef e4       	ldi	r30, 0x4F	; 79
    575e:	f0 e0       	ldi	r31, 0x00	; 0
    5760:	80 81       	ld	r24, Z
    5762:	8f 7b       	andi	r24, 0xBF	; 191
    5764:	8c 93       	st	X, r24
	TIMERS_u16_ICR1_REG  = 19999;
    5766:	e6 e4       	ldi	r30, 0x46	; 70
    5768:	f0 e0       	ldi	r31, 0x00	; 0
    576a:	8f e1       	ldi	r24, 0x1F	; 31
    576c:	9e e4       	ldi	r25, 0x4E	; 78
    576e:	91 83       	std	Z+1, r25	; 0x01
    5770:	80 83       	st	Z, r24
	/* Set Hardware Action On Pin OCR */
	TIMERS_u16_OCR1A_REG = 999;
    5772:	ea e4       	ldi	r30, 0x4A	; 74
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	87 ee       	ldi	r24, 0xE7	; 231
    5778:	93 e0       	ldi	r25, 0x03	; 3
    577a:	91 83       	std	Z+1, r25	; 0x01
    577c:	80 83       	st	Z, r24
	/* Set Prescaler CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    577e:	ae e4       	ldi	r26, 0x4E	; 78
    5780:	b0 e0       	ldi	r27, 0x00	; 0
    5782:	ee e4       	ldi	r30, 0x4E	; 78
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	80 81       	ld	r24, Z
    5788:	8b 7f       	andi	r24, 0xFB	; 251
    578a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    578c:	ae e4       	ldi	r26, 0x4E	; 78
    578e:	b0 e0       	ldi	r27, 0x00	; 0
    5790:	ee e4       	ldi	r30, 0x4E	; 78
    5792:	f0 e0       	ldi	r31, 0x00	; 0
    5794:	80 81       	ld	r24, Z
    5796:	82 60       	ori	r24, 0x02	; 2
    5798:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    579a:	ae e4       	ldi	r26, 0x4E	; 78
    579c:	b0 e0       	ldi	r27, 0x00	; 0
    579e:	ee e4       	ldi	r30, 0x4E	; 78
    57a0:	f0 e0       	ldi	r31, 0x00	; 0
    57a2:	80 81       	ld	r24, Z
    57a4:	8e 7f       	andi	r24, 0xFE	; 254
    57a6:	8c 93       	st	X, r24
}
    57a8:	cf 91       	pop	r28
    57aa:	df 91       	pop	r29
    57ac:	08 95       	ret

000057ae <TIMERS_VoidTimer1SetCompareMatchValueA>:
void TIMERS_VoidTimer1SetCompareMatchValueA (u16 Copy_u16OCRValue)
{
    57ae:	df 93       	push	r29
    57b0:	cf 93       	push	r28
    57b2:	00 d0       	rcall	.+0      	; 0x57b4 <TIMERS_VoidTimer1SetCompareMatchValueA+0x6>
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCRValue;
    57bc:	ea e4       	ldi	r30, 0x4A	; 74
    57be:	f0 e0       	ldi	r31, 0x00	; 0
    57c0:	89 81       	ldd	r24, Y+1	; 0x01
    57c2:	9a 81       	ldd	r25, Y+2	; 0x02
    57c4:	91 83       	std	Z+1, r25	; 0x01
    57c6:	80 83       	st	Z, r24
}
    57c8:	0f 90       	pop	r0
    57ca:	0f 90       	pop	r0
    57cc:	cf 91       	pop	r28
    57ce:	df 91       	pop	r29
    57d0:	08 95       	ret

000057d2 <TIMERS_VoidInit>:
void TIMERS_VoidInit(void)
{
    57d2:	df 93       	push	r29
    57d4:	cf 93       	push	r28
    57d6:	cd b7       	in	r28, 0x3d	; 61
    57d8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMERS_u8_TIMSK_REG,1);
	/* Set Compare Match For unit Reg */
	TIMERS_u8_OCR0_REG = 99;
#elif    TIMER0_MODE == TIMER0_FAST_PWM_MODE
	/* Select Fast PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    57da:	a3 e5       	ldi	r26, 0x53	; 83
    57dc:	b0 e0       	ldi	r27, 0x00	; 0
    57de:	e3 e5       	ldi	r30, 0x53	; 83
    57e0:	f0 e0       	ldi	r31, 0x00	; 0
    57e2:	80 81       	ld	r24, Z
    57e4:	88 60       	ori	r24, 0x08	; 8
    57e6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
    57e8:	a3 e5       	ldi	r26, 0x53	; 83
    57ea:	b0 e0       	ldi	r27, 0x00	; 0
    57ec:	e3 e5       	ldi	r30, 0x53	; 83
    57ee:	f0 e0       	ldi	r31, 0x00	; 0
    57f0:	80 81       	ld	r24, Z
    57f2:	80 64       	ori	r24, 0x40	; 64
    57f4:	8c 93       	st	X, r24
	/* Select Hardware Pin Action on Compare Output Mode ,Fast PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
    57f6:	a3 e5       	ldi	r26, 0x53	; 83
    57f8:	b0 e0       	ldi	r27, 0x00	; 0
    57fa:	e3 e5       	ldi	r30, 0x53	; 83
    57fc:	f0 e0       	ldi	r31, 0x00	; 0
    57fe:	80 81       	ld	r24, Z
    5800:	80 62       	ori	r24, 0x20	; 32
    5802:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    5804:	a3 e5       	ldi	r26, 0x53	; 83
    5806:	b0 e0       	ldi	r27, 0x00	; 0
    5808:	e3 e5       	ldi	r30, 0x53	; 83
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	8f 7e       	andi	r24, 0xEF	; 239
    5810:	8c 93       	st	X, r24
	/* Select Clock/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    5812:	a3 e5       	ldi	r26, 0x53	; 83
    5814:	b0 e0       	ldi	r27, 0x00	; 0
    5816:	e3 e5       	ldi	r30, 0x53	; 83
    5818:	f0 e0       	ldi	r31, 0x00	; 0
    581a:	80 81       	ld	r24, Z
    581c:	8b 7f       	andi	r24, 0xFB	; 251
    581e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    5820:	a3 e5       	ldi	r26, 0x53	; 83
    5822:	b0 e0       	ldi	r27, 0x00	; 0
    5824:	e3 e5       	ldi	r30, 0x53	; 83
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	80 81       	ld	r24, Z
    582a:	82 60       	ori	r24, 0x02	; 2
    582c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    582e:	a3 e5       	ldi	r26, 0x53	; 83
    5830:	b0 e0       	ldi	r27, 0x00	; 0
    5832:	e3 e5       	ldi	r30, 0x53	; 83
    5834:	f0 e0       	ldi	r31, 0x00	; 0
    5836:	80 81       	ld	r24, Z
    5838:	8e 7f       	andi	r24, 0xFE	; 254
    583a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
#else  
       #error "Error Timer0 Mode"	
#endif 
}
    583c:	cf 91       	pop	r28
    583e:	df 91       	pop	r29
    5840:	08 95       	ret

00005842 <TIMERS_VoidTIMER0WriteCompareMatchValue>:
void TIMERS_VoidTIMER0WriteCompareMatchValue(u8 Copy_u8OCRValue)
{
    5842:	df 93       	push	r29
    5844:	cf 93       	push	r28
    5846:	0f 92       	push	r0
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCRValue;
    584e:	ec e5       	ldi	r30, 0x5C	; 92
    5850:	f0 e0       	ldi	r31, 0x00	; 0
    5852:	89 81       	ldd	r24, Y+1	; 0x01
    5854:	80 83       	st	Z, r24
}  
    5856:	0f 90       	pop	r0
    5858:	cf 91       	pop	r28
    585a:	df 91       	pop	r29
    585c:	08 95       	ret

0000585e <TIMERS_u8TIMER0OVFSetCallBack>:
u8 TIMERS_u8TIMER0OVFSetCallBack(void(*Copy_Pf)(void))
{
    585e:	df 93       	push	r29
    5860:	cf 93       	push	r28
    5862:	00 d0       	rcall	.+0      	; 0x5864 <TIMERS_u8TIMER0OVFSetCallBack+0x6>
    5864:	0f 92       	push	r0
    5866:	cd b7       	in	r28, 0x3d	; 61
    5868:	de b7       	in	r29, 0x3e	; 62
    586a:	9b 83       	std	Y+3, r25	; 0x03
    586c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = STATE_OK;
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pf != NULL)
    5872:	8a 81       	ldd	r24, Y+2	; 0x02
    5874:	9b 81       	ldd	r25, Y+3	; 0x03
    5876:	00 97       	sbiw	r24, 0x00	; 0
    5878:	39 f0       	breq	.+14     	; 0x5888 <TIMERS_u8TIMER0OVFSetCallBack+0x2a>
	{
		TIMERS_PfTimer0OVF = Copy_Pf;
    587a:	8a 81       	ldd	r24, Y+2	; 0x02
    587c:	9b 81       	ldd	r25, Y+3	; 0x03
    587e:	90 93 89 03 	sts	0x0389, r25
    5882:	80 93 88 03 	sts	0x0388, r24
    5886:	01 c0       	rjmp	.+2      	; 0x588a <TIMERS_u8TIMER0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_U8ErrorState = STATE_NOK;
    5888:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    588a:	89 81       	ldd	r24, Y+1	; 0x01
}
    588c:	0f 90       	pop	r0
    588e:	0f 90       	pop	r0
    5890:	0f 90       	pop	r0
    5892:	cf 91       	pop	r28
    5894:	df 91       	pop	r29
    5896:	08 95       	ret

00005898 <TIMERS_u8TIMER0CTCSetCallBack>:
u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_Pf)(void))
{
    5898:	df 93       	push	r29
    589a:	cf 93       	push	r28
    589c:	00 d0       	rcall	.+0      	; 0x589e <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    589e:	0f 92       	push	r0
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62
    58a4:	9b 83       	std	Y+3, r25	; 0x03
    58a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = STATE_OK;
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pf != NULL)
    58ac:	8a 81       	ldd	r24, Y+2	; 0x02
    58ae:	9b 81       	ldd	r25, Y+3	; 0x03
    58b0:	00 97       	sbiw	r24, 0x00	; 0
    58b2:	39 f0       	breq	.+14     	; 0x58c2 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
	{
		TIMERS_PfTimer0CTC = Copy_Pf;
    58b4:	8a 81       	ldd	r24, Y+2	; 0x02
    58b6:	9b 81       	ldd	r25, Y+3	; 0x03
    58b8:	90 93 8b 03 	sts	0x038B, r25
    58bc:	80 93 8a 03 	sts	0x038A, r24
    58c0:	01 c0       	rjmp	.+2      	; 0x58c4 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_U8ErrorState = STATE_NOK;
    58c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    58c6:	0f 90       	pop	r0
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	08 95       	ret

000058d2 <__vector_11>:
 
 /* ProtoType Of ISR FOR Timer0 OVF */
void __vector_11(void)          __attribute__((signal));
void __vector_11(void)
{
    58d2:	1f 92       	push	r1
    58d4:	0f 92       	push	r0
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	0f 92       	push	r0
    58da:	11 24       	eor	r1, r1
    58dc:	2f 93       	push	r18
    58de:	3f 93       	push	r19
    58e0:	4f 93       	push	r20
    58e2:	5f 93       	push	r21
    58e4:	6f 93       	push	r22
    58e6:	7f 93       	push	r23
    58e8:	8f 93       	push	r24
    58ea:	9f 93       	push	r25
    58ec:	af 93       	push	r26
    58ee:	bf 93       	push	r27
    58f0:	ef 93       	push	r30
    58f2:	ff 93       	push	r31
    58f4:	df 93       	push	r29
    58f6:	cf 93       	push	r28
    58f8:	cd b7       	in	r28, 0x3d	; 61
    58fa:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	/* Increment Counter Flag */
	Local_u16CounterOVF++;
    58fc:	80 91 8c 03 	lds	r24, 0x038C
    5900:	90 91 8d 03 	lds	r25, 0x038D
    5904:	01 96       	adiw	r24, 0x01	; 1
    5906:	90 93 8d 03 	sts	0x038D, r25
    590a:	80 93 8c 03 	sts	0x038C, r24
	/* Flag Happen 10 Time Every 256 MacroSecond */
	if(Local_u16CounterOVF == 2560)
    590e:	80 91 8c 03 	lds	r24, 0x038C
    5912:	90 91 8d 03 	lds	r25, 0x038D
    5916:	2a e0       	ldi	r18, 0x0A	; 10
    5918:	80 30       	cpi	r24, 0x00	; 0
    591a:	92 07       	cpc	r25, r18
    591c:	99 f4       	brne	.+38     	; 0x5944 <__vector_11+0x72>
	{
	    TIMERS_u8_TCNT0_REG = 196;
    591e:	e2 e5       	ldi	r30, 0x52	; 82
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	84 ec       	ldi	r24, 0xC4	; 196
    5924:	80 83       	st	Z, r24
		/* Clear OVF Counter */
		Local_u16CounterOVF = 0;
    5926:	10 92 8d 03 	sts	0x038D, r1
    592a:	10 92 8c 03 	sts	0x038C, r1
		/* Call Application Function */
		if(TIMERS_PfTimer0OVF != NULL)
    592e:	80 91 88 03 	lds	r24, 0x0388
    5932:	90 91 89 03 	lds	r25, 0x0389
    5936:	00 97       	sbiw	r24, 0x00	; 0
    5938:	29 f0       	breq	.+10     	; 0x5944 <__vector_11+0x72>
		{
			TIMERS_PfTimer0OVF();
    593a:	e0 91 88 03 	lds	r30, 0x0388
    593e:	f0 91 89 03 	lds	r31, 0x0389
    5942:	09 95       	icall
		}
	}
}
    5944:	cf 91       	pop	r28
    5946:	df 91       	pop	r29
    5948:	ff 91       	pop	r31
    594a:	ef 91       	pop	r30
    594c:	bf 91       	pop	r27
    594e:	af 91       	pop	r26
    5950:	9f 91       	pop	r25
    5952:	8f 91       	pop	r24
    5954:	7f 91       	pop	r23
    5956:	6f 91       	pop	r22
    5958:	5f 91       	pop	r21
    595a:	4f 91       	pop	r20
    595c:	3f 91       	pop	r19
    595e:	2f 91       	pop	r18
    5960:	0f 90       	pop	r0
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	0f 90       	pop	r0
    5966:	1f 90       	pop	r1
    5968:	18 95       	reti

0000596a <__vector_10>:

/* ProtoType Of ISR FOR Timer0 CTC */
void __vector_10(void)          __attribute__((signal));
void __vector_10(void)
{
    596a:	1f 92       	push	r1
    596c:	0f 92       	push	r0
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	0f 92       	push	r0
    5972:	11 24       	eor	r1, r1
    5974:	2f 93       	push	r18
    5976:	3f 93       	push	r19
    5978:	4f 93       	push	r20
    597a:	5f 93       	push	r21
    597c:	6f 93       	push	r22
    597e:	7f 93       	push	r23
    5980:	8f 93       	push	r24
    5982:	9f 93       	push	r25
    5984:	af 93       	push	r26
    5986:	bf 93       	push	r27
    5988:	ef 93       	push	r30
    598a:	ff 93       	push	r31
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	cd b7       	in	r28, 0x3d	; 61
    5992:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	/* Increment Counter Flag */
	Local_u16CounterCTC++;
    5994:	80 91 8e 03 	lds	r24, 0x038E
    5998:	90 91 8f 03 	lds	r25, 0x038F
    599c:	01 96       	adiw	r24, 0x01	; 1
    599e:	90 93 8f 03 	sts	0x038F, r25
    59a2:	80 93 8e 03 	sts	0x038E, r24
	/* Flag Happen 10 Time Every 256 MacroSecond */
	if(Local_u16CounterCTC == 10000)
    59a6:	80 91 8e 03 	lds	r24, 0x038E
    59aa:	90 91 8f 03 	lds	r25, 0x038F
    59ae:	27 e2       	ldi	r18, 0x27	; 39
    59b0:	80 31       	cpi	r24, 0x10	; 16
    59b2:	92 07       	cpc	r25, r18
    59b4:	79 f4       	brne	.+30     	; 0x59d4 <__vector_10+0x6a>
	{
		/* Clear OVF Counter */
		Local_u16CounterCTC = 0;
    59b6:	10 92 8f 03 	sts	0x038F, r1
    59ba:	10 92 8e 03 	sts	0x038E, r1
		/* Call Application Function */
		if(TIMERS_PfTimer0CTC != NULL)
    59be:	80 91 8a 03 	lds	r24, 0x038A
    59c2:	90 91 8b 03 	lds	r25, 0x038B
    59c6:	00 97       	sbiw	r24, 0x00	; 0
    59c8:	29 f0       	breq	.+10     	; 0x59d4 <__vector_10+0x6a>
		{
			TIMERS_PfTimer0CTC();
    59ca:	e0 91 8a 03 	lds	r30, 0x038A
    59ce:	f0 91 8b 03 	lds	r31, 0x038B
    59d2:	09 95       	icall
		}
	}
}
    59d4:	cf 91       	pop	r28
    59d6:	df 91       	pop	r29
    59d8:	ff 91       	pop	r31
    59da:	ef 91       	pop	r30
    59dc:	bf 91       	pop	r27
    59de:	af 91       	pop	r26
    59e0:	9f 91       	pop	r25
    59e2:	8f 91       	pop	r24
    59e4:	7f 91       	pop	r23
    59e6:	6f 91       	pop	r22
    59e8:	5f 91       	pop	r21
    59ea:	4f 91       	pop	r20
    59ec:	3f 91       	pop	r19
    59ee:	2f 91       	pop	r18
    59f0:	0f 90       	pop	r0
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	0f 90       	pop	r0
    59f6:	1f 90       	pop	r1
    59f8:	18 95       	reti

000059fa <UART_VoidInit>:
/* MCAL */
#include "UART_private.h"
#include "UART_interface.h"

void UART_VoidInit(void)
{
    59fa:	df 93       	push	r29
    59fc:	cf 93       	push	r28
    59fe:	0f 92       	push	r0
    5a00:	cd b7       	in	r28, 0x3d	; 61
    5a02:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC_Reg = 0b10000000;
    5a04:	80 e8       	ldi	r24, 0x80	; 128
    5a06:	89 83       	std	Y+1, r24	; 0x01
	/* Select Normal Speed Transmission */
	CLR_BIT(UART_u8_UCSRA_REG,1);
    5a08:	ab e2       	ldi	r26, 0x2B	; 43
    5a0a:	b0 e0       	ldi	r27, 0x00	; 0
    5a0c:	eb e2       	ldi	r30, 0x2B	; 43
    5a0e:	f0 e0       	ldi	r31, 0x00	; 0
    5a10:	80 81       	ld	r24, Z
    5a12:	8d 7f       	andi	r24, 0xFD	; 253
    5a14:	8c 93       	st	X, r24
	/* Disable Multi-processor Communication Mode */
	CLR_BIT(UART_u8_UCSRA_REG,0);
    5a16:	ab e2       	ldi	r26, 0x2B	; 43
    5a18:	b0 e0       	ldi	r27, 0x00	; 0
    5a1a:	eb e2       	ldi	r30, 0x2B	; 43
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	80 81       	ld	r24, Z
    5a20:	8e 7f       	andi	r24, 0xFE	; 254
    5a22:	8c 93       	st	X, r24
	/* Disable Asynchronous Operation */
	CLR_BIT(Local_u8UCSRC_Reg,6);
    5a24:	89 81       	ldd	r24, Y+1	; 0x01
    5a26:	8f 7b       	andi	r24, 0xBF	; 191
    5a28:	89 83       	std	Y+1, r24	; 0x01
	/* Disable Parity Mode */
	CLR_BIT(Local_u8UCSRC_Reg,5);
    5a2a:	89 81       	ldd	r24, Y+1	; 0x01
    5a2c:	8f 7d       	andi	r24, 0xDF	; 223
    5a2e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC_Reg,4);
    5a30:	89 81       	ldd	r24, Y+1	; 0x01
    5a32:	8f 7e       	andi	r24, 0xEF	; 239
    5a34:	89 83       	std	Y+1, r24	; 0x01
	/* Enable Tx , Rx */
	SET_BIT(UART_u8_UCSRB_REG,3);
    5a36:	aa e2       	ldi	r26, 0x2A	; 42
    5a38:	b0 e0       	ldi	r27, 0x00	; 0
    5a3a:	ea e2       	ldi	r30, 0x2A	; 42
    5a3c:	f0 e0       	ldi	r31, 0x00	; 0
    5a3e:	80 81       	ld	r24, Z
    5a40:	88 60       	ori	r24, 0x08	; 8
    5a42:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,4);
    5a44:	aa e2       	ldi	r26, 0x2A	; 42
    5a46:	b0 e0       	ldi	r27, 0x00	; 0
    5a48:	ea e2       	ldi	r30, 0x2A	; 42
    5a4a:	f0 e0       	ldi	r31, 0x00	; 0
    5a4c:	80 81       	ld	r24, Z
    5a4e:	80 61       	ori	r24, 0x10	; 16
    5a50:	8c 93       	st	X, r24
	/* Enable 1 - Stop Bit */
	SET_BIT(Local_u8UCSRC_Reg,3);
    5a52:	89 81       	ldd	r24, Y+1	; 0x01
    5a54:	88 60       	ori	r24, 0x08	; 8
    5a56:	89 83       	std	Y+1, r24	; 0x01
	/* Set Character Size 8 - Bit */
	SET_BIT(Local_u8UCSRC_Reg,2);
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	84 60       	ori	r24, 0x04	; 4
    5a5c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC_Reg,1);
    5a5e:	89 81       	ldd	r24, Y+1	; 0x01
    5a60:	82 60       	ori	r24, 0x02	; 2
    5a62:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UART_u8_UCSRB_REG,2);
    5a64:	aa e2       	ldi	r26, 0x2A	; 42
    5a66:	b0 e0       	ldi	r27, 0x00	; 0
    5a68:	ea e2       	ldi	r30, 0x2A	; 42
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	80 81       	ld	r24, Z
    5a6e:	84 60       	ori	r24, 0x04	; 4
    5a70:	8c 93       	st	X, r24
	/* Update UCSRC Register */
	UART_u8_UCSRC_REG = Local_u8UCSRC_Reg;
    5a72:	e0 e4       	ldi	r30, 0x40	; 64
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	80 83       	st	Z, r24
	/* Baud Rate = 9600 */ 
	UART_u8_UBRRL_REG = 51;
    5a7a:	e9 e2       	ldi	r30, 0x29	; 41
    5a7c:	f0 e0       	ldi	r31, 0x00	; 0
    5a7e:	83 e3       	ldi	r24, 0x33	; 51
    5a80:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = 0x00;
    5a82:	e0 e4       	ldi	r30, 0x40	; 64
    5a84:	f0 e0       	ldi	r31, 0x00	; 0
    5a86:	10 82       	st	Z, r1
}                    
    5a88:	0f 90       	pop	r0
    5a8a:	cf 91       	pop	r28
    5a8c:	df 91       	pop	r29
    5a8e:	08 95       	ret

00005a90 <UART_VoidSendDataByte>:
void UART_VoidSendDataByte(u8 Copy_u8SendData)
{
    5a90:	df 93       	push	r29
    5a92:	cf 93       	push	r28
    5a94:	0f 92       	push	r0
    5a96:	cd b7       	in	r28, 0x3d	; 61
    5a98:	de b7       	in	r29, 0x3e	; 62
    5a9a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait For Transmit Buffer Set */
	while((GET_BIT(UART_u8_UCSRA_REG,5))==0);
    5a9c:	eb e2       	ldi	r30, 0x2B	; 43
    5a9e:	f0 e0       	ldi	r31, 0x00	; 0
    5aa0:	80 81       	ld	r24, Z
    5aa2:	82 95       	swap	r24
    5aa4:	86 95       	lsr	r24
    5aa6:	87 70       	andi	r24, 0x07	; 7
    5aa8:	88 2f       	mov	r24, r24
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	81 70       	andi	r24, 0x01	; 1
    5aae:	90 70       	andi	r25, 0x00	; 0
    5ab0:	00 97       	sbiw	r24, 0x00	; 0
    5ab2:	a1 f3       	breq	.-24     	; 0x5a9c <UART_VoidSendDataByte+0xc>
	/* Send Data 8 - Bit */
	UART_u8_UDR_REG = Copy_u8SendData;
    5ab4:	ec e2       	ldi	r30, 0x2C	; 44
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	89 81       	ldd	r24, Y+1	; 0x01
    5aba:	80 83       	st	Z, r24
}
    5abc:	0f 90       	pop	r0
    5abe:	cf 91       	pop	r28
    5ac0:	df 91       	pop	r29
    5ac2:	08 95       	ret

00005ac4 <UART_VoidRecieveDataByte>:
u8 UART_VoidRecieveDataByte(u8 *Copy_u8RecieveData)
{
    5ac4:	df 93       	push	r29
    5ac6:	cf 93       	push	r28
    5ac8:	00 d0       	rcall	.+0      	; 0x5aca <UART_VoidRecieveDataByte+0x6>
    5aca:	00 d0       	rcall	.+0      	; 0x5acc <UART_VoidRecieveDataByte+0x8>
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	9c 83       	std	Y+4, r25	; 0x04
    5ad2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8ErrorState = STATE_OK;
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8RecieveData !=NULL)
    5ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    5ada:	9c 81       	ldd	r25, Y+4	; 0x04
    5adc:	00 97       	sbiw	r24, 0x00	; 0
    5ade:	61 f0       	breq	.+24     	; 0x5af8 <UART_VoidRecieveDataByte+0x34>
	{
	    /* Wait For Receive Buffer Is Cleared */
	    while((GET_BIT(UART_u8_UCSRA_REG,7))==0);
    5ae0:	eb e2       	ldi	r30, 0x2B	; 43
    5ae2:	f0 e0       	ldi	r31, 0x00	; 0
    5ae4:	80 81       	ld	r24, Z
    5ae6:	88 23       	and	r24, r24
    5ae8:	dc f7       	brge	.-10     	; 0x5ae0 <UART_VoidRecieveDataByte+0x1c>
	    /* Recieve Data */
	    *Copy_u8RecieveData = UART_u8_UDR_REG;
    5aea:	ec e2       	ldi	r30, 0x2C	; 44
    5aec:	f0 e0       	ldi	r31, 0x00	; 0
    5aee:	80 81       	ld	r24, Z
    5af0:	eb 81       	ldd	r30, Y+3	; 0x03
    5af2:	fc 81       	ldd	r31, Y+4	; 0x04
    5af4:	80 83       	st	Z, r24
    5af6:	01 c0       	rjmp	.+2      	; 0x5afa <UART_VoidRecieveDataByte+0x36>
	}
	else
	{
		u8 Local_U8ErrorState = STATE_NOK;
    5af8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    5afa:	8a 81       	ldd	r24, Y+2	; 0x02
    5afc:	0f 90       	pop	r0
    5afe:	0f 90       	pop	r0
    5b00:	0f 90       	pop	r0
    5b02:	0f 90       	pop	r0
    5b04:	cf 91       	pop	r28
    5b06:	df 91       	pop	r29
    5b08:	08 95       	ret

00005b0a <main>:

   /*          Global Variable For Receive Data Using UART            */
u8 Global_u8RecieveData;

int main()
{
    5b0a:	df 93       	push	r29
    5b0c:	cf 93       	push	r28
    5b0e:	cd b7       	in	r28, 0x3d	; 61
    5b10:	de b7       	in	r29, 0x3e	; 62
	/* Set Pins Config */
	DIO_VoidInit();
    5b12:	0e 94 3b 14 	call	0x2876	; 0x2876 <DIO_VoidInit>
	LCD_VoidInit();
    5b16:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_VoidInit>
	UART_VoidInit();
    5b1a:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <UART_VoidInit>
	ADC_VoidInit();
    5b1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_VoidInit>
	VoidServoInit();
    5b22:	0e 94 7f 25 	call	0x4afe	; 0x4afe <VoidServoInit>
	VoidControlledHomeLoginSystem();
    5b26:	0e 94 08 0c 	call	0x1810	; 0x1810 <VoidControlledHomeLoginSystem>

	while(1)
	{
		/*                               Check For Receive ASCII Code From Bluetooth                                    */
		UART_VoidRecieveDataByte(&Global_u8RecieveData);
    5b2a:	80 e9       	ldi	r24, 0x90	; 144
    5b2c:	93 e0       	ldi	r25, 0x03	; 3
    5b2e:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <UART_VoidRecieveDataByte>
		/*                                   Check For User Press Button Of Login                                       */
		if(Global_u8RecieveData == 'Q')
    5b32:	80 91 90 03 	lds	r24, 0x0390
    5b36:	81 35       	cpi	r24, 0x51	; 81
    5b38:	29 f4       	brne	.+10     	; 0x5b44 <main+0x3a>
		{
			LCD_VoidClear();
    5b3a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			VoidControlledHomeLoginSystem();
    5b3e:	0e 94 08 0c 	call	0x1810	; 0x1810 <VoidControlledHomeLoginSystem>
    5b42:	33 c0       	rjmp	.+102    	; 0x5baa <main+0xa0>
		}
		/*                                  Check For User Press Button Of ROOM 1                                       */
		else if(Global_u8RecieveData == '1')
    5b44:	80 91 90 03 	lds	r24, 0x0390
    5b48:	81 33       	cpi	r24, 0x31	; 49
    5b4a:	49 f4       	brne	.+18     	; 0x5b5e <main+0x54>
		{
			LCD_VoidClear();
    5b4c:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("You In Room 1");
    5b50:	85 e4       	ldi	r24, 0x45	; 69
    5b52:	93 e0       	ldi	r25, 0x03	; 3
    5b54:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidControlledHomeRoom1();
    5b58:	0e 94 80 07 	call	0xf00	; 0xf00 <VoidControlledHomeRoom1>
    5b5c:	26 c0       	rjmp	.+76     	; 0x5baa <main+0xa0>
		}
		/*                                  Check For User Press Button Of ROOM 2                                       */
		else if(Global_u8RecieveData == '2')
    5b5e:	80 91 90 03 	lds	r24, 0x0390
    5b62:	82 33       	cpi	r24, 0x32	; 50
    5b64:	49 f4       	brne	.+18     	; 0x5b78 <main+0x6e>
		{
			LCD_VoidClear();
    5b66:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("You In Room 2");
    5b6a:	83 e5       	ldi	r24, 0x53	; 83
    5b6c:	93 e0       	ldi	r25, 0x03	; 3
    5b6e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidControlledHomeRoom2();
    5b72:	0e 94 24 08 	call	0x1048	; 0x1048 <VoidControlledHomeRoom2>
    5b76:	19 c0       	rjmp	.+50     	; 0x5baa <main+0xa0>
		}
		/*                                  Check For User Press Button Of ROOM 3                                       */
		else if(Global_u8RecieveData == '3')
    5b78:	80 91 90 03 	lds	r24, 0x0390
    5b7c:	83 33       	cpi	r24, 0x33	; 51
    5b7e:	49 f4       	brne	.+18     	; 0x5b92 <main+0x88>
		{
			LCD_VoidClear();
    5b80:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("You In Room 3");
    5b84:	81 e6       	ldi	r24, 0x61	; 97
    5b86:	93 e0       	ldi	r25, 0x03	; 3
    5b88:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidControlledHomeRoom3();
    5b8c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <VoidControlledHomeRoom3>
    5b90:	0c c0       	rjmp	.+24     	; 0x5baa <main+0xa0>
		}
		/*                                  Check For User Press Button Of ROOM 4                                       */
		else if(Global_u8RecieveData == '4')
    5b92:	80 91 90 03 	lds	r24, 0x0390
    5b96:	84 33       	cpi	r24, 0x34	; 52
    5b98:	41 f4       	brne	.+16     	; 0x5baa <main+0xa0>
		{
			LCD_VoidClear();
    5b9a:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			LCD_VoidSentSringAndNum("You In Room 4");
    5b9e:	8f e6       	ldi	r24, 0x6F	; 111
    5ba0:	93 e0       	ldi	r25, 0x03	; 3
    5ba2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_VoidSentSringAndNum>
			VoidControlledHomeRoom4();
    5ba6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <VoidControlledHomeRoom4>
		}
		/*                                  Check For User Is Connected To Bluetooth                                    */
		if(Global_u8RecieveData == 'H')
    5baa:	80 91 90 03 	lds	r24, 0x0390
    5bae:	88 34       	cpi	r24, 0x48	; 72
    5bb0:	09 f0       	breq	.+2      	; 0x5bb4 <main+0xaa>
    5bb2:	bb cf       	rjmp	.-138    	; 0x5b2a <main+0x20>
		{
			LCD_VoidClear();
    5bb4:	0e 94 0a 20 	call	0x4014	; 0x4014 <LCD_VoidClear>
			VoidControlledHomeLoginSystem();
    5bb8:	0e 94 08 0c 	call	0x1810	; 0x1810 <VoidControlledHomeLoginSystem>
    5bbc:	b6 cf       	rjmp	.-148    	; 0x5b2a <main+0x20>

00005bbe <__mulsi3>:
    5bbe:	62 9f       	mul	r22, r18
    5bc0:	d0 01       	movw	r26, r0
    5bc2:	73 9f       	mul	r23, r19
    5bc4:	f0 01       	movw	r30, r0
    5bc6:	82 9f       	mul	r24, r18
    5bc8:	e0 0d       	add	r30, r0
    5bca:	f1 1d       	adc	r31, r1
    5bcc:	64 9f       	mul	r22, r20
    5bce:	e0 0d       	add	r30, r0
    5bd0:	f1 1d       	adc	r31, r1
    5bd2:	92 9f       	mul	r25, r18
    5bd4:	f0 0d       	add	r31, r0
    5bd6:	83 9f       	mul	r24, r19
    5bd8:	f0 0d       	add	r31, r0
    5bda:	74 9f       	mul	r23, r20
    5bdc:	f0 0d       	add	r31, r0
    5bde:	65 9f       	mul	r22, r21
    5be0:	f0 0d       	add	r31, r0
    5be2:	99 27       	eor	r25, r25
    5be4:	72 9f       	mul	r23, r18
    5be6:	b0 0d       	add	r27, r0
    5be8:	e1 1d       	adc	r30, r1
    5bea:	f9 1f       	adc	r31, r25
    5bec:	63 9f       	mul	r22, r19
    5bee:	b0 0d       	add	r27, r0
    5bf0:	e1 1d       	adc	r30, r1
    5bf2:	f9 1f       	adc	r31, r25
    5bf4:	bd 01       	movw	r22, r26
    5bf6:	cf 01       	movw	r24, r30
    5bf8:	11 24       	eor	r1, r1
    5bfa:	08 95       	ret

00005bfc <__udivmodhi4>:
    5bfc:	aa 1b       	sub	r26, r26
    5bfe:	bb 1b       	sub	r27, r27
    5c00:	51 e1       	ldi	r21, 0x11	; 17
    5c02:	07 c0       	rjmp	.+14     	; 0x5c12 <__udivmodhi4_ep>

00005c04 <__udivmodhi4_loop>:
    5c04:	aa 1f       	adc	r26, r26
    5c06:	bb 1f       	adc	r27, r27
    5c08:	a6 17       	cp	r26, r22
    5c0a:	b7 07       	cpc	r27, r23
    5c0c:	10 f0       	brcs	.+4      	; 0x5c12 <__udivmodhi4_ep>
    5c0e:	a6 1b       	sub	r26, r22
    5c10:	b7 0b       	sbc	r27, r23

00005c12 <__udivmodhi4_ep>:
    5c12:	88 1f       	adc	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	5a 95       	dec	r21
    5c18:	a9 f7       	brne	.-22     	; 0x5c04 <__udivmodhi4_loop>
    5c1a:	80 95       	com	r24
    5c1c:	90 95       	com	r25
    5c1e:	bc 01       	movw	r22, r24
    5c20:	cd 01       	movw	r24, r26
    5c22:	08 95       	ret

00005c24 <__udivmodsi4>:
    5c24:	a1 e2       	ldi	r26, 0x21	; 33
    5c26:	1a 2e       	mov	r1, r26
    5c28:	aa 1b       	sub	r26, r26
    5c2a:	bb 1b       	sub	r27, r27
    5c2c:	fd 01       	movw	r30, r26
    5c2e:	0d c0       	rjmp	.+26     	; 0x5c4a <__udivmodsi4_ep>

00005c30 <__udivmodsi4_loop>:
    5c30:	aa 1f       	adc	r26, r26
    5c32:	bb 1f       	adc	r27, r27
    5c34:	ee 1f       	adc	r30, r30
    5c36:	ff 1f       	adc	r31, r31
    5c38:	a2 17       	cp	r26, r18
    5c3a:	b3 07       	cpc	r27, r19
    5c3c:	e4 07       	cpc	r30, r20
    5c3e:	f5 07       	cpc	r31, r21
    5c40:	20 f0       	brcs	.+8      	; 0x5c4a <__udivmodsi4_ep>
    5c42:	a2 1b       	sub	r26, r18
    5c44:	b3 0b       	sbc	r27, r19
    5c46:	e4 0b       	sbc	r30, r20
    5c48:	f5 0b       	sbc	r31, r21

00005c4a <__udivmodsi4_ep>:
    5c4a:	66 1f       	adc	r22, r22
    5c4c:	77 1f       	adc	r23, r23
    5c4e:	88 1f       	adc	r24, r24
    5c50:	99 1f       	adc	r25, r25
    5c52:	1a 94       	dec	r1
    5c54:	69 f7       	brne	.-38     	; 0x5c30 <__udivmodsi4_loop>
    5c56:	60 95       	com	r22
    5c58:	70 95       	com	r23
    5c5a:	80 95       	com	r24
    5c5c:	90 95       	com	r25
    5c5e:	9b 01       	movw	r18, r22
    5c60:	ac 01       	movw	r20, r24
    5c62:	bd 01       	movw	r22, r26
    5c64:	cf 01       	movw	r24, r30
    5c66:	08 95       	ret

00005c68 <__prologue_saves__>:
    5c68:	2f 92       	push	r2
    5c6a:	3f 92       	push	r3
    5c6c:	4f 92       	push	r4
    5c6e:	5f 92       	push	r5
    5c70:	6f 92       	push	r6
    5c72:	7f 92       	push	r7
    5c74:	8f 92       	push	r8
    5c76:	9f 92       	push	r9
    5c78:	af 92       	push	r10
    5c7a:	bf 92       	push	r11
    5c7c:	cf 92       	push	r12
    5c7e:	df 92       	push	r13
    5c80:	ef 92       	push	r14
    5c82:	ff 92       	push	r15
    5c84:	0f 93       	push	r16
    5c86:	1f 93       	push	r17
    5c88:	cf 93       	push	r28
    5c8a:	df 93       	push	r29
    5c8c:	cd b7       	in	r28, 0x3d	; 61
    5c8e:	de b7       	in	r29, 0x3e	; 62
    5c90:	ca 1b       	sub	r28, r26
    5c92:	db 0b       	sbc	r29, r27
    5c94:	0f b6       	in	r0, 0x3f	; 63
    5c96:	f8 94       	cli
    5c98:	de bf       	out	0x3e, r29	; 62
    5c9a:	0f be       	out	0x3f, r0	; 63
    5c9c:	cd bf       	out	0x3d, r28	; 61
    5c9e:	09 94       	ijmp

00005ca0 <__epilogue_restores__>:
    5ca0:	2a 88       	ldd	r2, Y+18	; 0x12
    5ca2:	39 88       	ldd	r3, Y+17	; 0x11
    5ca4:	48 88       	ldd	r4, Y+16	; 0x10
    5ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
    5caa:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cac:	8c 84       	ldd	r8, Y+12	; 0x0c
    5cae:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cb2:	b9 84       	ldd	r11, Y+9	; 0x09
    5cb4:	c8 84       	ldd	r12, Y+8	; 0x08
    5cb6:	df 80       	ldd	r13, Y+7	; 0x07
    5cb8:	ee 80       	ldd	r14, Y+6	; 0x06
    5cba:	fd 80       	ldd	r15, Y+5	; 0x05
    5cbc:	0c 81       	ldd	r16, Y+4	; 0x04
    5cbe:	1b 81       	ldd	r17, Y+3	; 0x03
    5cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    5cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    5cc4:	ce 0f       	add	r28, r30
    5cc6:	d1 1d       	adc	r29, r1
    5cc8:	0f b6       	in	r0, 0x3f	; 63
    5cca:	f8 94       	cli
    5ccc:	de bf       	out	0x3e, r29	; 62
    5cce:	0f be       	out	0x3f, r0	; 63
    5cd0:	cd bf       	out	0x3d, r28	; 61
    5cd2:	ed 01       	movw	r28, r26
    5cd4:	08 95       	ret

00005cd6 <_exit>:
    5cd6:	f8 94       	cli

00005cd8 <__stop_program>:
    5cd8:	ff cf       	rjmp	.-2      	; 0x5cd8 <__stop_program>
